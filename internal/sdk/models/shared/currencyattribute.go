// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

// CurrencyAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type CurrencyAttributeConstraints struct {
}

func (c CurrencyAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CurrencyAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

// CurrencyAttribute1 - A currency configuration
type CurrencyAttribute1 struct {
	Code        string  `json:"code"`
	Description string  `json:"description"`
	Flag        *string `json:"flag,omitempty"`
	Symbol      string  `json:"symbol"`
}

func (c CurrencyAttribute1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CurrencyAttribute1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"code", "description", "symbol"}); err != nil {
		return err
	}
	return nil
}

func (c *CurrencyAttribute1) GetCode() string {
	if c == nil {
		return ""
	}
	return c.Code
}

func (c *CurrencyAttribute1) GetDescription() string {
	if c == nil {
		return ""
	}
	return c.Description
}

func (c *CurrencyAttribute1) GetFlag() *string {
	if c == nil {
		return nil
	}
	return c.Flag
}

func (c *CurrencyAttribute1) GetSymbol() string {
	if c == nil {
		return ""
	}
	return c.Symbol
}

type CurrencyAttributeCurrencyType string

const (
	CurrencyAttributeCurrencyTypeCurrencyAttribute1 CurrencyAttributeCurrencyType = "CurrencyAttribute_1"
)

type CurrencyAttributeCurrency struct {
	CurrencyAttribute1 *CurrencyAttribute1 `queryParam:"inline,name=currency"`

	Type CurrencyAttributeCurrencyType
}

func CreateCurrencyAttributeCurrencyCurrencyAttribute1(currencyAttribute1 CurrencyAttribute1) CurrencyAttributeCurrency {
	typ := CurrencyAttributeCurrencyTypeCurrencyAttribute1

	return CurrencyAttributeCurrency{
		CurrencyAttribute1: &currencyAttribute1,
		Type:               typ,
	}
}

func (u *CurrencyAttributeCurrency) UnmarshalJSON(data []byte) error {

	var currencyAttribute1 CurrencyAttribute1 = CurrencyAttribute1{}
	if err := utils.UnmarshalJSON(data, &currencyAttribute1, "", true, nil); err == nil {
		u.CurrencyAttribute1 = &currencyAttribute1
		u.Type = CurrencyAttributeCurrencyTypeCurrencyAttribute1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CurrencyAttributeCurrency", string(data))
}

func (u CurrencyAttributeCurrency) MarshalJSON() ([]byte, error) {
	if u.CurrencyAttribute1 != nil {
		return utils.MarshalJSON(u.CurrencyAttribute1, "", true)
	}

	return nil, errors.New("could not marshal union type CurrencyAttributeCurrency: all fields are null")
}

// CurrencyAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type CurrencyAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (c CurrencyAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CurrencyAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *CurrencyAttributeInfoHelpers) GetHintCustomComponent() *string {
	if c == nil {
		return nil
	}
	return c.HintCustomComponent
}

func (c *CurrencyAttributeInfoHelpers) GetHintText() *string {
	if c == nil {
		return nil
	}
	return c.HintText
}

func (c *CurrencyAttributeInfoHelpers) GetHintTextKey() *string {
	if c == nil {
		return nil
	}
	return c.HintTextKey
}

func (c *CurrencyAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if c == nil {
		return nil
	}
	return c.HintTooltipPlacement
}

type CurrencyAttributeType string

const (
	CurrencyAttributeTypeCurrency CurrencyAttributeType = "currency"
)

func (e CurrencyAttributeType) ToPointer() *CurrencyAttributeType {
	return &e
}
func (e *CurrencyAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "currency":
		*e = CurrencyAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CurrencyAttributeType: %v", v)
	}
}

// CurrencyAttribute - Currency input
type CurrencyAttribute struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *CurrencyAttributeConstraints `json:"constraints,omitempty"`
	// An array of currency configurations with a country code (ISO-4217)
	Currency             []CurrencyAttributeCurrency `json:"currency"`
	CurrencySelectorOnly *bool                       `default:"false" json:"currency_selector_only"`
	DefaultValue         any                         `json:"default_value,omitempty"`
	Deprecated           *bool                       `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *CurrencyAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                        `json:"label"`
	Layout      *string                       `json:"layout,omitempty"`
	Name        string                        `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                 `default:"true" json:"sortable"`
	Type           CurrencyAttributeType `json:"type"`
	ValueFormatter *string               `json:"value_formatter,omitempty"`
}

func (c CurrencyAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CurrencyAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"currency", "label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (c *CurrencyAttribute) GetManifest() []string {
	if c == nil {
		return nil
	}
	return c.Manifest
}

func (c *CurrencyAttribute) GetPurpose() []string {
	if c == nil {
		return nil
	}
	return c.Purpose
}

func (c *CurrencyAttribute) GetConstraints() *CurrencyAttributeConstraints {
	if c == nil {
		return nil
	}
	return c.Constraints
}

func (c *CurrencyAttribute) GetCurrency() []CurrencyAttributeCurrency {
	if c == nil {
		return []CurrencyAttributeCurrency{}
	}
	return c.Currency
}

func (c *CurrencyAttribute) GetCurrencySelectorOnly() *bool {
	if c == nil {
		return nil
	}
	return c.CurrencySelectorOnly
}

func (c *CurrencyAttribute) GetDefaultValue() any {
	if c == nil {
		return nil
	}
	return c.DefaultValue
}

func (c *CurrencyAttribute) GetDeprecated() *bool {
	if c == nil {
		return nil
	}
	return c.Deprecated
}

func (c *CurrencyAttribute) GetEntityBuilderDisableEdit() *bool {
	if c == nil {
		return nil
	}
	return c.EntityBuilderDisableEdit
}

func (c *CurrencyAttribute) GetFeatureFlag() *string {
	if c == nil {
		return nil
	}
	return c.FeatureFlag
}

func (c *CurrencyAttribute) GetGroup() *string {
	if c == nil {
		return nil
	}
	return c.Group
}

func (c *CurrencyAttribute) GetHasPrimary() *bool {
	if c == nil {
		return nil
	}
	return c.HasPrimary
}

func (c *CurrencyAttribute) GetHidden() *bool {
	if c == nil {
		return nil
	}
	return c.Hidden
}

func (c *CurrencyAttribute) GetHideLabel() *bool {
	if c == nil {
		return nil
	}
	return c.HideLabel
}

func (c *CurrencyAttribute) GetIcon() *string {
	if c == nil {
		return nil
	}
	return c.Icon
}

func (c *CurrencyAttribute) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CurrencyAttribute) GetInfoHelpers() *CurrencyAttributeInfoHelpers {
	if c == nil {
		return nil
	}
	return c.InfoHelpers
}

func (c *CurrencyAttribute) GetLabel() string {
	if c == nil {
		return ""
	}
	return c.Label
}

func (c *CurrencyAttribute) GetLayout() *string {
	if c == nil {
		return nil
	}
	return c.Layout
}

func (c *CurrencyAttribute) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CurrencyAttribute) GetOrder() *int64 {
	if c == nil {
		return nil
	}
	return c.Order
}

func (c *CurrencyAttribute) GetPlaceholder() *string {
	if c == nil {
		return nil
	}
	return c.Placeholder
}

func (c *CurrencyAttribute) GetPreviewValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.PreviewValueFormatter
}

func (c *CurrencyAttribute) GetProtected() *bool {
	if c == nil {
		return nil
	}
	return c.Protected
}

func (c *CurrencyAttribute) GetReadonly() *bool {
	if c == nil {
		return nil
	}
	return c.Readonly
}

func (c *CurrencyAttribute) GetRenderCondition() *string {
	if c == nil {
		return nil
	}
	return c.RenderCondition
}

func (c *CurrencyAttribute) GetRepeatable() *bool {
	if c == nil {
		return nil
	}
	return c.Repeatable
}

func (c *CurrencyAttribute) GetRequired() *bool {
	if c == nil {
		return nil
	}
	return c.Required
}

func (c *CurrencyAttribute) GetSettingsFlag() []SettingFlag {
	if c == nil {
		return nil
	}
	return c.SettingsFlag
}

func (c *CurrencyAttribute) GetShowInTable() *bool {
	if c == nil {
		return nil
	}
	return c.ShowInTable
}

func (c *CurrencyAttribute) GetSortable() *bool {
	if c == nil {
		return nil
	}
	return c.Sortable
}

func (c *CurrencyAttribute) GetType() CurrencyAttributeType {
	if c == nil {
		return CurrencyAttributeType("")
	}
	return c.Type
}

func (c *CurrencyAttribute) GetValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.ValueFormatter
}
