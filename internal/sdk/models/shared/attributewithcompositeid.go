// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

// SchemasPriceComponentAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasPriceComponentAttributeConstraints struct {
}

func (s SchemasPriceComponentAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPriceComponentAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasPriceComponentAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasPriceComponentAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasPriceComponentAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPriceComponentAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasPriceComponentAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasPriceComponentAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasPriceComponentAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasPriceComponentAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasPriceComponentAttributeType string

const (
	SchemasPriceComponentAttributeTypePriceComponent SchemasPriceComponentAttributeType = "price_component"
)

func (e SchemasPriceComponentAttributeType) ToPointer() *SchemasPriceComponentAttributeType {
	return &e
}
func (e *SchemasPriceComponentAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "price_component":
		*e = SchemasPriceComponentAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasPriceComponentAttributeType: %v", v)
	}
}

// PriceComponentAttributeSchemas - Price component
type PriceComponentAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPriceComponentAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                        `json:"default_value,omitempty"`
	Deprecated   *bool                                      `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPriceComponentAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                     `json:"label"`
	Layout      *string                                    `json:"layout,omitempty"`
	Name        string                                     `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                              `default:"true" json:"sortable"`
	Type           SchemasPriceComponentAttributeType `json:"type"`
	ValueFormatter *string                            `json:"value_formatter,omitempty"`
}

func (p PriceComponentAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PriceComponentAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PriceComponentAttributeSchemas) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PriceComponentAttributeSchemas) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PriceComponentAttributeSchemas) GetCompositeID() *string {
	if p == nil {
		return nil
	}
	return p.CompositeID
}

func (p *PriceComponentAttributeSchemas) GetConstraints() *SchemasPriceComponentAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PriceComponentAttributeSchemas) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PriceComponentAttributeSchemas) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PriceComponentAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PriceComponentAttributeSchemas) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PriceComponentAttributeSchemas) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PriceComponentAttributeSchemas) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PriceComponentAttributeSchemas) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PriceComponentAttributeSchemas) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PriceComponentAttributeSchemas) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PriceComponentAttributeSchemas) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PriceComponentAttributeSchemas) GetInfoHelpers() *SchemasPriceComponentAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PriceComponentAttributeSchemas) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PriceComponentAttributeSchemas) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PriceComponentAttributeSchemas) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PriceComponentAttributeSchemas) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PriceComponentAttributeSchemas) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PriceComponentAttributeSchemas) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PriceComponentAttributeSchemas) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PriceComponentAttributeSchemas) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PriceComponentAttributeSchemas) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PriceComponentAttributeSchemas) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PriceComponentAttributeSchemas) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PriceComponentAttributeSchemas) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PriceComponentAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PriceComponentAttributeSchemas) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PriceComponentAttributeSchemas) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PriceComponentAttributeSchemas) GetType() SchemasPriceComponentAttributeType {
	if p == nil {
		return SchemasPriceComponentAttributeType("")
	}
	return p.Type
}

func (p *PriceComponentAttributeSchemas) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// SchemasPaymentAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasPaymentAttributeConstraints struct {
}

func (s SchemasPaymentAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPaymentAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasPaymentAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasPaymentAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasPaymentAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPaymentAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasPaymentAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasPaymentAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasPaymentAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasPaymentAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasPaymentAttributeType string

const (
	SchemasPaymentAttributeTypePayment SchemasPaymentAttributeType = "payment"
)

func (e SchemasPaymentAttributeType) ToPointer() *SchemasPaymentAttributeType {
	return &e
}
func (e *SchemasPaymentAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		*e = SchemasPaymentAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasPaymentAttributeType: %v", v)
	}
}

// PaymentAttributeSchemas - Payment method
type PaymentAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPaymentAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                 `json:"default_value,omitempty"`
	Deprecated   *bool                               `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPaymentAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                              `json:"label"`
	Layout      *string                             `json:"layout,omitempty"`
	Name        string                              `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                       `default:"true" json:"sortable"`
	Type           SchemasPaymentAttributeType `json:"type"`
	ValueFormatter *string                     `json:"value_formatter,omitempty"`
}

func (p PaymentAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PaymentAttributeSchemas) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PaymentAttributeSchemas) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PaymentAttributeSchemas) GetCompositeID() *string {
	if p == nil {
		return nil
	}
	return p.CompositeID
}

func (p *PaymentAttributeSchemas) GetConstraints() *SchemasPaymentAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PaymentAttributeSchemas) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PaymentAttributeSchemas) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PaymentAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PaymentAttributeSchemas) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PaymentAttributeSchemas) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PaymentAttributeSchemas) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PaymentAttributeSchemas) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PaymentAttributeSchemas) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PaymentAttributeSchemas) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PaymentAttributeSchemas) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PaymentAttributeSchemas) GetInfoHelpers() *SchemasPaymentAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PaymentAttributeSchemas) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PaymentAttributeSchemas) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PaymentAttributeSchemas) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PaymentAttributeSchemas) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PaymentAttributeSchemas) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PaymentAttributeSchemas) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PaymentAttributeSchemas) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PaymentAttributeSchemas) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PaymentAttributeSchemas) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PaymentAttributeSchemas) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PaymentAttributeSchemas) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PaymentAttributeSchemas) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PaymentAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PaymentAttributeSchemas) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PaymentAttributeSchemas) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PaymentAttributeSchemas) GetType() SchemasPaymentAttributeType {
	if p == nil {
		return SchemasPaymentAttributeType("")
	}
	return p.Type
}

func (p *PaymentAttributeSchemas) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// SchemasEmailAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasEmailAttributeConstraints struct {
}

func (s SchemasEmailAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasEmailAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasEmailAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasEmailAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasEmailAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasEmailAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasEmailAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasEmailAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasEmailAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasEmailAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasEmailAttributeType string

const (
	SchemasEmailAttributeTypeEmail SchemasEmailAttributeType = "email"
)

func (e SchemasEmailAttributeType) ToPointer() *SchemasEmailAttributeType {
	return &e
}
func (e *SchemasEmailAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		*e = SchemasEmailAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasEmailAttributeType: %v", v)
	}
}

// EmailAttributeSchemas - Email address
type EmailAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasEmailAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                               `json:"default_value,omitempty"`
	Deprecated   *bool                             `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasEmailAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                            `json:"label"`
	Layout      *string                           `json:"layout,omitempty"`
	Name        string                            `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                     `default:"true" json:"sortable"`
	Type           SchemasEmailAttributeType `json:"type"`
	ValueFormatter *string                   `json:"value_formatter,omitempty"`
}

func (e EmailAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EmailAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (e *EmailAttributeSchemas) GetManifest() []string {
	if e == nil {
		return nil
	}
	return e.Manifest
}

func (e *EmailAttributeSchemas) GetPurpose() []string {
	if e == nil {
		return nil
	}
	return e.Purpose
}

func (e *EmailAttributeSchemas) GetCompositeID() *string {
	if e == nil {
		return nil
	}
	return e.CompositeID
}

func (e *EmailAttributeSchemas) GetConstraints() *SchemasEmailAttributeConstraints {
	if e == nil {
		return nil
	}
	return e.Constraints
}

func (e *EmailAttributeSchemas) GetDefaultValue() any {
	if e == nil {
		return nil
	}
	return e.DefaultValue
}

func (e *EmailAttributeSchemas) GetDeprecated() *bool {
	if e == nil {
		return nil
	}
	return e.Deprecated
}

func (e *EmailAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if e == nil {
		return nil
	}
	return e.EntityBuilderDisableEdit
}

func (e *EmailAttributeSchemas) GetFeatureFlag() *string {
	if e == nil {
		return nil
	}
	return e.FeatureFlag
}

func (e *EmailAttributeSchemas) GetGroup() *string {
	if e == nil {
		return nil
	}
	return e.Group
}

func (e *EmailAttributeSchemas) GetHasPrimary() *bool {
	if e == nil {
		return nil
	}
	return e.HasPrimary
}

func (e *EmailAttributeSchemas) GetHidden() *bool {
	if e == nil {
		return nil
	}
	return e.Hidden
}

func (e *EmailAttributeSchemas) GetHideLabel() *bool {
	if e == nil {
		return nil
	}
	return e.HideLabel
}

func (e *EmailAttributeSchemas) GetIcon() *string {
	if e == nil {
		return nil
	}
	return e.Icon
}

func (e *EmailAttributeSchemas) GetID() *string {
	if e == nil {
		return nil
	}
	return e.ID
}

func (e *EmailAttributeSchemas) GetInfoHelpers() *SchemasEmailAttributeInfoHelpers {
	if e == nil {
		return nil
	}
	return e.InfoHelpers
}

func (e *EmailAttributeSchemas) GetLabel() string {
	if e == nil {
		return ""
	}
	return e.Label
}

func (e *EmailAttributeSchemas) GetLayout() *string {
	if e == nil {
		return nil
	}
	return e.Layout
}

func (e *EmailAttributeSchemas) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *EmailAttributeSchemas) GetOrder() *int64 {
	if e == nil {
		return nil
	}
	return e.Order
}

func (e *EmailAttributeSchemas) GetPlaceholder() *string {
	if e == nil {
		return nil
	}
	return e.Placeholder
}

func (e *EmailAttributeSchemas) GetPreviewValueFormatter() *string {
	if e == nil {
		return nil
	}
	return e.PreviewValueFormatter
}

func (e *EmailAttributeSchemas) GetProtected() *bool {
	if e == nil {
		return nil
	}
	return e.Protected
}

func (e *EmailAttributeSchemas) GetReadonly() *bool {
	if e == nil {
		return nil
	}
	return e.Readonly
}

func (e *EmailAttributeSchemas) GetRenderCondition() *string {
	if e == nil {
		return nil
	}
	return e.RenderCondition
}

func (e *EmailAttributeSchemas) GetRepeatable() *bool {
	if e == nil {
		return nil
	}
	return e.Repeatable
}

func (e *EmailAttributeSchemas) GetRequired() *bool {
	if e == nil {
		return nil
	}
	return e.Required
}

func (e *EmailAttributeSchemas) GetSchema() *string {
	if e == nil {
		return nil
	}
	return e.Schema
}

func (e *EmailAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if e == nil {
		return nil
	}
	return e.SettingsFlag
}

func (e *EmailAttributeSchemas) GetShowInTable() *bool {
	if e == nil {
		return nil
	}
	return e.ShowInTable
}

func (e *EmailAttributeSchemas) GetSortable() *bool {
	if e == nil {
		return nil
	}
	return e.Sortable
}

func (e *EmailAttributeSchemas) GetType() SchemasEmailAttributeType {
	if e == nil {
		return SchemasEmailAttributeType("")
	}
	return e.Type
}

func (e *EmailAttributeSchemas) GetValueFormatter() *string {
	if e == nil {
		return nil
	}
	return e.ValueFormatter
}

// SchemasPhoneAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasPhoneAttributeConstraints struct {
}

func (s SchemasPhoneAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPhoneAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasPhoneAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasPhoneAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasPhoneAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPhoneAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasPhoneAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasPhoneAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasPhoneAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasPhoneAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasPhoneAttributeType string

const (
	SchemasPhoneAttributeTypePhone SchemasPhoneAttributeType = "phone"
)

func (e SchemasPhoneAttributeType) ToPointer() *SchemasPhoneAttributeType {
	return &e
}
func (e *SchemasPhoneAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "phone":
		*e = SchemasPhoneAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasPhoneAttributeType: %v", v)
	}
}

// PhoneAttributeSchemas - Phone number
type PhoneAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPhoneAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                               `json:"default_value,omitempty"`
	Deprecated   *bool                             `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPhoneAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                            `json:"label"`
	Layout      *string                           `json:"layout,omitempty"`
	Name        string                            `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                     `default:"true" json:"sortable"`
	Type           SchemasPhoneAttributeType `json:"type"`
	ValueFormatter *string                   `json:"value_formatter,omitempty"`
}

func (p PhoneAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PhoneAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PhoneAttributeSchemas) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PhoneAttributeSchemas) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PhoneAttributeSchemas) GetCompositeID() *string {
	if p == nil {
		return nil
	}
	return p.CompositeID
}

func (p *PhoneAttributeSchemas) GetConstraints() *SchemasPhoneAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PhoneAttributeSchemas) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PhoneAttributeSchemas) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PhoneAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PhoneAttributeSchemas) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PhoneAttributeSchemas) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PhoneAttributeSchemas) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PhoneAttributeSchemas) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PhoneAttributeSchemas) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PhoneAttributeSchemas) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PhoneAttributeSchemas) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PhoneAttributeSchemas) GetInfoHelpers() *SchemasPhoneAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PhoneAttributeSchemas) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PhoneAttributeSchemas) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PhoneAttributeSchemas) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PhoneAttributeSchemas) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PhoneAttributeSchemas) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PhoneAttributeSchemas) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PhoneAttributeSchemas) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PhoneAttributeSchemas) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PhoneAttributeSchemas) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PhoneAttributeSchemas) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PhoneAttributeSchemas) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PhoneAttributeSchemas) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PhoneAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PhoneAttributeSchemas) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PhoneAttributeSchemas) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PhoneAttributeSchemas) GetType() SchemasPhoneAttributeType {
	if p == nil {
		return SchemasPhoneAttributeType("")
	}
	return p.Type
}

func (p *PhoneAttributeSchemas) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// SchemasPortalAccessAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasPortalAccessAttributeConstraints struct {
}

func (s SchemasPortalAccessAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPortalAccessAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasPortalAccessAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasPortalAccessAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasPortalAccessAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPortalAccessAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasPortalAccessAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasPortalAccessAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasPortalAccessAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasPortalAccessAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasPortalAccessAttributeType string

const (
	SchemasPortalAccessAttributeTypePortalAccess SchemasPortalAccessAttributeType = "portal_access"
)

func (e SchemasPortalAccessAttributeType) ToPointer() *SchemasPortalAccessAttributeType {
	return &e
}
func (e *SchemasPortalAccessAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "portal_access":
		*e = SchemasPortalAccessAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasPortalAccessAttributeType: %v", v)
	}
}

// PortalAccessAttributeSchemas - Portal access configuration
type PortalAccessAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPortalAccessAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                      `json:"default_value,omitempty"`
	Deprecated   *bool                                    `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPortalAccessAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                   `json:"label"`
	Layout      *string                                  `json:"layout,omitempty"`
	Name        string                                   `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                            `default:"true" json:"sortable"`
	Type           SchemasPortalAccessAttributeType `json:"type"`
	ValueFormatter *string                          `json:"value_formatter,omitempty"`
}

func (p PortalAccessAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PortalAccessAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PortalAccessAttributeSchemas) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PortalAccessAttributeSchemas) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PortalAccessAttributeSchemas) GetCompositeID() *string {
	if p == nil {
		return nil
	}
	return p.CompositeID
}

func (p *PortalAccessAttributeSchemas) GetConstraints() *SchemasPortalAccessAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PortalAccessAttributeSchemas) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PortalAccessAttributeSchemas) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PortalAccessAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PortalAccessAttributeSchemas) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PortalAccessAttributeSchemas) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PortalAccessAttributeSchemas) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PortalAccessAttributeSchemas) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PortalAccessAttributeSchemas) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PortalAccessAttributeSchemas) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PortalAccessAttributeSchemas) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PortalAccessAttributeSchemas) GetInfoHelpers() *SchemasPortalAccessAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PortalAccessAttributeSchemas) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PortalAccessAttributeSchemas) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PortalAccessAttributeSchemas) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PortalAccessAttributeSchemas) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PortalAccessAttributeSchemas) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PortalAccessAttributeSchemas) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PortalAccessAttributeSchemas) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PortalAccessAttributeSchemas) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PortalAccessAttributeSchemas) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PortalAccessAttributeSchemas) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PortalAccessAttributeSchemas) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PortalAccessAttributeSchemas) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PortalAccessAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PortalAccessAttributeSchemas) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PortalAccessAttributeSchemas) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PortalAccessAttributeSchemas) GetType() SchemasPortalAccessAttributeType {
	if p == nil {
		return SchemasPortalAccessAttributeType("")
	}
	return p.Type
}

func (p *PortalAccessAttributeSchemas) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// SchemasPartnerOrganisationAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasPartnerOrganisationAttributeConstraints struct {
}

func (s SchemasPartnerOrganisationAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPartnerOrganisationAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasPartnerOrganisationAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasPartnerOrganisationAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasPartnerOrganisationAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPartnerOrganisationAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasPartnerOrganisationAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasPartnerOrganisationAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasPartnerOrganisationAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasPartnerOrganisationAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasPartnerOrganisationAttributeType string

const (
	SchemasPartnerOrganisationAttributeTypePartnerOrganisation SchemasPartnerOrganisationAttributeType = "partner_organisation"
)

func (e SchemasPartnerOrganisationAttributeType) ToPointer() *SchemasPartnerOrganisationAttributeType {
	return &e
}
func (e *SchemasPartnerOrganisationAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "partner_organisation":
		*e = SchemasPartnerOrganisationAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasPartnerOrganisationAttributeType: %v", v)
	}
}

// PartnerOrganisationAttributeSchemas - Shared Partner Organisations
type PartnerOrganisationAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPartnerOrganisationAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                             `json:"default_value,omitempty"`
	Deprecated   *bool                                           `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPartnerOrganisationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                          `json:"label"`
	Layout      *string                                         `json:"layout,omitempty"`
	Name        string                                          `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                                   `default:"true" json:"sortable"`
	Type           SchemasPartnerOrganisationAttributeType `json:"type"`
	ValueFormatter *string                                 `json:"value_formatter,omitempty"`
}

func (p PartnerOrganisationAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PartnerOrganisationAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PartnerOrganisationAttributeSchemas) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PartnerOrganisationAttributeSchemas) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PartnerOrganisationAttributeSchemas) GetCompositeID() *string {
	if p == nil {
		return nil
	}
	return p.CompositeID
}

func (p *PartnerOrganisationAttributeSchemas) GetConstraints() *SchemasPartnerOrganisationAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PartnerOrganisationAttributeSchemas) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PartnerOrganisationAttributeSchemas) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PartnerOrganisationAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PartnerOrganisationAttributeSchemas) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PartnerOrganisationAttributeSchemas) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PartnerOrganisationAttributeSchemas) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PartnerOrganisationAttributeSchemas) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PartnerOrganisationAttributeSchemas) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PartnerOrganisationAttributeSchemas) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PartnerOrganisationAttributeSchemas) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PartnerOrganisationAttributeSchemas) GetInfoHelpers() *SchemasPartnerOrganisationAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PartnerOrganisationAttributeSchemas) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PartnerOrganisationAttributeSchemas) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PartnerOrganisationAttributeSchemas) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PartnerOrganisationAttributeSchemas) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PartnerOrganisationAttributeSchemas) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PartnerOrganisationAttributeSchemas) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PartnerOrganisationAttributeSchemas) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PartnerOrganisationAttributeSchemas) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PartnerOrganisationAttributeSchemas) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PartnerOrganisationAttributeSchemas) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PartnerOrganisationAttributeSchemas) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PartnerOrganisationAttributeSchemas) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PartnerOrganisationAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PartnerOrganisationAttributeSchemas) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PartnerOrganisationAttributeSchemas) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PartnerOrganisationAttributeSchemas) GetType() SchemasPartnerOrganisationAttributeType {
	if p == nil {
		return SchemasPartnerOrganisationAttributeType("")
	}
	return p.Type
}

func (p *PartnerOrganisationAttributeSchemas) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// SchemasPurposeAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasPurposeAttributeConstraints struct {
}

func (s SchemasPurposeAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPurposeAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasPurposeAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasPurposeAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasPurposeAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPurposeAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasPurposeAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasPurposeAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasPurposeAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasPurposeAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasPurposeAttributeType string

const (
	SchemasPurposeAttributeTypePurpose SchemasPurposeAttributeType = "purpose"
)

func (e SchemasPurposeAttributeType) ToPointer() *SchemasPurposeAttributeType {
	return &e
}
func (e *SchemasPurposeAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "purpose":
		*e = SchemasPurposeAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasPurposeAttributeType: %v", v)
	}
}

// PurposeAttributeSchemas - Entity Taxonomy
type PurposeAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPurposeAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                 `json:"default_value,omitempty"`
	Deprecated   *bool                               `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPurposeAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                              `json:"label"`
	Layout      *string                             `json:"layout,omitempty"`
	Name        string                              `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                       `default:"true" json:"sortable"`
	Type           SchemasPurposeAttributeType `json:"type"`
	ValueFormatter *string                     `json:"value_formatter,omitempty"`
}

func (p PurposeAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PurposeAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PurposeAttributeSchemas) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PurposeAttributeSchemas) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PurposeAttributeSchemas) GetCompositeID() *string {
	if p == nil {
		return nil
	}
	return p.CompositeID
}

func (p *PurposeAttributeSchemas) GetConstraints() *SchemasPurposeAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PurposeAttributeSchemas) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PurposeAttributeSchemas) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PurposeAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PurposeAttributeSchemas) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PurposeAttributeSchemas) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PurposeAttributeSchemas) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PurposeAttributeSchemas) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PurposeAttributeSchemas) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PurposeAttributeSchemas) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PurposeAttributeSchemas) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PurposeAttributeSchemas) GetInfoHelpers() *SchemasPurposeAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PurposeAttributeSchemas) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PurposeAttributeSchemas) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PurposeAttributeSchemas) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PurposeAttributeSchemas) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PurposeAttributeSchemas) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PurposeAttributeSchemas) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PurposeAttributeSchemas) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PurposeAttributeSchemas) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PurposeAttributeSchemas) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PurposeAttributeSchemas) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PurposeAttributeSchemas) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PurposeAttributeSchemas) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PurposeAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PurposeAttributeSchemas) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PurposeAttributeSchemas) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PurposeAttributeSchemas) GetType() SchemasPurposeAttributeType {
	if p == nil {
		return SchemasPurposeAttributeType("")
	}
	return p.Type
}

func (p *PurposeAttributeSchemas) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// SchemasInternalUserAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasInternalUserAttributeConstraints struct {
}

func (s SchemasInternalUserAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasInternalUserAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasInternalUserAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasInternalUserAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasInternalUserAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasInternalUserAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasInternalUserAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasInternalUserAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasInternalUserAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasInternalUserAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasInternalUserAttributeType string

const (
	SchemasInternalUserAttributeTypeInternalUser SchemasInternalUserAttributeType = "internal_user"
)

func (e SchemasInternalUserAttributeType) ToPointer() *SchemasInternalUserAttributeType {
	return &e
}
func (e *SchemasInternalUserAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_user":
		*e = SchemasInternalUserAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasInternalUserAttributeType: %v", v)
	}
}

// InternalUserAttributeSchemas - Epilot internal user info
type InternalUserAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasInternalUserAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                      `json:"default_value,omitempty"`
	Deprecated   *bool                                    `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasInternalUserAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                   `json:"label"`
	Layout      *string                                  `json:"layout,omitempty"`
	Name        string                                   `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                            `default:"true" json:"sortable"`
	Type           SchemasInternalUserAttributeType `json:"type"`
	ValueFormatter *string                          `json:"value_formatter,omitempty"`
}

func (i InternalUserAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InternalUserAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (i *InternalUserAttributeSchemas) GetManifest() []string {
	if i == nil {
		return nil
	}
	return i.Manifest
}

func (i *InternalUserAttributeSchemas) GetPurpose() []string {
	if i == nil {
		return nil
	}
	return i.Purpose
}

func (i *InternalUserAttributeSchemas) GetCompositeID() *string {
	if i == nil {
		return nil
	}
	return i.CompositeID
}

func (i *InternalUserAttributeSchemas) GetConstraints() *SchemasInternalUserAttributeConstraints {
	if i == nil {
		return nil
	}
	return i.Constraints
}

func (i *InternalUserAttributeSchemas) GetDefaultValue() any {
	if i == nil {
		return nil
	}
	return i.DefaultValue
}

func (i *InternalUserAttributeSchemas) GetDeprecated() *bool {
	if i == nil {
		return nil
	}
	return i.Deprecated
}

func (i *InternalUserAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if i == nil {
		return nil
	}
	return i.EntityBuilderDisableEdit
}

func (i *InternalUserAttributeSchemas) GetFeatureFlag() *string {
	if i == nil {
		return nil
	}
	return i.FeatureFlag
}

func (i *InternalUserAttributeSchemas) GetGroup() *string {
	if i == nil {
		return nil
	}
	return i.Group
}

func (i *InternalUserAttributeSchemas) GetHasPrimary() *bool {
	if i == nil {
		return nil
	}
	return i.HasPrimary
}

func (i *InternalUserAttributeSchemas) GetHidden() *bool {
	if i == nil {
		return nil
	}
	return i.Hidden
}

func (i *InternalUserAttributeSchemas) GetHideLabel() *bool {
	if i == nil {
		return nil
	}
	return i.HideLabel
}

func (i *InternalUserAttributeSchemas) GetIcon() *string {
	if i == nil {
		return nil
	}
	return i.Icon
}

func (i *InternalUserAttributeSchemas) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InternalUserAttributeSchemas) GetInfoHelpers() *SchemasInternalUserAttributeInfoHelpers {
	if i == nil {
		return nil
	}
	return i.InfoHelpers
}

func (i *InternalUserAttributeSchemas) GetLabel() string {
	if i == nil {
		return ""
	}
	return i.Label
}

func (i *InternalUserAttributeSchemas) GetLayout() *string {
	if i == nil {
		return nil
	}
	return i.Layout
}

func (i *InternalUserAttributeSchemas) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InternalUserAttributeSchemas) GetOrder() *int64 {
	if i == nil {
		return nil
	}
	return i.Order
}

func (i *InternalUserAttributeSchemas) GetPlaceholder() *string {
	if i == nil {
		return nil
	}
	return i.Placeholder
}

func (i *InternalUserAttributeSchemas) GetPreviewValueFormatter() *string {
	if i == nil {
		return nil
	}
	return i.PreviewValueFormatter
}

func (i *InternalUserAttributeSchemas) GetProtected() *bool {
	if i == nil {
		return nil
	}
	return i.Protected
}

func (i *InternalUserAttributeSchemas) GetReadonly() *bool {
	if i == nil {
		return nil
	}
	return i.Readonly
}

func (i *InternalUserAttributeSchemas) GetRenderCondition() *string {
	if i == nil {
		return nil
	}
	return i.RenderCondition
}

func (i *InternalUserAttributeSchemas) GetRepeatable() *bool {
	if i == nil {
		return nil
	}
	return i.Repeatable
}

func (i *InternalUserAttributeSchemas) GetRequired() *bool {
	if i == nil {
		return nil
	}
	return i.Required
}

func (i *InternalUserAttributeSchemas) GetSchema() *string {
	if i == nil {
		return nil
	}
	return i.Schema
}

func (i *InternalUserAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if i == nil {
		return nil
	}
	return i.SettingsFlag
}

func (i *InternalUserAttributeSchemas) GetShowInTable() *bool {
	if i == nil {
		return nil
	}
	return i.ShowInTable
}

func (i *InternalUserAttributeSchemas) GetSortable() *bool {
	if i == nil {
		return nil
	}
	return i.Sortable
}

func (i *InternalUserAttributeSchemas) GetType() SchemasInternalUserAttributeType {
	if i == nil {
		return SchemasInternalUserAttributeType("")
	}
	return i.Type
}

func (i *InternalUserAttributeSchemas) GetValueFormatter() *string {
	if i == nil {
		return nil
	}
	return i.ValueFormatter
}

// SchemasAutomationAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasAutomationAttributeConstraints struct {
}

func (s SchemasAutomationAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasAutomationAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasAutomationAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasAutomationAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasAutomationAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasAutomationAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasAutomationAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasAutomationAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasAutomationAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasAutomationAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasAutomationAttributeType string

const (
	SchemasAutomationAttributeTypeAutomation SchemasAutomationAttributeType = "automation"
)

func (e SchemasAutomationAttributeType) ToPointer() *SchemasAutomationAttributeType {
	return &e
}
func (e *SchemasAutomationAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation":
		*e = SchemasAutomationAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasAutomationAttributeType: %v", v)
	}
}

// AutomationAttributeSchemas - Automation entity
type AutomationAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasAutomationAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                    `json:"default_value,omitempty"`
	Deprecated   *bool                                  `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasAutomationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                 `json:"label"`
	Layout      *string                                `json:"layout,omitempty"`
	Name        string                                 `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                          `default:"true" json:"sortable"`
	Type           SchemasAutomationAttributeType `json:"type"`
	ValueFormatter *string                        `json:"value_formatter,omitempty"`
}

func (a AutomationAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AutomationAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (a *AutomationAttributeSchemas) GetManifest() []string {
	if a == nil {
		return nil
	}
	return a.Manifest
}

func (a *AutomationAttributeSchemas) GetPurpose() []string {
	if a == nil {
		return nil
	}
	return a.Purpose
}

func (a *AutomationAttributeSchemas) GetCompositeID() *string {
	if a == nil {
		return nil
	}
	return a.CompositeID
}

func (a *AutomationAttributeSchemas) GetConstraints() *SchemasAutomationAttributeConstraints {
	if a == nil {
		return nil
	}
	return a.Constraints
}

func (a *AutomationAttributeSchemas) GetDefaultValue() any {
	if a == nil {
		return nil
	}
	return a.DefaultValue
}

func (a *AutomationAttributeSchemas) GetDeprecated() *bool {
	if a == nil {
		return nil
	}
	return a.Deprecated
}

func (a *AutomationAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if a == nil {
		return nil
	}
	return a.EntityBuilderDisableEdit
}

func (a *AutomationAttributeSchemas) GetFeatureFlag() *string {
	if a == nil {
		return nil
	}
	return a.FeatureFlag
}

func (a *AutomationAttributeSchemas) GetGroup() *string {
	if a == nil {
		return nil
	}
	return a.Group
}

func (a *AutomationAttributeSchemas) GetHasPrimary() *bool {
	if a == nil {
		return nil
	}
	return a.HasPrimary
}

func (a *AutomationAttributeSchemas) GetHidden() *bool {
	if a == nil {
		return nil
	}
	return a.Hidden
}

func (a *AutomationAttributeSchemas) GetHideLabel() *bool {
	if a == nil {
		return nil
	}
	return a.HideLabel
}

func (a *AutomationAttributeSchemas) GetIcon() *string {
	if a == nil {
		return nil
	}
	return a.Icon
}

func (a *AutomationAttributeSchemas) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AutomationAttributeSchemas) GetInfoHelpers() *SchemasAutomationAttributeInfoHelpers {
	if a == nil {
		return nil
	}
	return a.InfoHelpers
}

func (a *AutomationAttributeSchemas) GetLabel() string {
	if a == nil {
		return ""
	}
	return a.Label
}

func (a *AutomationAttributeSchemas) GetLayout() *string {
	if a == nil {
		return nil
	}
	return a.Layout
}

func (a *AutomationAttributeSchemas) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AutomationAttributeSchemas) GetOrder() *int64 {
	if a == nil {
		return nil
	}
	return a.Order
}

func (a *AutomationAttributeSchemas) GetPlaceholder() *string {
	if a == nil {
		return nil
	}
	return a.Placeholder
}

func (a *AutomationAttributeSchemas) GetPreviewValueFormatter() *string {
	if a == nil {
		return nil
	}
	return a.PreviewValueFormatter
}

func (a *AutomationAttributeSchemas) GetProtected() *bool {
	if a == nil {
		return nil
	}
	return a.Protected
}

func (a *AutomationAttributeSchemas) GetReadonly() *bool {
	if a == nil {
		return nil
	}
	return a.Readonly
}

func (a *AutomationAttributeSchemas) GetRenderCondition() *string {
	if a == nil {
		return nil
	}
	return a.RenderCondition
}

func (a *AutomationAttributeSchemas) GetRepeatable() *bool {
	if a == nil {
		return nil
	}
	return a.Repeatable
}

func (a *AutomationAttributeSchemas) GetRequired() *bool {
	if a == nil {
		return nil
	}
	return a.Required
}

func (a *AutomationAttributeSchemas) GetSchema() *string {
	if a == nil {
		return nil
	}
	return a.Schema
}

func (a *AutomationAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if a == nil {
		return nil
	}
	return a.SettingsFlag
}

func (a *AutomationAttributeSchemas) GetShowInTable() *bool {
	if a == nil {
		return nil
	}
	return a.ShowInTable
}

func (a *AutomationAttributeSchemas) GetSortable() *bool {
	if a == nil {
		return nil
	}
	return a.Sortable
}

func (a *AutomationAttributeSchemas) GetType() SchemasAutomationAttributeType {
	if a == nil {
		return SchemasAutomationAttributeType("")
	}
	return a.Type
}

func (a *AutomationAttributeSchemas) GetValueFormatter() *string {
	if a == nil {
		return nil
	}
	return a.ValueFormatter
}

// SchemasInvitationEmailAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasInvitationEmailAttributeConstraints struct {
}

func (s SchemasInvitationEmailAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasInvitationEmailAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasInvitationEmailAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasInvitationEmailAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasInvitationEmailAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasInvitationEmailAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasInvitationEmailAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasInvitationEmailAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasInvitationEmailAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasInvitationEmailAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasInvitationEmailAttributeType string

const (
	SchemasInvitationEmailAttributeTypeInvitationEmail SchemasInvitationEmailAttributeType = "invitation_email"
)

func (e SchemasInvitationEmailAttributeType) ToPointer() *SchemasInvitationEmailAttributeType {
	return &e
}
func (e *SchemasInvitationEmailAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invitation_email":
		*e = SchemasInvitationEmailAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasInvitationEmailAttributeType: %v", v)
	}
}

// InvitationEmailAttributeSchemas - Email address for send invitation
type InvitationEmailAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasInvitationEmailAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                         `json:"default_value,omitempty"`
	Deprecated   *bool                                       `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasInvitationEmailAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                      `json:"label"`
	Layout      *string                                     `json:"layout,omitempty"`
	Name        string                                      `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                               `default:"true" json:"sortable"`
	Type           SchemasInvitationEmailAttributeType `json:"type"`
	ValueFormatter *string                             `json:"value_formatter,omitempty"`
}

func (i InvitationEmailAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvitationEmailAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (i *InvitationEmailAttributeSchemas) GetManifest() []string {
	if i == nil {
		return nil
	}
	return i.Manifest
}

func (i *InvitationEmailAttributeSchemas) GetPurpose() []string {
	if i == nil {
		return nil
	}
	return i.Purpose
}

func (i *InvitationEmailAttributeSchemas) GetCompositeID() *string {
	if i == nil {
		return nil
	}
	return i.CompositeID
}

func (i *InvitationEmailAttributeSchemas) GetConstraints() *SchemasInvitationEmailAttributeConstraints {
	if i == nil {
		return nil
	}
	return i.Constraints
}

func (i *InvitationEmailAttributeSchemas) GetDefaultValue() any {
	if i == nil {
		return nil
	}
	return i.DefaultValue
}

func (i *InvitationEmailAttributeSchemas) GetDeprecated() *bool {
	if i == nil {
		return nil
	}
	return i.Deprecated
}

func (i *InvitationEmailAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if i == nil {
		return nil
	}
	return i.EntityBuilderDisableEdit
}

func (i *InvitationEmailAttributeSchemas) GetFeatureFlag() *string {
	if i == nil {
		return nil
	}
	return i.FeatureFlag
}

func (i *InvitationEmailAttributeSchemas) GetGroup() *string {
	if i == nil {
		return nil
	}
	return i.Group
}

func (i *InvitationEmailAttributeSchemas) GetHasPrimary() *bool {
	if i == nil {
		return nil
	}
	return i.HasPrimary
}

func (i *InvitationEmailAttributeSchemas) GetHidden() *bool {
	if i == nil {
		return nil
	}
	return i.Hidden
}

func (i *InvitationEmailAttributeSchemas) GetHideLabel() *bool {
	if i == nil {
		return nil
	}
	return i.HideLabel
}

func (i *InvitationEmailAttributeSchemas) GetIcon() *string {
	if i == nil {
		return nil
	}
	return i.Icon
}

func (i *InvitationEmailAttributeSchemas) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InvitationEmailAttributeSchemas) GetInfoHelpers() *SchemasInvitationEmailAttributeInfoHelpers {
	if i == nil {
		return nil
	}
	return i.InfoHelpers
}

func (i *InvitationEmailAttributeSchemas) GetLabel() string {
	if i == nil {
		return ""
	}
	return i.Label
}

func (i *InvitationEmailAttributeSchemas) GetLayout() *string {
	if i == nil {
		return nil
	}
	return i.Layout
}

func (i *InvitationEmailAttributeSchemas) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InvitationEmailAttributeSchemas) GetOrder() *int64 {
	if i == nil {
		return nil
	}
	return i.Order
}

func (i *InvitationEmailAttributeSchemas) GetPlaceholder() *string {
	if i == nil {
		return nil
	}
	return i.Placeholder
}

func (i *InvitationEmailAttributeSchemas) GetPreviewValueFormatter() *string {
	if i == nil {
		return nil
	}
	return i.PreviewValueFormatter
}

func (i *InvitationEmailAttributeSchemas) GetProtected() *bool {
	if i == nil {
		return nil
	}
	return i.Protected
}

func (i *InvitationEmailAttributeSchemas) GetReadonly() *bool {
	if i == nil {
		return nil
	}
	return i.Readonly
}

func (i *InvitationEmailAttributeSchemas) GetRenderCondition() *string {
	if i == nil {
		return nil
	}
	return i.RenderCondition
}

func (i *InvitationEmailAttributeSchemas) GetRepeatable() *bool {
	if i == nil {
		return nil
	}
	return i.Repeatable
}

func (i *InvitationEmailAttributeSchemas) GetRequired() *bool {
	if i == nil {
		return nil
	}
	return i.Required
}

func (i *InvitationEmailAttributeSchemas) GetSchema() *string {
	if i == nil {
		return nil
	}
	return i.Schema
}

func (i *InvitationEmailAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if i == nil {
		return nil
	}
	return i.SettingsFlag
}

func (i *InvitationEmailAttributeSchemas) GetShowInTable() *bool {
	if i == nil {
		return nil
	}
	return i.ShowInTable
}

func (i *InvitationEmailAttributeSchemas) GetSortable() *bool {
	if i == nil {
		return nil
	}
	return i.Sortable
}

func (i *InvitationEmailAttributeSchemas) GetType() SchemasInvitationEmailAttributeType {
	if i == nil {
		return SchemasInvitationEmailAttributeType("")
	}
	return i.Type
}

func (i *InvitationEmailAttributeSchemas) GetValueFormatter() *string {
	if i == nil {
		return nil
	}
	return i.ValueFormatter
}

// SchemasPartnerStatusAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasPartnerStatusAttributeConstraints struct {
}

func (s SchemasPartnerStatusAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPartnerStatusAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasPartnerStatusAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasPartnerStatusAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasPartnerStatusAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPartnerStatusAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasPartnerStatusAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasPartnerStatusAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasPartnerStatusAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasPartnerStatusAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasPartnerStatusAttributeType string

const (
	SchemasPartnerStatusAttributeTypePartnerStatus SchemasPartnerStatusAttributeType = "partner_status"
)

func (e SchemasPartnerStatusAttributeType) ToPointer() *SchemasPartnerStatusAttributeType {
	return &e
}
func (e *SchemasPartnerStatusAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "partner_status":
		*e = SchemasPartnerStatusAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasPartnerStatusAttributeType: %v", v)
	}
}

// PartnerStatusAttributeSchemas - Partner Status
type PartnerStatusAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPartnerStatusAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                       `json:"default_value,omitempty"`
	Deprecated   *bool                                     `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPartnerStatusAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                    `json:"label"`
	Layout      *string                                   `json:"layout,omitempty"`
	Name        string                                    `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                             `default:"true" json:"sortable"`
	Type           SchemasPartnerStatusAttributeType `json:"type"`
	ValueFormatter *string                           `json:"value_formatter,omitempty"`
}

func (p PartnerStatusAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PartnerStatusAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PartnerStatusAttributeSchemas) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PartnerStatusAttributeSchemas) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PartnerStatusAttributeSchemas) GetCompositeID() *string {
	if p == nil {
		return nil
	}
	return p.CompositeID
}

func (p *PartnerStatusAttributeSchemas) GetConstraints() *SchemasPartnerStatusAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PartnerStatusAttributeSchemas) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PartnerStatusAttributeSchemas) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PartnerStatusAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PartnerStatusAttributeSchemas) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PartnerStatusAttributeSchemas) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PartnerStatusAttributeSchemas) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PartnerStatusAttributeSchemas) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PartnerStatusAttributeSchemas) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PartnerStatusAttributeSchemas) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PartnerStatusAttributeSchemas) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PartnerStatusAttributeSchemas) GetInfoHelpers() *SchemasPartnerStatusAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PartnerStatusAttributeSchemas) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PartnerStatusAttributeSchemas) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PartnerStatusAttributeSchemas) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PartnerStatusAttributeSchemas) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PartnerStatusAttributeSchemas) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PartnerStatusAttributeSchemas) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PartnerStatusAttributeSchemas) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PartnerStatusAttributeSchemas) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PartnerStatusAttributeSchemas) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PartnerStatusAttributeSchemas) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PartnerStatusAttributeSchemas) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PartnerStatusAttributeSchemas) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PartnerStatusAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PartnerStatusAttributeSchemas) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PartnerStatusAttributeSchemas) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PartnerStatusAttributeSchemas) GetType() SchemasPartnerStatusAttributeType {
	if p == nil {
		return SchemasPartnerStatusAttributeType("")
	}
	return p.Type
}

func (p *PartnerStatusAttributeSchemas) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// SchemasComputedAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasComputedAttributeConstraints struct {
}

func (s SchemasComputedAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasComputedAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasComputedAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasComputedAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasComputedAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasComputedAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasComputedAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasComputedAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasComputedAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasComputedAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasComputedAttributeType string

const (
	SchemasComputedAttributeTypeComputed SchemasComputedAttributeType = "computed"
)

func (e SchemasComputedAttributeType) ToPointer() *SchemasComputedAttributeType {
	return &e
}
func (e *SchemasComputedAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "computed":
		*e = SchemasComputedAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasComputedAttributeType: %v", v)
	}
}

// ComputedAttributeSchemas - An attribute that is computed from the entity data. For more details on how to use them, check the docs [here](https://e-pilot.atlassian.net/wiki/spaces/EO/pages/5642977476/How+To+Computed+Schema+Attributes)
type ComputedAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A source amount field that is used to compute the value of the attribute
	AmountField *string `json:"amount_field,omitempty"`
	CompositeID *string `json:"composite_id,omitempty"`
	Computed    *bool   `default:"true" json:"computed"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *SchemasComputedAttributeConstraints `json:"constraints,omitempty"`
	// A currency field used to format a computed currency value
	CurrencyField *string `json:"currency_field,omitempty"`
	DefaultValue  any     `json:"default_value,omitempty"`
	Deprecated    *bool   `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasComputedAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                               `json:"label"`
	Layout      *string                              `json:"layout,omitempty"`
	Name        string                               `json:"name"`
	// Attribute sort order (ascending) in group
	Order       *int64  `json:"order,omitempty"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Variable template used to format a preview for the computed value
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable *bool                        `default:"true" json:"sortable"`
	Type     SchemasComputedAttributeType `json:"type"`
	// Variable template used to format the computed value
	ValueFormatter string `json:"value_formatter"`
}

func (c ComputedAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputedAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"label", "name", "type", "value_formatter"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputedAttributeSchemas) GetManifest() []string {
	if c == nil {
		return nil
	}
	return c.Manifest
}

func (c *ComputedAttributeSchemas) GetPurpose() []string {
	if c == nil {
		return nil
	}
	return c.Purpose
}

func (c *ComputedAttributeSchemas) GetAmountField() *string {
	if c == nil {
		return nil
	}
	return c.AmountField
}

func (c *ComputedAttributeSchemas) GetCompositeID() *string {
	if c == nil {
		return nil
	}
	return c.CompositeID
}

func (c *ComputedAttributeSchemas) GetComputed() *bool {
	if c == nil {
		return nil
	}
	return c.Computed
}

func (c *ComputedAttributeSchemas) GetConstraints() *SchemasComputedAttributeConstraints {
	if c == nil {
		return nil
	}
	return c.Constraints
}

func (c *ComputedAttributeSchemas) GetCurrencyField() *string {
	if c == nil {
		return nil
	}
	return c.CurrencyField
}

func (c *ComputedAttributeSchemas) GetDefaultValue() any {
	if c == nil {
		return nil
	}
	return c.DefaultValue
}

func (c *ComputedAttributeSchemas) GetDeprecated() *bool {
	if c == nil {
		return nil
	}
	return c.Deprecated
}

func (c *ComputedAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if c == nil {
		return nil
	}
	return c.EntityBuilderDisableEdit
}

func (c *ComputedAttributeSchemas) GetFeatureFlag() *string {
	if c == nil {
		return nil
	}
	return c.FeatureFlag
}

func (c *ComputedAttributeSchemas) GetGroup() *string {
	if c == nil {
		return nil
	}
	return c.Group
}

func (c *ComputedAttributeSchemas) GetHasPrimary() *bool {
	if c == nil {
		return nil
	}
	return c.HasPrimary
}

func (c *ComputedAttributeSchemas) GetHidden() *bool {
	if c == nil {
		return nil
	}
	return c.Hidden
}

func (c *ComputedAttributeSchemas) GetHideLabel() *bool {
	if c == nil {
		return nil
	}
	return c.HideLabel
}

func (c *ComputedAttributeSchemas) GetIcon() *string {
	if c == nil {
		return nil
	}
	return c.Icon
}

func (c *ComputedAttributeSchemas) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ComputedAttributeSchemas) GetInfoHelpers() *SchemasComputedAttributeInfoHelpers {
	if c == nil {
		return nil
	}
	return c.InfoHelpers
}

func (c *ComputedAttributeSchemas) GetLabel() string {
	if c == nil {
		return ""
	}
	return c.Label
}

func (c *ComputedAttributeSchemas) GetLayout() *string {
	if c == nil {
		return nil
	}
	return c.Layout
}

func (c *ComputedAttributeSchemas) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ComputedAttributeSchemas) GetOrder() *int64 {
	if c == nil {
		return nil
	}
	return c.Order
}

func (c *ComputedAttributeSchemas) GetPlaceholder() *string {
	if c == nil {
		return nil
	}
	return c.Placeholder
}

func (c *ComputedAttributeSchemas) GetPreviewValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.PreviewValueFormatter
}

func (c *ComputedAttributeSchemas) GetProtected() *bool {
	if c == nil {
		return nil
	}
	return c.Protected
}

func (c *ComputedAttributeSchemas) GetReadonly() *bool {
	if c == nil {
		return nil
	}
	return c.Readonly
}

func (c *ComputedAttributeSchemas) GetRenderCondition() *string {
	if c == nil {
		return nil
	}
	return c.RenderCondition
}

func (c *ComputedAttributeSchemas) GetRepeatable() *bool {
	if c == nil {
		return nil
	}
	return c.Repeatable
}

func (c *ComputedAttributeSchemas) GetRequired() *bool {
	if c == nil {
		return nil
	}
	return c.Required
}

func (c *ComputedAttributeSchemas) GetSchema() *string {
	if c == nil {
		return nil
	}
	return c.Schema
}

func (c *ComputedAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if c == nil {
		return nil
	}
	return c.SettingsFlag
}

func (c *ComputedAttributeSchemas) GetShowInTable() *bool {
	if c == nil {
		return nil
	}
	return c.ShowInTable
}

func (c *ComputedAttributeSchemas) GetSortable() *bool {
	if c == nil {
		return nil
	}
	return c.Sortable
}

func (c *ComputedAttributeSchemas) GetType() SchemasComputedAttributeType {
	if c == nil {
		return SchemasComputedAttributeType("")
	}
	return c.Type
}

func (c *ComputedAttributeSchemas) GetValueFormatter() string {
	if c == nil {
		return ""
	}
	return c.ValueFormatter
}

// SchemasFileAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasFileAttributeConstraints struct {
}

func (s SchemasFileAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasFileAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

type DefaultAccessControl string

const (
	DefaultAccessControlPublicRead DefaultAccessControl = "public-read"
	DefaultAccessControlPrivate    DefaultAccessControl = "private"
)

func (e DefaultAccessControl) ToPointer() *DefaultAccessControl {
	return &e
}
func (e *DefaultAccessControl) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "public-read":
		fallthrough
	case "private":
		*e = DefaultAccessControl(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultAccessControl: %v", v)
	}
}

// SchemasFileAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasFileAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasFileAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasFileAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasFileAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasFileAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasFileAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasFileAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasFileAttributeType string

const (
	SchemasFileAttributeTypeImage SchemasFileAttributeType = "image"
	SchemasFileAttributeTypeFile  SchemasFileAttributeType = "file"
)

func (e SchemasFileAttributeType) ToPointer() *SchemasFileAttributeType {
	return &e
}
func (e *SchemasFileAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "image":
		fallthrough
	case "file":
		*e = SchemasFileAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasFileAttributeType: %v", v)
	}
}

// FileAttributeSchemas - File or Image Attachment
type FileAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// List of file extensions (without the dot suffix)
	AllowedExtensions []string `json:"allowed_extensions,omitempty"`
	CompositeID       *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints          *SchemasFileAttributeConstraints `json:"constraints,omitempty"`
	DefaultAccessControl *DefaultAccessControl            `json:"default_access_control,omitempty"`
	DefaultValue         any                              `json:"default_value,omitempty"`
	Deprecated           *bool                            `default:"false" json:"deprecated"`
	// Controls how the images are presented to the user during upload on the Entity Details view.
	DisplayImagesLandscaped *bool `json:"display_images_landscaped,omitempty"`
	// When set to true, an i18n description will be used alongside the attribute label.
	// This description should be set through the platform locales in the form: `file.{attribute_name}.description_text`.
	//
	EnableDescription *bool `json:"enable_description,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasFileAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                           `json:"label"`
	Layout      *string                          `json:"layout,omitempty"`
	Multiple    *bool                            `json:"multiple,omitempty"`
	Name        string                           `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                    `default:"true" json:"sortable"`
	Type           SchemasFileAttributeType `json:"type"`
	ValueFormatter *string                  `json:"value_formatter,omitempty"`
}

func (f FileAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FileAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (f *FileAttributeSchemas) GetManifest() []string {
	if f == nil {
		return nil
	}
	return f.Manifest
}

func (f *FileAttributeSchemas) GetPurpose() []string {
	if f == nil {
		return nil
	}
	return f.Purpose
}

func (f *FileAttributeSchemas) GetAllowedExtensions() []string {
	if f == nil {
		return nil
	}
	return f.AllowedExtensions
}

func (f *FileAttributeSchemas) GetCompositeID() *string {
	if f == nil {
		return nil
	}
	return f.CompositeID
}

func (f *FileAttributeSchemas) GetConstraints() *SchemasFileAttributeConstraints {
	if f == nil {
		return nil
	}
	return f.Constraints
}

func (f *FileAttributeSchemas) GetDefaultAccessControl() *DefaultAccessControl {
	if f == nil {
		return nil
	}
	return f.DefaultAccessControl
}

func (f *FileAttributeSchemas) GetDefaultValue() any {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

func (f *FileAttributeSchemas) GetDeprecated() *bool {
	if f == nil {
		return nil
	}
	return f.Deprecated
}

func (f *FileAttributeSchemas) GetDisplayImagesLandscaped() *bool {
	if f == nil {
		return nil
	}
	return f.DisplayImagesLandscaped
}

func (f *FileAttributeSchemas) GetEnableDescription() *bool {
	if f == nil {
		return nil
	}
	return f.EnableDescription
}

func (f *FileAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if f == nil {
		return nil
	}
	return f.EntityBuilderDisableEdit
}

func (f *FileAttributeSchemas) GetFeatureFlag() *string {
	if f == nil {
		return nil
	}
	return f.FeatureFlag
}

func (f *FileAttributeSchemas) GetGroup() *string {
	if f == nil {
		return nil
	}
	return f.Group
}

func (f *FileAttributeSchemas) GetHasPrimary() *bool {
	if f == nil {
		return nil
	}
	return f.HasPrimary
}

func (f *FileAttributeSchemas) GetHidden() *bool {
	if f == nil {
		return nil
	}
	return f.Hidden
}

func (f *FileAttributeSchemas) GetHideLabel() *bool {
	if f == nil {
		return nil
	}
	return f.HideLabel
}

func (f *FileAttributeSchemas) GetIcon() *string {
	if f == nil {
		return nil
	}
	return f.Icon
}

func (f *FileAttributeSchemas) GetID() *string {
	if f == nil {
		return nil
	}
	return f.ID
}

func (f *FileAttributeSchemas) GetInfoHelpers() *SchemasFileAttributeInfoHelpers {
	if f == nil {
		return nil
	}
	return f.InfoHelpers
}

func (f *FileAttributeSchemas) GetLabel() string {
	if f == nil {
		return ""
	}
	return f.Label
}

func (f *FileAttributeSchemas) GetLayout() *string {
	if f == nil {
		return nil
	}
	return f.Layout
}

func (f *FileAttributeSchemas) GetMultiple() *bool {
	if f == nil {
		return nil
	}
	return f.Multiple
}

func (f *FileAttributeSchemas) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *FileAttributeSchemas) GetOrder() *int64 {
	if f == nil {
		return nil
	}
	return f.Order
}

func (f *FileAttributeSchemas) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FileAttributeSchemas) GetPreviewValueFormatter() *string {
	if f == nil {
		return nil
	}
	return f.PreviewValueFormatter
}

func (f *FileAttributeSchemas) GetProtected() *bool {
	if f == nil {
		return nil
	}
	return f.Protected
}

func (f *FileAttributeSchemas) GetReadonly() *bool {
	if f == nil {
		return nil
	}
	return f.Readonly
}

func (f *FileAttributeSchemas) GetRenderCondition() *string {
	if f == nil {
		return nil
	}
	return f.RenderCondition
}

func (f *FileAttributeSchemas) GetRepeatable() *bool {
	if f == nil {
		return nil
	}
	return f.Repeatable
}

func (f *FileAttributeSchemas) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FileAttributeSchemas) GetSchema() *string {
	if f == nil {
		return nil
	}
	return f.Schema
}

func (f *FileAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if f == nil {
		return nil
	}
	return f.SettingsFlag
}

func (f *FileAttributeSchemas) GetShowInTable() *bool {
	if f == nil {
		return nil
	}
	return f.ShowInTable
}

func (f *FileAttributeSchemas) GetSortable() *bool {
	if f == nil {
		return nil
	}
	return f.Sortable
}

func (f *FileAttributeSchemas) GetType() SchemasFileAttributeType {
	if f == nil {
		return SchemasFileAttributeType("")
	}
	return f.Type
}

func (f *FileAttributeSchemas) GetValueFormatter() *string {
	if f == nil {
		return nil
	}
	return f.ValueFormatter
}

// SchemasOrderedListAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasOrderedListAttributeConstraints struct {
}

func (s SchemasOrderedListAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasOrderedListAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasOrderedListAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasOrderedListAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasOrderedListAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasOrderedListAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasOrderedListAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasOrderedListAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasOrderedListAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasOrderedListAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasOrderedListAttributeType string

const (
	SchemasOrderedListAttributeTypeOrderedList SchemasOrderedListAttributeType = "ordered_list"
)

func (e SchemasOrderedListAttributeType) ToPointer() *SchemasOrderedListAttributeType {
	return &e
}
func (e *SchemasOrderedListAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ordered_list":
		*e = SchemasOrderedListAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasOrderedListAttributeType: %v", v)
	}
}

// OrderedListAttributeSchemas - Type of attribute to render N number of ordered fields
type OrderedListAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasOrderedListAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                     `json:"default_value,omitempty"`
	Deprecated   *bool                                   `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasOrderedListAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                  `json:"label"`
	Layout      *string                                 `json:"layout,omitempty"`
	Name        string                                  `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                           `default:"true" json:"sortable"`
	Type           SchemasOrderedListAttributeType `json:"type"`
	ValueFormatter *string                         `json:"value_formatter,omitempty"`
}

func (o OrderedListAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrderedListAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *OrderedListAttributeSchemas) GetManifest() []string {
	if o == nil {
		return nil
	}
	return o.Manifest
}

func (o *OrderedListAttributeSchemas) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *OrderedListAttributeSchemas) GetCompositeID() *string {
	if o == nil {
		return nil
	}
	return o.CompositeID
}

func (o *OrderedListAttributeSchemas) GetConstraints() *SchemasOrderedListAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *OrderedListAttributeSchemas) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *OrderedListAttributeSchemas) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *OrderedListAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *OrderedListAttributeSchemas) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *OrderedListAttributeSchemas) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *OrderedListAttributeSchemas) GetHasPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.HasPrimary
}

func (o *OrderedListAttributeSchemas) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *OrderedListAttributeSchemas) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *OrderedListAttributeSchemas) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *OrderedListAttributeSchemas) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OrderedListAttributeSchemas) GetInfoHelpers() *SchemasOrderedListAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *OrderedListAttributeSchemas) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OrderedListAttributeSchemas) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *OrderedListAttributeSchemas) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *OrderedListAttributeSchemas) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *OrderedListAttributeSchemas) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *OrderedListAttributeSchemas) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *OrderedListAttributeSchemas) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *OrderedListAttributeSchemas) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *OrderedListAttributeSchemas) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *OrderedListAttributeSchemas) GetRepeatable() *bool {
	if o == nil {
		return nil
	}
	return o.Repeatable
}

func (o *OrderedListAttributeSchemas) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *OrderedListAttributeSchemas) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *OrderedListAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *OrderedListAttributeSchemas) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *OrderedListAttributeSchemas) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *OrderedListAttributeSchemas) GetType() SchemasOrderedListAttributeType {
	if o == nil {
		return SchemasOrderedListAttributeType("")
	}
	return o.Type
}

func (o *OrderedListAttributeSchemas) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

// SchemasInternalAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasInternalAttributeConstraints struct {
}

func (s SchemasInternalAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasInternalAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasInternalAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasInternalAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasInternalAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasInternalAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasInternalAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasInternalAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasInternalAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasInternalAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasInternalAttributeType string

const (
	SchemasInternalAttributeTypeInternal SchemasInternalAttributeType = "internal"
)

func (e SchemasInternalAttributeType) ToPointer() *SchemasInternalAttributeType {
	return &e
}
func (e *SchemasInternalAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal":
		*e = SchemasInternalAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasInternalAttributeType: %v", v)
	}
}

// InternalAttributeSchemas - No UI representation
type InternalAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasInternalAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                  `json:"default_value,omitempty"`
	Deprecated   *bool                                `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasInternalAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                               `json:"label"`
	Layout      *string                              `json:"layout,omitempty"`
	Name        string                               `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                        `default:"true" json:"sortable"`
	Type           SchemasInternalAttributeType `json:"type"`
	ValueFormatter *string                      `json:"value_formatter,omitempty"`
}

func (i InternalAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InternalAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (i *InternalAttributeSchemas) GetManifest() []string {
	if i == nil {
		return nil
	}
	return i.Manifest
}

func (i *InternalAttributeSchemas) GetPurpose() []string {
	if i == nil {
		return nil
	}
	return i.Purpose
}

func (i *InternalAttributeSchemas) GetCompositeID() *string {
	if i == nil {
		return nil
	}
	return i.CompositeID
}

func (i *InternalAttributeSchemas) GetConstraints() *SchemasInternalAttributeConstraints {
	if i == nil {
		return nil
	}
	return i.Constraints
}

func (i *InternalAttributeSchemas) GetDefaultValue() any {
	if i == nil {
		return nil
	}
	return i.DefaultValue
}

func (i *InternalAttributeSchemas) GetDeprecated() *bool {
	if i == nil {
		return nil
	}
	return i.Deprecated
}

func (i *InternalAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if i == nil {
		return nil
	}
	return i.EntityBuilderDisableEdit
}

func (i *InternalAttributeSchemas) GetFeatureFlag() *string {
	if i == nil {
		return nil
	}
	return i.FeatureFlag
}

func (i *InternalAttributeSchemas) GetGroup() *string {
	if i == nil {
		return nil
	}
	return i.Group
}

func (i *InternalAttributeSchemas) GetHasPrimary() *bool {
	if i == nil {
		return nil
	}
	return i.HasPrimary
}

func (i *InternalAttributeSchemas) GetHidden() *bool {
	if i == nil {
		return nil
	}
	return i.Hidden
}

func (i *InternalAttributeSchemas) GetHideLabel() *bool {
	if i == nil {
		return nil
	}
	return i.HideLabel
}

func (i *InternalAttributeSchemas) GetIcon() *string {
	if i == nil {
		return nil
	}
	return i.Icon
}

func (i *InternalAttributeSchemas) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InternalAttributeSchemas) GetInfoHelpers() *SchemasInternalAttributeInfoHelpers {
	if i == nil {
		return nil
	}
	return i.InfoHelpers
}

func (i *InternalAttributeSchemas) GetLabel() string {
	if i == nil {
		return ""
	}
	return i.Label
}

func (i *InternalAttributeSchemas) GetLayout() *string {
	if i == nil {
		return nil
	}
	return i.Layout
}

func (i *InternalAttributeSchemas) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InternalAttributeSchemas) GetOrder() *int64 {
	if i == nil {
		return nil
	}
	return i.Order
}

func (i *InternalAttributeSchemas) GetPlaceholder() *string {
	if i == nil {
		return nil
	}
	return i.Placeholder
}

func (i *InternalAttributeSchemas) GetPreviewValueFormatter() *string {
	if i == nil {
		return nil
	}
	return i.PreviewValueFormatter
}

func (i *InternalAttributeSchemas) GetProtected() *bool {
	if i == nil {
		return nil
	}
	return i.Protected
}

func (i *InternalAttributeSchemas) GetReadonly() *bool {
	if i == nil {
		return nil
	}
	return i.Readonly
}

func (i *InternalAttributeSchemas) GetRenderCondition() *string {
	if i == nil {
		return nil
	}
	return i.RenderCondition
}

func (i *InternalAttributeSchemas) GetRepeatable() *bool {
	if i == nil {
		return nil
	}
	return i.Repeatable
}

func (i *InternalAttributeSchemas) GetRequired() *bool {
	if i == nil {
		return nil
	}
	return i.Required
}

func (i *InternalAttributeSchemas) GetSchema() *string {
	if i == nil {
		return nil
	}
	return i.Schema
}

func (i *InternalAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if i == nil {
		return nil
	}
	return i.SettingsFlag
}

func (i *InternalAttributeSchemas) GetShowInTable() *bool {
	if i == nil {
		return nil
	}
	return i.ShowInTable
}

func (i *InternalAttributeSchemas) GetSortable() *bool {
	if i == nil {
		return nil
	}
	return i.Sortable
}

func (i *InternalAttributeSchemas) GetType() SchemasInternalAttributeType {
	if i == nil {
		return SchemasInternalAttributeType("")
	}
	return i.Type
}

func (i *InternalAttributeSchemas) GetValueFormatter() *string {
	if i == nil {
		return nil
	}
	return i.ValueFormatter
}

// SchemasConsentAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasConsentAttributeConstraints struct {
}

func (s SchemasConsentAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasConsentAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasConsentAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasConsentAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasConsentAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasConsentAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasConsentAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasConsentAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasConsentAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasConsentAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasConsentAttributeType string

const (
	SchemasConsentAttributeTypeConsent SchemasConsentAttributeType = "consent"
)

func (e SchemasConsentAttributeType) ToPointer() *SchemasConsentAttributeType {
	return &e
}
func (e *SchemasConsentAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consent":
		*e = SchemasConsentAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasConsentAttributeType: %v", v)
	}
}

// ConsentAttributeSchemas - Consent Management
type ConsentAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasConsentAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                 `json:"default_value,omitempty"`
	Deprecated   *bool                               `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID          *string  `json:"id,omitempty"`
	Identifiers []string `json:"identifiers,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasConsentAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                              `json:"label"`
	Layout      *string                             `json:"layout,omitempty"`
	Name        string                              `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                       `default:"true" json:"sortable"`
	Topic          string                      `json:"topic"`
	Type           SchemasConsentAttributeType `json:"type"`
	ValueFormatter *string                     `json:"value_formatter,omitempty"`
}

func (c ConsentAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConsentAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"label", "name", "topic", "type"}); err != nil {
		return err
	}
	return nil
}

func (c *ConsentAttributeSchemas) GetManifest() []string {
	if c == nil {
		return nil
	}
	return c.Manifest
}

func (c *ConsentAttributeSchemas) GetPurpose() []string {
	if c == nil {
		return nil
	}
	return c.Purpose
}

func (c *ConsentAttributeSchemas) GetCompositeID() *string {
	if c == nil {
		return nil
	}
	return c.CompositeID
}

func (c *ConsentAttributeSchemas) GetConstraints() *SchemasConsentAttributeConstraints {
	if c == nil {
		return nil
	}
	return c.Constraints
}

func (c *ConsentAttributeSchemas) GetDefaultValue() any {
	if c == nil {
		return nil
	}
	return c.DefaultValue
}

func (c *ConsentAttributeSchemas) GetDeprecated() *bool {
	if c == nil {
		return nil
	}
	return c.Deprecated
}

func (c *ConsentAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if c == nil {
		return nil
	}
	return c.EntityBuilderDisableEdit
}

func (c *ConsentAttributeSchemas) GetFeatureFlag() *string {
	if c == nil {
		return nil
	}
	return c.FeatureFlag
}

func (c *ConsentAttributeSchemas) GetGroup() *string {
	if c == nil {
		return nil
	}
	return c.Group
}

func (c *ConsentAttributeSchemas) GetHasPrimary() *bool {
	if c == nil {
		return nil
	}
	return c.HasPrimary
}

func (c *ConsentAttributeSchemas) GetHidden() *bool {
	if c == nil {
		return nil
	}
	return c.Hidden
}

func (c *ConsentAttributeSchemas) GetHideLabel() *bool {
	if c == nil {
		return nil
	}
	return c.HideLabel
}

func (c *ConsentAttributeSchemas) GetIcon() *string {
	if c == nil {
		return nil
	}
	return c.Icon
}

func (c *ConsentAttributeSchemas) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ConsentAttributeSchemas) GetIdentifiers() []string {
	if c == nil {
		return nil
	}
	return c.Identifiers
}

func (c *ConsentAttributeSchemas) GetInfoHelpers() *SchemasConsentAttributeInfoHelpers {
	if c == nil {
		return nil
	}
	return c.InfoHelpers
}

func (c *ConsentAttributeSchemas) GetLabel() string {
	if c == nil {
		return ""
	}
	return c.Label
}

func (c *ConsentAttributeSchemas) GetLayout() *string {
	if c == nil {
		return nil
	}
	return c.Layout
}

func (c *ConsentAttributeSchemas) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ConsentAttributeSchemas) GetOrder() *int64 {
	if c == nil {
		return nil
	}
	return c.Order
}

func (c *ConsentAttributeSchemas) GetPlaceholder() *string {
	if c == nil {
		return nil
	}
	return c.Placeholder
}

func (c *ConsentAttributeSchemas) GetPreviewValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.PreviewValueFormatter
}

func (c *ConsentAttributeSchemas) GetProtected() *bool {
	if c == nil {
		return nil
	}
	return c.Protected
}

func (c *ConsentAttributeSchemas) GetReadonly() *bool {
	if c == nil {
		return nil
	}
	return c.Readonly
}

func (c *ConsentAttributeSchemas) GetRenderCondition() *string {
	if c == nil {
		return nil
	}
	return c.RenderCondition
}

func (c *ConsentAttributeSchemas) GetRepeatable() *bool {
	if c == nil {
		return nil
	}
	return c.Repeatable
}

func (c *ConsentAttributeSchemas) GetRequired() *bool {
	if c == nil {
		return nil
	}
	return c.Required
}

func (c *ConsentAttributeSchemas) GetSchema() *string {
	if c == nil {
		return nil
	}
	return c.Schema
}

func (c *ConsentAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if c == nil {
		return nil
	}
	return c.SettingsFlag
}

func (c *ConsentAttributeSchemas) GetShowInTable() *bool {
	if c == nil {
		return nil
	}
	return c.ShowInTable
}

func (c *ConsentAttributeSchemas) GetSortable() *bool {
	if c == nil {
		return nil
	}
	return c.Sortable
}

func (c *ConsentAttributeSchemas) GetTopic() string {
	if c == nil {
		return ""
	}
	return c.Topic
}

func (c *ConsentAttributeSchemas) GetType() SchemasConsentAttributeType {
	if c == nil {
		return SchemasConsentAttributeType("")
	}
	return c.Type
}

func (c *ConsentAttributeSchemas) GetValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.ValueFormatter
}

// SchemasNumberAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasNumberAttributeConstraints struct {
}

func (s SchemasNumberAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasNumberAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasNumberAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasNumberAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasNumberAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasNumberAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasNumberAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasNumberAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasNumberAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasNumberAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasNumberAttributeType string

const (
	SchemasNumberAttributeTypeNumber SchemasNumberAttributeType = "number"
)

func (e SchemasNumberAttributeType) ToPointer() *SchemasNumberAttributeType {
	return &e
}
func (e *SchemasNumberAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = SchemasNumberAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasNumberAttributeType: %v", v)
	}
}

// NumberAttributeSchemas - Numeric input
type NumberAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasNumberAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                `json:"default_value,omitempty"`
	Deprecated   *bool                              `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	Format      *string `json:"format,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasNumberAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                             `json:"label"`
	Layout      *string                            `json:"layout,omitempty"`
	Name        string                             `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Whether or not to show a thousands separator
	ShowSeparator *bool `default:"true" json:"show_separator"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                      `default:"true" json:"sortable"`
	Type           SchemasNumberAttributeType `json:"type"`
	ValueFormatter *string                    `json:"value_formatter,omitempty"`
}

func (n NumberAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NumberAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (n *NumberAttributeSchemas) GetManifest() []string {
	if n == nil {
		return nil
	}
	return n.Manifest
}

func (n *NumberAttributeSchemas) GetPurpose() []string {
	if n == nil {
		return nil
	}
	return n.Purpose
}

func (n *NumberAttributeSchemas) GetCompositeID() *string {
	if n == nil {
		return nil
	}
	return n.CompositeID
}

func (n *NumberAttributeSchemas) GetConstraints() *SchemasNumberAttributeConstraints {
	if n == nil {
		return nil
	}
	return n.Constraints
}

func (n *NumberAttributeSchemas) GetDefaultValue() any {
	if n == nil {
		return nil
	}
	return n.DefaultValue
}

func (n *NumberAttributeSchemas) GetDeprecated() *bool {
	if n == nil {
		return nil
	}
	return n.Deprecated
}

func (n *NumberAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if n == nil {
		return nil
	}
	return n.EntityBuilderDisableEdit
}

func (n *NumberAttributeSchemas) GetFeatureFlag() *string {
	if n == nil {
		return nil
	}
	return n.FeatureFlag
}

func (n *NumberAttributeSchemas) GetFormat() *string {
	if n == nil {
		return nil
	}
	return n.Format
}

func (n *NumberAttributeSchemas) GetGroup() *string {
	if n == nil {
		return nil
	}
	return n.Group
}

func (n *NumberAttributeSchemas) GetHasPrimary() *bool {
	if n == nil {
		return nil
	}
	return n.HasPrimary
}

func (n *NumberAttributeSchemas) GetHidden() *bool {
	if n == nil {
		return nil
	}
	return n.Hidden
}

func (n *NumberAttributeSchemas) GetHideLabel() *bool {
	if n == nil {
		return nil
	}
	return n.HideLabel
}

func (n *NumberAttributeSchemas) GetIcon() *string {
	if n == nil {
		return nil
	}
	return n.Icon
}

func (n *NumberAttributeSchemas) GetID() *string {
	if n == nil {
		return nil
	}
	return n.ID
}

func (n *NumberAttributeSchemas) GetInfoHelpers() *SchemasNumberAttributeInfoHelpers {
	if n == nil {
		return nil
	}
	return n.InfoHelpers
}

func (n *NumberAttributeSchemas) GetLabel() string {
	if n == nil {
		return ""
	}
	return n.Label
}

func (n *NumberAttributeSchemas) GetLayout() *string {
	if n == nil {
		return nil
	}
	return n.Layout
}

func (n *NumberAttributeSchemas) GetName() string {
	if n == nil {
		return ""
	}
	return n.Name
}

func (n *NumberAttributeSchemas) GetOrder() *int64 {
	if n == nil {
		return nil
	}
	return n.Order
}

func (n *NumberAttributeSchemas) GetPlaceholder() *string {
	if n == nil {
		return nil
	}
	return n.Placeholder
}

func (n *NumberAttributeSchemas) GetPreviewValueFormatter() *string {
	if n == nil {
		return nil
	}
	return n.PreviewValueFormatter
}

func (n *NumberAttributeSchemas) GetProtected() *bool {
	if n == nil {
		return nil
	}
	return n.Protected
}

func (n *NumberAttributeSchemas) GetReadonly() *bool {
	if n == nil {
		return nil
	}
	return n.Readonly
}

func (n *NumberAttributeSchemas) GetRenderCondition() *string {
	if n == nil {
		return nil
	}
	return n.RenderCondition
}

func (n *NumberAttributeSchemas) GetRepeatable() *bool {
	if n == nil {
		return nil
	}
	return n.Repeatable
}

func (n *NumberAttributeSchemas) GetRequired() *bool {
	if n == nil {
		return nil
	}
	return n.Required
}

func (n *NumberAttributeSchemas) GetSchema() *string {
	if n == nil {
		return nil
	}
	return n.Schema
}

func (n *NumberAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if n == nil {
		return nil
	}
	return n.SettingsFlag
}

func (n *NumberAttributeSchemas) GetShowInTable() *bool {
	if n == nil {
		return nil
	}
	return n.ShowInTable
}

func (n *NumberAttributeSchemas) GetShowSeparator() *bool {
	if n == nil {
		return nil
	}
	return n.ShowSeparator
}

func (n *NumberAttributeSchemas) GetSortable() *bool {
	if n == nil {
		return nil
	}
	return n.Sortable
}

func (n *NumberAttributeSchemas) GetType() SchemasNumberAttributeType {
	if n == nil {
		return SchemasNumberAttributeType("")
	}
	return n.Type
}

func (n *NumberAttributeSchemas) GetValueFormatter() *string {
	if n == nil {
		return nil
	}
	return n.ValueFormatter
}

// SchemasMessageEmailAddressAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasMessageEmailAddressAttributeConstraints struct {
}

func (s SchemasMessageEmailAddressAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasMessageEmailAddressAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasMessageEmailAddressAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasMessageEmailAddressAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasMessageEmailAddressAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasMessageEmailAddressAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasMessageEmailAddressAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasMessageEmailAddressAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasMessageEmailAddressAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasMessageEmailAddressAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasMessageEmailAddressAttributeType string

const (
	SchemasMessageEmailAddressAttributeTypeMessageEmailAddress SchemasMessageEmailAddressAttributeType = "message_email_address"
)

func (e SchemasMessageEmailAddressAttributeType) ToPointer() *SchemasMessageEmailAddressAttributeType {
	return &e
}
func (e *SchemasMessageEmailAddressAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "message_email_address":
		*e = SchemasMessageEmailAddressAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasMessageEmailAddressAttributeType: %v", v)
	}
}

// MessageEmailAddressAttributeSchemas - Message emil address
type MessageEmailAddressAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	Address     *string  `json:"address,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasMessageEmailAddressAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                             `json:"default_value,omitempty"`
	Deprecated   *bool                                           `default:"false" json:"deprecated"`
	EmailType    *string                                         `json:"email_type,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasMessageEmailAddressAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                          `json:"label"`
	Layout      *string                                         `json:"layout,omitempty"`
	Name        string                                          `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema     *string `json:"schema,omitempty"`
	SendStatus *string `json:"send_status,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                                   `default:"true" json:"sortable"`
	Type           SchemasMessageEmailAddressAttributeType `json:"type"`
	ValueFormatter *string                                 `json:"value_formatter,omitempty"`
}

func (m MessageEmailAddressAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MessageEmailAddressAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (m *MessageEmailAddressAttributeSchemas) GetManifest() []string {
	if m == nil {
		return nil
	}
	return m.Manifest
}

func (m *MessageEmailAddressAttributeSchemas) GetPurpose() []string {
	if m == nil {
		return nil
	}
	return m.Purpose
}

func (m *MessageEmailAddressAttributeSchemas) GetAddress() *string {
	if m == nil {
		return nil
	}
	return m.Address
}

func (m *MessageEmailAddressAttributeSchemas) GetCompositeID() *string {
	if m == nil {
		return nil
	}
	return m.CompositeID
}

func (m *MessageEmailAddressAttributeSchemas) GetConstraints() *SchemasMessageEmailAddressAttributeConstraints {
	if m == nil {
		return nil
	}
	return m.Constraints
}

func (m *MessageEmailAddressAttributeSchemas) GetDefaultValue() any {
	if m == nil {
		return nil
	}
	return m.DefaultValue
}

func (m *MessageEmailAddressAttributeSchemas) GetDeprecated() *bool {
	if m == nil {
		return nil
	}
	return m.Deprecated
}

func (m *MessageEmailAddressAttributeSchemas) GetEmailType() *string {
	if m == nil {
		return nil
	}
	return m.EmailType
}

func (m *MessageEmailAddressAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if m == nil {
		return nil
	}
	return m.EntityBuilderDisableEdit
}

func (m *MessageEmailAddressAttributeSchemas) GetFeatureFlag() *string {
	if m == nil {
		return nil
	}
	return m.FeatureFlag
}

func (m *MessageEmailAddressAttributeSchemas) GetGroup() *string {
	if m == nil {
		return nil
	}
	return m.Group
}

func (m *MessageEmailAddressAttributeSchemas) GetHasPrimary() *bool {
	if m == nil {
		return nil
	}
	return m.HasPrimary
}

func (m *MessageEmailAddressAttributeSchemas) GetHidden() *bool {
	if m == nil {
		return nil
	}
	return m.Hidden
}

func (m *MessageEmailAddressAttributeSchemas) GetHideLabel() *bool {
	if m == nil {
		return nil
	}
	return m.HideLabel
}

func (m *MessageEmailAddressAttributeSchemas) GetIcon() *string {
	if m == nil {
		return nil
	}
	return m.Icon
}

func (m *MessageEmailAddressAttributeSchemas) GetID() *string {
	if m == nil {
		return nil
	}
	return m.ID
}

func (m *MessageEmailAddressAttributeSchemas) GetInfoHelpers() *SchemasMessageEmailAddressAttributeInfoHelpers {
	if m == nil {
		return nil
	}
	return m.InfoHelpers
}

func (m *MessageEmailAddressAttributeSchemas) GetLabel() string {
	if m == nil {
		return ""
	}
	return m.Label
}

func (m *MessageEmailAddressAttributeSchemas) GetLayout() *string {
	if m == nil {
		return nil
	}
	return m.Layout
}

func (m *MessageEmailAddressAttributeSchemas) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MessageEmailAddressAttributeSchemas) GetOrder() *int64 {
	if m == nil {
		return nil
	}
	return m.Order
}

func (m *MessageEmailAddressAttributeSchemas) GetPlaceholder() *string {
	if m == nil {
		return nil
	}
	return m.Placeholder
}

func (m *MessageEmailAddressAttributeSchemas) GetPreviewValueFormatter() *string {
	if m == nil {
		return nil
	}
	return m.PreviewValueFormatter
}

func (m *MessageEmailAddressAttributeSchemas) GetProtected() *bool {
	if m == nil {
		return nil
	}
	return m.Protected
}

func (m *MessageEmailAddressAttributeSchemas) GetReadonly() *bool {
	if m == nil {
		return nil
	}
	return m.Readonly
}

func (m *MessageEmailAddressAttributeSchemas) GetRenderCondition() *string {
	if m == nil {
		return nil
	}
	return m.RenderCondition
}

func (m *MessageEmailAddressAttributeSchemas) GetRepeatable() *bool {
	if m == nil {
		return nil
	}
	return m.Repeatable
}

func (m *MessageEmailAddressAttributeSchemas) GetRequired() *bool {
	if m == nil {
		return nil
	}
	return m.Required
}

func (m *MessageEmailAddressAttributeSchemas) GetSchema() *string {
	if m == nil {
		return nil
	}
	return m.Schema
}

func (m *MessageEmailAddressAttributeSchemas) GetSendStatus() *string {
	if m == nil {
		return nil
	}
	return m.SendStatus
}

func (m *MessageEmailAddressAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if m == nil {
		return nil
	}
	return m.SettingsFlag
}

func (m *MessageEmailAddressAttributeSchemas) GetShowInTable() *bool {
	if m == nil {
		return nil
	}
	return m.ShowInTable
}

func (m *MessageEmailAddressAttributeSchemas) GetSortable() *bool {
	if m == nil {
		return nil
	}
	return m.Sortable
}

func (m *MessageEmailAddressAttributeSchemas) GetType() SchemasMessageEmailAddressAttributeType {
	if m == nil {
		return SchemasMessageEmailAddressAttributeType("")
	}
	return m.Type
}

func (m *MessageEmailAddressAttributeSchemas) GetValueFormatter() *string {
	if m == nil {
		return nil
	}
	return m.ValueFormatter
}

// SchemasTagsAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasTagsAttributeConstraints struct {
}

func (s SchemasTagsAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasTagsAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasTagsAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasTagsAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasTagsAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasTagsAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasTagsAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasTagsAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasTagsAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasTagsAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasTagsAttributeType string

const (
	SchemasTagsAttributeTypeTags SchemasTagsAttributeType = "tags"
)

func (e SchemasTagsAttributeType) ToPointer() *SchemasTagsAttributeType {
	return &e
}
func (e *SchemasTagsAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tags":
		*e = SchemasTagsAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasTagsAttributeType: %v", v)
	}
}

// TagsAttributeSchemas - Tags
type TagsAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasTagsAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                              `json:"default_value,omitempty"`
	Deprecated   *bool                            `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasTagsAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                           `json:"label"`
	Layout      *string                          `json:"layout,omitempty"`
	Name        string                           `json:"name"`
	Options     []string                         `json:"options,omitempty"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                    `default:"true" json:"sortable"`
	Suggestions    []string                 `json:"suggestions,omitempty"`
	Type           SchemasTagsAttributeType `json:"type"`
	ValueFormatter *string                  `json:"value_formatter,omitempty"`
}

func (t TagsAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TagsAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (t *TagsAttributeSchemas) GetManifest() []string {
	if t == nil {
		return nil
	}
	return t.Manifest
}

func (t *TagsAttributeSchemas) GetPurpose() []string {
	if t == nil {
		return nil
	}
	return t.Purpose
}

func (t *TagsAttributeSchemas) GetCompositeID() *string {
	if t == nil {
		return nil
	}
	return t.CompositeID
}

func (t *TagsAttributeSchemas) GetConstraints() *SchemasTagsAttributeConstraints {
	if t == nil {
		return nil
	}
	return t.Constraints
}

func (t *TagsAttributeSchemas) GetDefaultValue() any {
	if t == nil {
		return nil
	}
	return t.DefaultValue
}

func (t *TagsAttributeSchemas) GetDeprecated() *bool {
	if t == nil {
		return nil
	}
	return t.Deprecated
}

func (t *TagsAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if t == nil {
		return nil
	}
	return t.EntityBuilderDisableEdit
}

func (t *TagsAttributeSchemas) GetFeatureFlag() *string {
	if t == nil {
		return nil
	}
	return t.FeatureFlag
}

func (t *TagsAttributeSchemas) GetGroup() *string {
	if t == nil {
		return nil
	}
	return t.Group
}

func (t *TagsAttributeSchemas) GetHasPrimary() *bool {
	if t == nil {
		return nil
	}
	return t.HasPrimary
}

func (t *TagsAttributeSchemas) GetHidden() *bool {
	if t == nil {
		return nil
	}
	return t.Hidden
}

func (t *TagsAttributeSchemas) GetHideLabel() *bool {
	if t == nil {
		return nil
	}
	return t.HideLabel
}

func (t *TagsAttributeSchemas) GetIcon() *string {
	if t == nil {
		return nil
	}
	return t.Icon
}

func (t *TagsAttributeSchemas) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TagsAttributeSchemas) GetInfoHelpers() *SchemasTagsAttributeInfoHelpers {
	if t == nil {
		return nil
	}
	return t.InfoHelpers
}

func (t *TagsAttributeSchemas) GetLabel() string {
	if t == nil {
		return ""
	}
	return t.Label
}

func (t *TagsAttributeSchemas) GetLayout() *string {
	if t == nil {
		return nil
	}
	return t.Layout
}

func (t *TagsAttributeSchemas) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *TagsAttributeSchemas) GetOptions() []string {
	if t == nil {
		return nil
	}
	return t.Options
}

func (t *TagsAttributeSchemas) GetOrder() *int64 {
	if t == nil {
		return nil
	}
	return t.Order
}

func (t *TagsAttributeSchemas) GetPlaceholder() *string {
	if t == nil {
		return nil
	}
	return t.Placeholder
}

func (t *TagsAttributeSchemas) GetPreviewValueFormatter() *string {
	if t == nil {
		return nil
	}
	return t.PreviewValueFormatter
}

func (t *TagsAttributeSchemas) GetProtected() *bool {
	if t == nil {
		return nil
	}
	return t.Protected
}

func (t *TagsAttributeSchemas) GetReadonly() *bool {
	if t == nil {
		return nil
	}
	return t.Readonly
}

func (t *TagsAttributeSchemas) GetRenderCondition() *string {
	if t == nil {
		return nil
	}
	return t.RenderCondition
}

func (t *TagsAttributeSchemas) GetRepeatable() *bool {
	if t == nil {
		return nil
	}
	return t.Repeatable
}

func (t *TagsAttributeSchemas) GetRequired() *bool {
	if t == nil {
		return nil
	}
	return t.Required
}

func (t *TagsAttributeSchemas) GetSchema() *string {
	if t == nil {
		return nil
	}
	return t.Schema
}

func (t *TagsAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if t == nil {
		return nil
	}
	return t.SettingsFlag
}

func (t *TagsAttributeSchemas) GetShowInTable() *bool {
	if t == nil {
		return nil
	}
	return t.ShowInTable
}

func (t *TagsAttributeSchemas) GetSortable() *bool {
	if t == nil {
		return nil
	}
	return t.Sortable
}

func (t *TagsAttributeSchemas) GetSuggestions() []string {
	if t == nil {
		return nil
	}
	return t.Suggestions
}

func (t *TagsAttributeSchemas) GetType() SchemasTagsAttributeType {
	if t == nil {
		return SchemasTagsAttributeType("")
	}
	return t.Type
}

func (t *TagsAttributeSchemas) GetValueFormatter() *string {
	if t == nil {
		return nil
	}
	return t.ValueFormatter
}

// SchemasCurrencyAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasCurrencyAttributeConstraints struct {
}

func (s SchemasCurrencyAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasCurrencyAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// One - A currency configuration
type One struct {
	Code        string  `json:"code"`
	Description string  `json:"description"`
	Flag        *string `json:"flag,omitempty"`
	Symbol      string  `json:"symbol"`
}

func (o One) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *One) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, []string{"code", "description", "symbol"}); err != nil {
		return err
	}
	return nil
}

func (o *One) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *One) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *One) GetFlag() *string {
	if o == nil {
		return nil
	}
	return o.Flag
}

func (o *One) GetSymbol() string {
	if o == nil {
		return ""
	}
	return o.Symbol
}

type CurrencyType string

const (
	CurrencyTypeOne CurrencyType = "1"
)

type Currency struct {
	One *One `queryParam:"inline" name:"currency"`

	Type CurrencyType
}

func CreateCurrencyOne(one One) Currency {
	typ := CurrencyTypeOne

	return Currency{
		One:  &one,
		Type: typ,
	}
}

func (u *Currency) UnmarshalJSON(data []byte) error {

	var one One = One{}
	if err := utils.UnmarshalJSON(data, &one, "", true, nil); err == nil {
		u.One = &one
		u.Type = CurrencyTypeOne
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Currency", string(data))
}

func (u Currency) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	return nil, errors.New("could not marshal union type Currency: all fields are null")
}

// SchemasCurrencyAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasCurrencyAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasCurrencyAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasCurrencyAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasCurrencyAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasCurrencyAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasCurrencyAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasCurrencyAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasCurrencyAttributeType string

const (
	SchemasCurrencyAttributeTypeCurrency SchemasCurrencyAttributeType = "currency"
)

func (e SchemasCurrencyAttributeType) ToPointer() *SchemasCurrencyAttributeType {
	return &e
}
func (e *SchemasCurrencyAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "currency":
		*e = SchemasCurrencyAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasCurrencyAttributeType: %v", v)
	}
}

// CurrencyAttributeSchemas - Currency input
type CurrencyAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *SchemasCurrencyAttributeConstraints `json:"constraints,omitempty"`
	// An array of currency configurations with a country code (ISO-4217)
	Currency             []Currency `json:"currency"`
	CurrencySelectorOnly *bool      `default:"false" json:"currency_selector_only"`
	DefaultValue         any        `json:"default_value,omitempty"`
	Deprecated           *bool      `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasCurrencyAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                               `json:"label"`
	Layout      *string                              `json:"layout,omitempty"`
	Name        string                               `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                        `default:"true" json:"sortable"`
	Type           SchemasCurrencyAttributeType `json:"type"`
	ValueFormatter *string                      `json:"value_formatter,omitempty"`
}

func (c CurrencyAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CurrencyAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"currency", "label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (c *CurrencyAttributeSchemas) GetManifest() []string {
	if c == nil {
		return nil
	}
	return c.Manifest
}

func (c *CurrencyAttributeSchemas) GetPurpose() []string {
	if c == nil {
		return nil
	}
	return c.Purpose
}

func (c *CurrencyAttributeSchemas) GetCompositeID() *string {
	if c == nil {
		return nil
	}
	return c.CompositeID
}

func (c *CurrencyAttributeSchemas) GetConstraints() *SchemasCurrencyAttributeConstraints {
	if c == nil {
		return nil
	}
	return c.Constraints
}

func (c *CurrencyAttributeSchemas) GetCurrency() []Currency {
	if c == nil {
		return []Currency{}
	}
	return c.Currency
}

func (c *CurrencyAttributeSchemas) GetCurrencySelectorOnly() *bool {
	if c == nil {
		return nil
	}
	return c.CurrencySelectorOnly
}

func (c *CurrencyAttributeSchemas) GetDefaultValue() any {
	if c == nil {
		return nil
	}
	return c.DefaultValue
}

func (c *CurrencyAttributeSchemas) GetDeprecated() *bool {
	if c == nil {
		return nil
	}
	return c.Deprecated
}

func (c *CurrencyAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if c == nil {
		return nil
	}
	return c.EntityBuilderDisableEdit
}

func (c *CurrencyAttributeSchemas) GetFeatureFlag() *string {
	if c == nil {
		return nil
	}
	return c.FeatureFlag
}

func (c *CurrencyAttributeSchemas) GetGroup() *string {
	if c == nil {
		return nil
	}
	return c.Group
}

func (c *CurrencyAttributeSchemas) GetHasPrimary() *bool {
	if c == nil {
		return nil
	}
	return c.HasPrimary
}

func (c *CurrencyAttributeSchemas) GetHidden() *bool {
	if c == nil {
		return nil
	}
	return c.Hidden
}

func (c *CurrencyAttributeSchemas) GetHideLabel() *bool {
	if c == nil {
		return nil
	}
	return c.HideLabel
}

func (c *CurrencyAttributeSchemas) GetIcon() *string {
	if c == nil {
		return nil
	}
	return c.Icon
}

func (c *CurrencyAttributeSchemas) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CurrencyAttributeSchemas) GetInfoHelpers() *SchemasCurrencyAttributeInfoHelpers {
	if c == nil {
		return nil
	}
	return c.InfoHelpers
}

func (c *CurrencyAttributeSchemas) GetLabel() string {
	if c == nil {
		return ""
	}
	return c.Label
}

func (c *CurrencyAttributeSchemas) GetLayout() *string {
	if c == nil {
		return nil
	}
	return c.Layout
}

func (c *CurrencyAttributeSchemas) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CurrencyAttributeSchemas) GetOrder() *int64 {
	if c == nil {
		return nil
	}
	return c.Order
}

func (c *CurrencyAttributeSchemas) GetPlaceholder() *string {
	if c == nil {
		return nil
	}
	return c.Placeholder
}

func (c *CurrencyAttributeSchemas) GetPreviewValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.PreviewValueFormatter
}

func (c *CurrencyAttributeSchemas) GetProtected() *bool {
	if c == nil {
		return nil
	}
	return c.Protected
}

func (c *CurrencyAttributeSchemas) GetReadonly() *bool {
	if c == nil {
		return nil
	}
	return c.Readonly
}

func (c *CurrencyAttributeSchemas) GetRenderCondition() *string {
	if c == nil {
		return nil
	}
	return c.RenderCondition
}

func (c *CurrencyAttributeSchemas) GetRepeatable() *bool {
	if c == nil {
		return nil
	}
	return c.Repeatable
}

func (c *CurrencyAttributeSchemas) GetRequired() *bool {
	if c == nil {
		return nil
	}
	return c.Required
}

func (c *CurrencyAttributeSchemas) GetSchema() *string {
	if c == nil {
		return nil
	}
	return c.Schema
}

func (c *CurrencyAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if c == nil {
		return nil
	}
	return c.SettingsFlag
}

func (c *CurrencyAttributeSchemas) GetShowInTable() *bool {
	if c == nil {
		return nil
	}
	return c.ShowInTable
}

func (c *CurrencyAttributeSchemas) GetSortable() *bool {
	if c == nil {
		return nil
	}
	return c.Sortable
}

func (c *CurrencyAttributeSchemas) GetType() SchemasCurrencyAttributeType {
	if c == nil {
		return SchemasCurrencyAttributeType("")
	}
	return c.Type
}

func (c *CurrencyAttributeSchemas) GetValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.ValueFormatter
}

// SchemasPaymentMethodRelationAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasPaymentMethodRelationAttributeConstraints struct {
}

func (s SchemasPaymentMethodRelationAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPaymentMethodRelationAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasPaymentMethodRelationAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasPaymentMethodRelationAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasPaymentMethodRelationAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasPaymentMethodRelationAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasPaymentMethodRelationAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasPaymentMethodRelationAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasPaymentMethodRelationAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasPaymentMethodRelationAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasPaymentMethodRelationAttributeType string

const (
	SchemasPaymentMethodRelationAttributeTypeRelationPaymentMethod SchemasPaymentMethodRelationAttributeType = "relation_payment_method"
)

func (e SchemasPaymentMethodRelationAttributeType) ToPointer() *SchemasPaymentMethodRelationAttributeType {
	return &e
}
func (e *SchemasPaymentMethodRelationAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relation_payment_method":
		*e = SchemasPaymentMethodRelationAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasPaymentMethodRelationAttributeType: %v", v)
	}
}

// PaymentMethodRelationAttributeSchemas - Reference to a payment method attribute of another entity
type PaymentMethodRelationAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPaymentMethodRelationAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                               `json:"default_value,omitempty"`
	Deprecated   *bool                                             `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPaymentMethodRelationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                            `json:"label"`
	Layout      *string                                           `json:"layout,omitempty"`
	Name        string                                            `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                                     `default:"true" json:"sortable"`
	Type           SchemasPaymentMethodRelationAttributeType `json:"type"`
	ValueFormatter *string                                   `json:"value_formatter,omitempty"`
}

func (p PaymentMethodRelationAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentMethodRelationAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PaymentMethodRelationAttributeSchemas) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PaymentMethodRelationAttributeSchemas) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PaymentMethodRelationAttributeSchemas) GetCompositeID() *string {
	if p == nil {
		return nil
	}
	return p.CompositeID
}

func (p *PaymentMethodRelationAttributeSchemas) GetConstraints() *SchemasPaymentMethodRelationAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PaymentMethodRelationAttributeSchemas) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PaymentMethodRelationAttributeSchemas) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PaymentMethodRelationAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PaymentMethodRelationAttributeSchemas) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PaymentMethodRelationAttributeSchemas) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PaymentMethodRelationAttributeSchemas) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PaymentMethodRelationAttributeSchemas) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PaymentMethodRelationAttributeSchemas) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PaymentMethodRelationAttributeSchemas) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PaymentMethodRelationAttributeSchemas) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PaymentMethodRelationAttributeSchemas) GetInfoHelpers() *SchemasPaymentMethodRelationAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PaymentMethodRelationAttributeSchemas) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PaymentMethodRelationAttributeSchemas) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PaymentMethodRelationAttributeSchemas) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PaymentMethodRelationAttributeSchemas) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PaymentMethodRelationAttributeSchemas) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PaymentMethodRelationAttributeSchemas) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PaymentMethodRelationAttributeSchemas) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PaymentMethodRelationAttributeSchemas) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PaymentMethodRelationAttributeSchemas) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PaymentMethodRelationAttributeSchemas) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PaymentMethodRelationAttributeSchemas) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PaymentMethodRelationAttributeSchemas) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PaymentMethodRelationAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PaymentMethodRelationAttributeSchemas) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PaymentMethodRelationAttributeSchemas) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PaymentMethodRelationAttributeSchemas) GetType() SchemasPaymentMethodRelationAttributeType {
	if p == nil {
		return SchemasPaymentMethodRelationAttributeType("")
	}
	return p.Type
}

func (p *PaymentMethodRelationAttributeSchemas) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// SchemasConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasConstraints struct {
}

func (s SchemasConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasType string

const (
	SchemasTypeRelationAddress SchemasType = "relation_address"
)

func (e SchemasType) ToPointer() *SchemasType {
	return &e
}
func (e *SchemasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relation_address":
		*e = SchemasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasType: %v", v)
	}
}

// AddressRelationAttributeSchemas - Reference to an address attribute of another entity
type AddressRelationAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *SchemasConstraints `json:"constraints,omitempty"`
	// Default fields visible on addresses
	//
	// Valid values are:
	//   - postal_code (default)
	//   - city (default)
	//   - street (default)
	//   - street_number (default)
	//   - plot_area
	//   - plot_of_land
	//   - suburb
	//   - country
	//   - additional_info
	//   - coordinates
	//   - start_date
	//   - end_date
	//   - salutation
	//   - title
	//   - first_name
	//   - last_name
	//   - company_name
	//
	DefaultAddressFields []string `json:"default_address_fields,omitempty"`
	DefaultValue         any      `json:"default_value,omitempty"`
	Deprecated           *bool    `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasInfoHelpers `json:"info_helpers,omitempty"`
	Label       string              `json:"label"`
	Layout      *string             `json:"layout,omitempty"`
	Name        string              `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool       `default:"true" json:"sortable"`
	Type           SchemasType `json:"type"`
	ValueFormatter *string     `json:"value_formatter,omitempty"`
}

func (a AddressRelationAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AddressRelationAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (a *AddressRelationAttributeSchemas) GetManifest() []string {
	if a == nil {
		return nil
	}
	return a.Manifest
}

func (a *AddressRelationAttributeSchemas) GetPurpose() []string {
	if a == nil {
		return nil
	}
	return a.Purpose
}

func (a *AddressRelationAttributeSchemas) GetCompositeID() *string {
	if a == nil {
		return nil
	}
	return a.CompositeID
}

func (a *AddressRelationAttributeSchemas) GetConstraints() *SchemasConstraints {
	if a == nil {
		return nil
	}
	return a.Constraints
}

func (a *AddressRelationAttributeSchemas) GetDefaultAddressFields() []string {
	if a == nil {
		return nil
	}
	return a.DefaultAddressFields
}

func (a *AddressRelationAttributeSchemas) GetDefaultValue() any {
	if a == nil {
		return nil
	}
	return a.DefaultValue
}

func (a *AddressRelationAttributeSchemas) GetDeprecated() *bool {
	if a == nil {
		return nil
	}
	return a.Deprecated
}

func (a *AddressRelationAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if a == nil {
		return nil
	}
	return a.EntityBuilderDisableEdit
}

func (a *AddressRelationAttributeSchemas) GetFeatureFlag() *string {
	if a == nil {
		return nil
	}
	return a.FeatureFlag
}

func (a *AddressRelationAttributeSchemas) GetGroup() *string {
	if a == nil {
		return nil
	}
	return a.Group
}

func (a *AddressRelationAttributeSchemas) GetHasPrimary() *bool {
	if a == nil {
		return nil
	}
	return a.HasPrimary
}

func (a *AddressRelationAttributeSchemas) GetHidden() *bool {
	if a == nil {
		return nil
	}
	return a.Hidden
}

func (a *AddressRelationAttributeSchemas) GetHideLabel() *bool {
	if a == nil {
		return nil
	}
	return a.HideLabel
}

func (a *AddressRelationAttributeSchemas) GetIcon() *string {
	if a == nil {
		return nil
	}
	return a.Icon
}

func (a *AddressRelationAttributeSchemas) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AddressRelationAttributeSchemas) GetInfoHelpers() *SchemasInfoHelpers {
	if a == nil {
		return nil
	}
	return a.InfoHelpers
}

func (a *AddressRelationAttributeSchemas) GetLabel() string {
	if a == nil {
		return ""
	}
	return a.Label
}

func (a *AddressRelationAttributeSchemas) GetLayout() *string {
	if a == nil {
		return nil
	}
	return a.Layout
}

func (a *AddressRelationAttributeSchemas) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AddressRelationAttributeSchemas) GetOrder() *int64 {
	if a == nil {
		return nil
	}
	return a.Order
}

func (a *AddressRelationAttributeSchemas) GetPlaceholder() *string {
	if a == nil {
		return nil
	}
	return a.Placeholder
}

func (a *AddressRelationAttributeSchemas) GetPreviewValueFormatter() *string {
	if a == nil {
		return nil
	}
	return a.PreviewValueFormatter
}

func (a *AddressRelationAttributeSchemas) GetProtected() *bool {
	if a == nil {
		return nil
	}
	return a.Protected
}

func (a *AddressRelationAttributeSchemas) GetReadonly() *bool {
	if a == nil {
		return nil
	}
	return a.Readonly
}

func (a *AddressRelationAttributeSchemas) GetRenderCondition() *string {
	if a == nil {
		return nil
	}
	return a.RenderCondition
}

func (a *AddressRelationAttributeSchemas) GetRepeatable() *bool {
	if a == nil {
		return nil
	}
	return a.Repeatable
}

func (a *AddressRelationAttributeSchemas) GetRequired() *bool {
	if a == nil {
		return nil
	}
	return a.Required
}

func (a *AddressRelationAttributeSchemas) GetSchema() *string {
	if a == nil {
		return nil
	}
	return a.Schema
}

func (a *AddressRelationAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if a == nil {
		return nil
	}
	return a.SettingsFlag
}

func (a *AddressRelationAttributeSchemas) GetShowInTable() *bool {
	if a == nil {
		return nil
	}
	return a.ShowInTable
}

func (a *AddressRelationAttributeSchemas) GetSortable() *bool {
	if a == nil {
		return nil
	}
	return a.Sortable
}

func (a *AddressRelationAttributeSchemas) GetType() SchemasType {
	if a == nil {
		return SchemasType("")
	}
	return a.Type
}

func (a *AddressRelationAttributeSchemas) GetValueFormatter() *string {
	if a == nil {
		return nil
	}
	return a.ValueFormatter
}

// Constraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type Constraints struct {
}

func (c Constraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Constraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

// InfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type InfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (i InfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InfoHelpers) GetHintCustomComponent() *string {
	if i == nil {
		return nil
	}
	return i.HintCustomComponent
}

func (i *InfoHelpers) GetHintText() *string {
	if i == nil {
		return nil
	}
	return i.HintText
}

func (i *InfoHelpers) GetHintTextKey() *string {
	if i == nil {
		return nil
	}
	return i.HintTextKey
}

func (i *InfoHelpers) GetHintTooltipPlacement() *string {
	if i == nil {
		return nil
	}
	return i.HintTooltipPlacement
}

type Type string

const (
	TypeAddress Type = "address"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "address":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

// Schemas - Address attribute
type Schemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *Constraints `json:"constraints,omitempty"`
	// Default fields visible on addresses
	//
	// Valid values are:
	//   - postal_code (default)
	//   - city (default)
	//   - street (default)
	//   - street_number (default)
	//   - plot_area
	//   - plot_of_land
	//   - suburb
	//   - country
	//   - additional_info
	//   - coordinates
	//   - start_date
	//   - end_date
	//   - salutation
	//   - title
	//   - first_name
	//   - last_name
	//   - company_name
	//
	DefaultAddressFields []string `json:"default_address_fields,omitempty"`
	DefaultValue         any      `json:"default_value,omitempty"`
	Deprecated           *bool    `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *InfoHelpers `json:"info_helpers,omitempty"`
	Label       string       `json:"label"`
	Layout      *string      `json:"layout,omitempty"`
	Name        string       `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool   `default:"true" json:"sortable"`
	Type           Type    `json:"type"`
	ValueFormatter *string `json:"value_formatter,omitempty"`
}

func (s Schemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Schemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (s *Schemas) GetManifest() []string {
	if s == nil {
		return nil
	}
	return s.Manifest
}

func (s *Schemas) GetPurpose() []string {
	if s == nil {
		return nil
	}
	return s.Purpose
}

func (s *Schemas) GetCompositeID() *string {
	if s == nil {
		return nil
	}
	return s.CompositeID
}

func (s *Schemas) GetConstraints() *Constraints {
	if s == nil {
		return nil
	}
	return s.Constraints
}

func (s *Schemas) GetDefaultAddressFields() []string {
	if s == nil {
		return nil
	}
	return s.DefaultAddressFields
}

func (s *Schemas) GetDefaultValue() any {
	if s == nil {
		return nil
	}
	return s.DefaultValue
}

func (s *Schemas) GetDeprecated() *bool {
	if s == nil {
		return nil
	}
	return s.Deprecated
}

func (s *Schemas) GetEntityBuilderDisableEdit() *bool {
	if s == nil {
		return nil
	}
	return s.EntityBuilderDisableEdit
}

func (s *Schemas) GetFeatureFlag() *string {
	if s == nil {
		return nil
	}
	return s.FeatureFlag
}

func (s *Schemas) GetGroup() *string {
	if s == nil {
		return nil
	}
	return s.Group
}

func (s *Schemas) GetHasPrimary() *bool {
	if s == nil {
		return nil
	}
	return s.HasPrimary
}

func (s *Schemas) GetHidden() *bool {
	if s == nil {
		return nil
	}
	return s.Hidden
}

func (s *Schemas) GetHideLabel() *bool {
	if s == nil {
		return nil
	}
	return s.HideLabel
}

func (s *Schemas) GetIcon() *string {
	if s == nil {
		return nil
	}
	return s.Icon
}

func (s *Schemas) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *Schemas) GetInfoHelpers() *InfoHelpers {
	if s == nil {
		return nil
	}
	return s.InfoHelpers
}

func (s *Schemas) GetLabel() string {
	if s == nil {
		return ""
	}
	return s.Label
}

func (s *Schemas) GetLayout() *string {
	if s == nil {
		return nil
	}
	return s.Layout
}

func (s *Schemas) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *Schemas) GetOrder() *int64 {
	if s == nil {
		return nil
	}
	return s.Order
}

func (s *Schemas) GetPlaceholder() *string {
	if s == nil {
		return nil
	}
	return s.Placeholder
}

func (s *Schemas) GetPreviewValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.PreviewValueFormatter
}

func (s *Schemas) GetProtected() *bool {
	if s == nil {
		return nil
	}
	return s.Protected
}

func (s *Schemas) GetReadonly() *bool {
	if s == nil {
		return nil
	}
	return s.Readonly
}

func (s *Schemas) GetRenderCondition() *string {
	if s == nil {
		return nil
	}
	return s.RenderCondition
}

func (s *Schemas) GetRepeatable() *bool {
	if s == nil {
		return nil
	}
	return s.Repeatable
}

func (s *Schemas) GetRequired() *bool {
	if s == nil {
		return nil
	}
	return s.Required
}

func (s *Schemas) GetSchema() *string {
	if s == nil {
		return nil
	}
	return s.Schema
}

func (s *Schemas) GetSettingsFlag() []SettingFlag {
	if s == nil {
		return nil
	}
	return s.SettingsFlag
}

func (s *Schemas) GetShowInTable() *bool {
	if s == nil {
		return nil
	}
	return s.ShowInTable
}

func (s *Schemas) GetSortable() *bool {
	if s == nil {
		return nil
	}
	return s.Sortable
}

func (s *Schemas) GetType() Type {
	if s == nil {
		return Type("")
	}
	return s.Type
}

func (s *Schemas) GetValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.ValueFormatter
}

// SchemasUserRelationAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasUserRelationAttributeConstraints struct {
}

func (s SchemasUserRelationAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasUserRelationAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasUserRelationAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasUserRelationAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasUserRelationAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasUserRelationAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasUserRelationAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasUserRelationAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasUserRelationAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasUserRelationAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasUserRelationAttributeType string

const (
	SchemasUserRelationAttributeTypeRelationUser SchemasUserRelationAttributeType = "relation_user"
)

func (e SchemasUserRelationAttributeType) ToPointer() *SchemasUserRelationAttributeType {
	return &e
}
func (e *SchemasUserRelationAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relation_user":
		*e = SchemasUserRelationAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasUserRelationAttributeType: %v", v)
	}
}

// UserRelationAttributeSchemas - User Relationship
type UserRelationAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasUserRelationAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                      `json:"default_value,omitempty"`
	Deprecated   *bool                                    `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasUserRelationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                   `json:"label"`
	Layout      *string                                  `json:"layout,omitempty"`
	Multiple    *bool                                    `default:"false" json:"multiple"`
	Name        string                                   `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                            `default:"true" json:"sortable"`
	Type           SchemasUserRelationAttributeType `json:"type"`
	ValueFormatter *string                          `json:"value_formatter,omitempty"`
}

func (u UserRelationAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserRelationAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (u *UserRelationAttributeSchemas) GetManifest() []string {
	if u == nil {
		return nil
	}
	return u.Manifest
}

func (u *UserRelationAttributeSchemas) GetPurpose() []string {
	if u == nil {
		return nil
	}
	return u.Purpose
}

func (u *UserRelationAttributeSchemas) GetCompositeID() *string {
	if u == nil {
		return nil
	}
	return u.CompositeID
}

func (u *UserRelationAttributeSchemas) GetConstraints() *SchemasUserRelationAttributeConstraints {
	if u == nil {
		return nil
	}
	return u.Constraints
}

func (u *UserRelationAttributeSchemas) GetDefaultValue() any {
	if u == nil {
		return nil
	}
	return u.DefaultValue
}

func (u *UserRelationAttributeSchemas) GetDeprecated() *bool {
	if u == nil {
		return nil
	}
	return u.Deprecated
}

func (u *UserRelationAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if u == nil {
		return nil
	}
	return u.EntityBuilderDisableEdit
}

func (u *UserRelationAttributeSchemas) GetFeatureFlag() *string {
	if u == nil {
		return nil
	}
	return u.FeatureFlag
}

func (u *UserRelationAttributeSchemas) GetGroup() *string {
	if u == nil {
		return nil
	}
	return u.Group
}

func (u *UserRelationAttributeSchemas) GetHasPrimary() *bool {
	if u == nil {
		return nil
	}
	return u.HasPrimary
}

func (u *UserRelationAttributeSchemas) GetHidden() *bool {
	if u == nil {
		return nil
	}
	return u.Hidden
}

func (u *UserRelationAttributeSchemas) GetHideLabel() *bool {
	if u == nil {
		return nil
	}
	return u.HideLabel
}

func (u *UserRelationAttributeSchemas) GetIcon() *string {
	if u == nil {
		return nil
	}
	return u.Icon
}

func (u *UserRelationAttributeSchemas) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UserRelationAttributeSchemas) GetInfoHelpers() *SchemasUserRelationAttributeInfoHelpers {
	if u == nil {
		return nil
	}
	return u.InfoHelpers
}

func (u *UserRelationAttributeSchemas) GetLabel() string {
	if u == nil {
		return ""
	}
	return u.Label
}

func (u *UserRelationAttributeSchemas) GetLayout() *string {
	if u == nil {
		return nil
	}
	return u.Layout
}

func (u *UserRelationAttributeSchemas) GetMultiple() *bool {
	if u == nil {
		return nil
	}
	return u.Multiple
}

func (u *UserRelationAttributeSchemas) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UserRelationAttributeSchemas) GetOrder() *int64 {
	if u == nil {
		return nil
	}
	return u.Order
}

func (u *UserRelationAttributeSchemas) GetPlaceholder() *string {
	if u == nil {
		return nil
	}
	return u.Placeholder
}

func (u *UserRelationAttributeSchemas) GetPreviewValueFormatter() *string {
	if u == nil {
		return nil
	}
	return u.PreviewValueFormatter
}

func (u *UserRelationAttributeSchemas) GetProtected() *bool {
	if u == nil {
		return nil
	}
	return u.Protected
}

func (u *UserRelationAttributeSchemas) GetReadonly() *bool {
	if u == nil {
		return nil
	}
	return u.Readonly
}

func (u *UserRelationAttributeSchemas) GetRenderCondition() *string {
	if u == nil {
		return nil
	}
	return u.RenderCondition
}

func (u *UserRelationAttributeSchemas) GetRepeatable() *bool {
	if u == nil {
		return nil
	}
	return u.Repeatable
}

func (u *UserRelationAttributeSchemas) GetRequired() *bool {
	if u == nil {
		return nil
	}
	return u.Required
}

func (u *UserRelationAttributeSchemas) GetSchema() *string {
	if u == nil {
		return nil
	}
	return u.Schema
}

func (u *UserRelationAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if u == nil {
		return nil
	}
	return u.SettingsFlag
}

func (u *UserRelationAttributeSchemas) GetShowInTable() *bool {
	if u == nil {
		return nil
	}
	return u.ShowInTable
}

func (u *UserRelationAttributeSchemas) GetSortable() *bool {
	if u == nil {
		return nil
	}
	return u.Sortable
}

func (u *UserRelationAttributeSchemas) GetType() SchemasUserRelationAttributeType {
	if u == nil {
		return SchemasUserRelationAttributeType("")
	}
	return u.Type
}

func (u *UserRelationAttributeSchemas) GetValueFormatter() *string {
	if u == nil {
		return nil
	}
	return u.ValueFormatter
}

// ActionType - The action type. Currently supported actions:
//
// | action | description |
// |--------|-------------|
// | add_existing | Enables the user to pick an existing entity to link as relation |
// | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
// | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |
type ActionType string

const (
	ActionTypeAddExisting        ActionType = "add_existing"
	ActionTypeCreateNew          ActionType = "create_new"
	ActionTypeCreateFromExisting ActionType = "create_from_existing"
)

func (e ActionType) ToPointer() *ActionType {
	return &e
}
func (e *ActionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "add_existing":
		fallthrough
	case "create_new":
		fallthrough
	case "create_from_existing":
		*e = ActionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionType: %v", v)
	}
}

type Actions struct {
	// The action type. Currently supported actions:
	//
	// | action | description |
	// |--------|-------------|
	// | add_existing | Enables the user to pick an existing entity to link as relation |
	// | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
	// | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |
	//
	ActionType *ActionType `json:"action_type,omitempty"`
	// Sets the action as the default action, visible as the main action button.
	Default *bool `json:"default,omitempty"`
	// Name of the feature flag that enables this action
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// The action label or action translation key (i18n)
	Label *string `json:"label,omitempty"`
	// Default field values for new entity to create
	NewEntityItem map[string]any `json:"new_entity_item,omitempty"`
	// This action should only be active when all the settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
}

func (a Actions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Actions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *Actions) GetActionType() *ActionType {
	if a == nil {
		return nil
	}
	return a.ActionType
}

func (a *Actions) GetDefault() *bool {
	if a == nil {
		return nil
	}
	return a.Default
}

func (a *Actions) GetFeatureFlag() *string {
	if a == nil {
		return nil
	}
	return a.FeatureFlag
}

func (a *Actions) GetLabel() *string {
	if a == nil {
		return nil
	}
	return a.Label
}

func (a *Actions) GetNewEntityItem() map[string]any {
	if a == nil {
		return nil
	}
	return a.NewEntityItem
}

func (a *Actions) GetSettingsFlag() []SettingFlag {
	if a == nil {
		return nil
	}
	return a.SettingsFlag
}

// SchemasRelationAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasRelationAttributeConstraints struct {
}

func (s SchemasRelationAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasRelationAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

type DrawerSize string

const (
	DrawerSizeSmall  DrawerSize = "small"
	DrawerSizeMedium DrawerSize = "medium"
	DrawerSizeLarge  DrawerSize = "large"
)

func (e DrawerSize) ToPointer() *DrawerSize {
	return &e
}
func (e *DrawerSize) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "small":
		fallthrough
	case "medium":
		fallthrough
	case "large":
		*e = DrawerSize(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DrawerSize: %v", v)
	}
}

type EditMode string

const (
	EditModeListView EditMode = "list-view"
)

func (e EditMode) ToPointer() *EditMode {
	return &e
}
func (e *EditMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list-view":
		*e = EditMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditMode: %v", v)
	}
}

// SchemasRelationAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasRelationAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasRelationAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasRelationAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasRelationAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasRelationAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasRelationAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasRelationAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

// RelationAffinityMode - Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.
type RelationAffinityMode string

const (
	RelationAffinityModeWeak   RelationAffinityMode = "weak"
	RelationAffinityModeStrong RelationAffinityMode = "strong"
)

func (e RelationAffinityMode) ToPointer() *RelationAffinityMode {
	return &e
}
func (e *RelationAffinityMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weak":
		fallthrough
	case "strong":
		*e = RelationAffinityMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAffinityMode: %v", v)
	}
}

// RelationPickerFilter - Additional entity search filter for relation picker
type RelationPickerFilter struct {
	Q string `json:"q"`
}

func (r RelationPickerFilter) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RelationPickerFilter) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"q"}); err != nil {
		return err
	}
	return nil
}

func (r *RelationPickerFilter) GetQ() string {
	if r == nil {
		return ""
	}
	return r.Q
}

type RelationType string

const (
	RelationTypeHasMany RelationType = "has_many"
	RelationTypeHasOne  RelationType = "has_one"
)

func (e RelationType) ToPointer() *RelationType {
	return &e
}
func (e *RelationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "has_many":
		fallthrough
	case "has_one":
		*e = RelationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationType: %v", v)
	}
}

type SummaryFieldsType string

const (
	SummaryFieldsTypeStr          SummaryFieldsType = "str"
	SummaryFieldsTypeSummaryField SummaryFieldsType = "SummaryField"
)

type SummaryFields struct {
	Str          *string       `queryParam:"inline" name:"summary_fields"`
	SummaryField *SummaryField `queryParam:"inline" name:"summary_fields"`

	Type SummaryFieldsType
}

func CreateSummaryFieldsStr(str string) SummaryFields {
	typ := SummaryFieldsTypeStr

	return SummaryFields{
		Str:  &str,
		Type: typ,
	}
}

func CreateSummaryFieldsSummaryField(summaryField SummaryField) SummaryFields {
	typ := SummaryFieldsTypeSummaryField

	return SummaryFields{
		SummaryField: &summaryField,
		Type:         typ,
	}
}

func (u *SummaryFields) UnmarshalJSON(data []byte) error {

	var summaryField SummaryField = SummaryField{}
	if err := utils.UnmarshalJSON(data, &summaryField, "", true, nil); err == nil {
		u.SummaryField = &summaryField
		u.Type = SummaryFieldsTypeSummaryField
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = SummaryFieldsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SummaryFields", string(data))
}

func (u SummaryFields) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.SummaryField != nil {
		return utils.MarshalJSON(u.SummaryField, "", true)
	}

	return nil, errors.New("could not marshal union type SummaryFields: all fields are null")
}

type SchemasRelationAttributeType string

const (
	SchemasRelationAttributeTypeRelation SchemasRelationAttributeType = "relation"
)

func (e SchemasRelationAttributeType) ToPointer() *SchemasRelationAttributeType {
	return &e
}
func (e *SchemasRelationAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relation":
		*e = SchemasRelationAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasRelationAttributeType: %v", v)
	}
}

// RelationAttributeSchemas - Entity Relationship
type RelationAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string  `json:"_manifest,omitempty"`
	Purpose  []string  `json:"_purpose,omitempty"`
	Actions  []Actions `json:"actions,omitempty"`
	// Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is.
	AddButtonLabel *string  `json:"add_button_label,omitempty"`
	AllowedSchemas []string `json:"allowedSchemas,omitempty"`
	CompositeID    *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasRelationAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                  `json:"default_value,omitempty"`
	Deprecated   *bool                                `default:"false" json:"deprecated"`
	// Enables the preview, edition, and creation of relation items on a Master-Details view mode.
	DetailsViewModeEnabled *bool       `default:"false" json:"details_view_mode_enabled"`
	DrawerSize             *DrawerSize `json:"drawer_size,omitempty"`
	EditMode               *EditMode   `json:"edit_mode,omitempty"`
	// When enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link.
	EnableRelationPicker *bool `default:"true" json:"enable_relation_picker"`
	// When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item.
	EnableRelationTags *bool `default:"true" json:"enable_relation_tags"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool   `json:"hide_label,omitempty"`
	Icon      *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasRelationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                               `json:"label"`
	Layout      *string                              `json:"layout,omitempty"`
	Name        string                               `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.
	RelationAffinityMode *RelationAffinityMode `json:"relation_affinity_mode,omitempty"`
	// Additional entity search filter for relation picker
	RelationPickerFilter *RelationPickerFilter `json:"relation_picker_filter,omitempty"`
	RelationType         *RelationType         `json:"relation_type,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// Relations are always repeatables
	Repeatable *bool `default:"true" json:"repeatable"`
	Required   *bool `default:"false" json:"required"`
	// Map of schema slug to target relation attribute
	ReverseAttributes map[string]string `json:"reverse_attributes,omitempty"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is.
	SearchPlaceholder *string `json:"search_placeholder,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                        `default:"true" json:"sortable"`
	SummaryFields  []SummaryFields              `json:"summary_fields,omitempty"`
	Type           SchemasRelationAttributeType `json:"type"`
	ValueFormatter *string                      `json:"value_formatter,omitempty"`
}

func (r RelationAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RelationAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (r *RelationAttributeSchemas) GetManifest() []string {
	if r == nil {
		return nil
	}
	return r.Manifest
}

func (r *RelationAttributeSchemas) GetPurpose() []string {
	if r == nil {
		return nil
	}
	return r.Purpose
}

func (r *RelationAttributeSchemas) GetActions() []Actions {
	if r == nil {
		return nil
	}
	return r.Actions
}

func (r *RelationAttributeSchemas) GetAddButtonLabel() *string {
	if r == nil {
		return nil
	}
	return r.AddButtonLabel
}

func (r *RelationAttributeSchemas) GetAllowedSchemas() []string {
	if r == nil {
		return nil
	}
	return r.AllowedSchemas
}

func (r *RelationAttributeSchemas) GetCompositeID() *string {
	if r == nil {
		return nil
	}
	return r.CompositeID
}

func (r *RelationAttributeSchemas) GetConstraints() *SchemasRelationAttributeConstraints {
	if r == nil {
		return nil
	}
	return r.Constraints
}

func (r *RelationAttributeSchemas) GetDefaultValue() any {
	if r == nil {
		return nil
	}
	return r.DefaultValue
}

func (r *RelationAttributeSchemas) GetDeprecated() *bool {
	if r == nil {
		return nil
	}
	return r.Deprecated
}

func (r *RelationAttributeSchemas) GetDetailsViewModeEnabled() *bool {
	if r == nil {
		return nil
	}
	return r.DetailsViewModeEnabled
}

func (r *RelationAttributeSchemas) GetDrawerSize() *DrawerSize {
	if r == nil {
		return nil
	}
	return r.DrawerSize
}

func (r *RelationAttributeSchemas) GetEditMode() *EditMode {
	if r == nil {
		return nil
	}
	return r.EditMode
}

func (r *RelationAttributeSchemas) GetEnableRelationPicker() *bool {
	if r == nil {
		return nil
	}
	return r.EnableRelationPicker
}

func (r *RelationAttributeSchemas) GetEnableRelationTags() *bool {
	if r == nil {
		return nil
	}
	return r.EnableRelationTags
}

func (r *RelationAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if r == nil {
		return nil
	}
	return r.EntityBuilderDisableEdit
}

func (r *RelationAttributeSchemas) GetFeatureFlag() *string {
	if r == nil {
		return nil
	}
	return r.FeatureFlag
}

func (r *RelationAttributeSchemas) GetGroup() *string {
	if r == nil {
		return nil
	}
	return r.Group
}

func (r *RelationAttributeSchemas) GetHasPrimary() *bool {
	if r == nil {
		return nil
	}
	return r.HasPrimary
}

func (r *RelationAttributeSchemas) GetHidden() *bool {
	if r == nil {
		return nil
	}
	return r.Hidden
}

func (r *RelationAttributeSchemas) GetHideLabel() *bool {
	if r == nil {
		return nil
	}
	return r.HideLabel
}

func (r *RelationAttributeSchemas) GetIcon() *string {
	if r == nil {
		return nil
	}
	return r.Icon
}

func (r *RelationAttributeSchemas) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *RelationAttributeSchemas) GetInfoHelpers() *SchemasRelationAttributeInfoHelpers {
	if r == nil {
		return nil
	}
	return r.InfoHelpers
}

func (r *RelationAttributeSchemas) GetLabel() string {
	if r == nil {
		return ""
	}
	return r.Label
}

func (r *RelationAttributeSchemas) GetLayout() *string {
	if r == nil {
		return nil
	}
	return r.Layout
}

func (r *RelationAttributeSchemas) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *RelationAttributeSchemas) GetOrder() *int64 {
	if r == nil {
		return nil
	}
	return r.Order
}

func (r *RelationAttributeSchemas) GetPlaceholder() *string {
	if r == nil {
		return nil
	}
	return r.Placeholder
}

func (r *RelationAttributeSchemas) GetPreviewValueFormatter() *string {
	if r == nil {
		return nil
	}
	return r.PreviewValueFormatter
}

func (r *RelationAttributeSchemas) GetProtected() *bool {
	if r == nil {
		return nil
	}
	return r.Protected
}

func (r *RelationAttributeSchemas) GetReadonly() *bool {
	if r == nil {
		return nil
	}
	return r.Readonly
}

func (r *RelationAttributeSchemas) GetRelationAffinityMode() *RelationAffinityMode {
	if r == nil {
		return nil
	}
	return r.RelationAffinityMode
}

func (r *RelationAttributeSchemas) GetRelationPickerFilter() *RelationPickerFilter {
	if r == nil {
		return nil
	}
	return r.RelationPickerFilter
}

func (r *RelationAttributeSchemas) GetRelationType() *RelationType {
	if r == nil {
		return nil
	}
	return r.RelationType
}

func (r *RelationAttributeSchemas) GetRenderCondition() *string {
	if r == nil {
		return nil
	}
	return r.RenderCondition
}

func (r *RelationAttributeSchemas) GetRepeatable() *bool {
	if r == nil {
		return nil
	}
	return r.Repeatable
}

func (r *RelationAttributeSchemas) GetRequired() *bool {
	if r == nil {
		return nil
	}
	return r.Required
}

func (r *RelationAttributeSchemas) GetReverseAttributes() map[string]string {
	if r == nil {
		return nil
	}
	return r.ReverseAttributes
}

func (r *RelationAttributeSchemas) GetSchema() *string {
	if r == nil {
		return nil
	}
	return r.Schema
}

func (r *RelationAttributeSchemas) GetSearchPlaceholder() *string {
	if r == nil {
		return nil
	}
	return r.SearchPlaceholder
}

func (r *RelationAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if r == nil {
		return nil
	}
	return r.SettingsFlag
}

func (r *RelationAttributeSchemas) GetShowInTable() *bool {
	if r == nil {
		return nil
	}
	return r.ShowInTable
}

func (r *RelationAttributeSchemas) GetSortable() *bool {
	if r == nil {
		return nil
	}
	return r.Sortable
}

func (r *RelationAttributeSchemas) GetSummaryFields() []SummaryFields {
	if r == nil {
		return nil
	}
	return r.SummaryFields
}

func (r *RelationAttributeSchemas) GetType() SchemasRelationAttributeType {
	if r == nil {
		return SchemasRelationAttributeType("")
	}
	return r.Type
}

func (r *RelationAttributeSchemas) GetValueFormatter() *string {
	if r == nil {
		return nil
	}
	return r.ValueFormatter
}

// SchemasSequenceAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasSequenceAttributeConstraints struct {
}

func (s SchemasSequenceAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasSequenceAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasSequenceAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasSequenceAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasSequenceAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasSequenceAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasSequenceAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasSequenceAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasSequenceAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasSequenceAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasSequenceAttributeType string

const (
	SchemasSequenceAttributeTypeSequence SchemasSequenceAttributeType = "sequence"
)

func (e SchemasSequenceAttributeType) ToPointer() *SchemasSequenceAttributeType {
	return &e
}
func (e *SchemasSequenceAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sequence":
		*e = SchemasSequenceAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasSequenceAttributeType: %v", v)
	}
}

// SequenceAttributeSchemas - Sequence of unique identifiers
type SequenceAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasSequenceAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                  `json:"default_value,omitempty"`
	Deprecated   *bool                                `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasSequenceAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                               `json:"label"`
	Layout      *string                              `json:"layout,omitempty"`
	Name        string                               `json:"name"`
	// Attribute sort order (ascending) in group
	Order       *int64  `json:"order,omitempty"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Prefix added before the sequence number
	Prefix                *string `json:"prefix,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                        `default:"true" json:"sortable"`
	StartNumber    *int64                       `json:"start_number,omitempty"`
	Type           SchemasSequenceAttributeType `json:"type"`
	ValueFormatter *string                      `json:"value_formatter,omitempty"`
}

func (s SequenceAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SequenceAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (s *SequenceAttributeSchemas) GetManifest() []string {
	if s == nil {
		return nil
	}
	return s.Manifest
}

func (s *SequenceAttributeSchemas) GetPurpose() []string {
	if s == nil {
		return nil
	}
	return s.Purpose
}

func (s *SequenceAttributeSchemas) GetCompositeID() *string {
	if s == nil {
		return nil
	}
	return s.CompositeID
}

func (s *SequenceAttributeSchemas) GetConstraints() *SchemasSequenceAttributeConstraints {
	if s == nil {
		return nil
	}
	return s.Constraints
}

func (s *SequenceAttributeSchemas) GetDefaultValue() any {
	if s == nil {
		return nil
	}
	return s.DefaultValue
}

func (s *SequenceAttributeSchemas) GetDeprecated() *bool {
	if s == nil {
		return nil
	}
	return s.Deprecated
}

func (s *SequenceAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if s == nil {
		return nil
	}
	return s.EntityBuilderDisableEdit
}

func (s *SequenceAttributeSchemas) GetFeatureFlag() *string {
	if s == nil {
		return nil
	}
	return s.FeatureFlag
}

func (s *SequenceAttributeSchemas) GetGroup() *string {
	if s == nil {
		return nil
	}
	return s.Group
}

func (s *SequenceAttributeSchemas) GetHasPrimary() *bool {
	if s == nil {
		return nil
	}
	return s.HasPrimary
}

func (s *SequenceAttributeSchemas) GetHidden() *bool {
	if s == nil {
		return nil
	}
	return s.Hidden
}

func (s *SequenceAttributeSchemas) GetHideLabel() *bool {
	if s == nil {
		return nil
	}
	return s.HideLabel
}

func (s *SequenceAttributeSchemas) GetIcon() *string {
	if s == nil {
		return nil
	}
	return s.Icon
}

func (s *SequenceAttributeSchemas) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SequenceAttributeSchemas) GetInfoHelpers() *SchemasSequenceAttributeInfoHelpers {
	if s == nil {
		return nil
	}
	return s.InfoHelpers
}

func (s *SequenceAttributeSchemas) GetLabel() string {
	if s == nil {
		return ""
	}
	return s.Label
}

func (s *SequenceAttributeSchemas) GetLayout() *string {
	if s == nil {
		return nil
	}
	return s.Layout
}

func (s *SequenceAttributeSchemas) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SequenceAttributeSchemas) GetOrder() *int64 {
	if s == nil {
		return nil
	}
	return s.Order
}

func (s *SequenceAttributeSchemas) GetPlaceholder() *string {
	if s == nil {
		return nil
	}
	return s.Placeholder
}

func (s *SequenceAttributeSchemas) GetPrefix() *string {
	if s == nil {
		return nil
	}
	return s.Prefix
}

func (s *SequenceAttributeSchemas) GetPreviewValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.PreviewValueFormatter
}

func (s *SequenceAttributeSchemas) GetProtected() *bool {
	if s == nil {
		return nil
	}
	return s.Protected
}

func (s *SequenceAttributeSchemas) GetReadonly() *bool {
	if s == nil {
		return nil
	}
	return s.Readonly
}

func (s *SequenceAttributeSchemas) GetRenderCondition() *string {
	if s == nil {
		return nil
	}
	return s.RenderCondition
}

func (s *SequenceAttributeSchemas) GetRepeatable() *bool {
	if s == nil {
		return nil
	}
	return s.Repeatable
}

func (s *SequenceAttributeSchemas) GetRequired() *bool {
	if s == nil {
		return nil
	}
	return s.Required
}

func (s *SequenceAttributeSchemas) GetSchema() *string {
	if s == nil {
		return nil
	}
	return s.Schema
}

func (s *SequenceAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if s == nil {
		return nil
	}
	return s.SettingsFlag
}

func (s *SequenceAttributeSchemas) GetShowInTable() *bool {
	if s == nil {
		return nil
	}
	return s.ShowInTable
}

func (s *SequenceAttributeSchemas) GetSortable() *bool {
	if s == nil {
		return nil
	}
	return s.Sortable
}

func (s *SequenceAttributeSchemas) GetStartNumber() *int64 {
	if s == nil {
		return nil
	}
	return s.StartNumber
}

func (s *SequenceAttributeSchemas) GetType() SchemasSequenceAttributeType {
	if s == nil {
		return SchemasSequenceAttributeType("")
	}
	return s.Type
}

func (s *SequenceAttributeSchemas) GetValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.ValueFormatter
}

// SchemasStatusAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasStatusAttributeConstraints struct {
}

func (s SchemasStatusAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasStatusAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasStatusAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasStatusAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasStatusAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasStatusAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasStatusAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasStatusAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasStatusAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasStatusAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type Schemas2 struct {
	// The displayed title of the option
	Title *string `json:"title,omitempty"`
	// The stored value of the option
	Value string `json:"value"`
}

func (s Schemas2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Schemas2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (s *Schemas2) GetTitle() *string {
	if s == nil {
		return nil
	}
	return s.Title
}

func (s *Schemas2) GetValue() string {
	if s == nil {
		return ""
	}
	return s.Value
}

type SchemasStatusAttributeOptionsType string

const (
	SchemasStatusAttributeOptionsTypeStr      SchemasStatusAttributeOptionsType = "str"
	SchemasStatusAttributeOptionsTypeSchemas2 SchemasStatusAttributeOptionsType = "Schemas_2"
)

type SchemasStatusAttributeOptions struct {
	Str      *string   `queryParam:"inline" name:"options"`
	Schemas2 *Schemas2 `queryParam:"inline" name:"options"`

	Type SchemasStatusAttributeOptionsType
}

func CreateSchemasStatusAttributeOptionsStr(str string) SchemasStatusAttributeOptions {
	typ := SchemasStatusAttributeOptionsTypeStr

	return SchemasStatusAttributeOptions{
		Str:  &str,
		Type: typ,
	}
}

func CreateSchemasStatusAttributeOptionsSchemas2(schemas2 Schemas2) SchemasStatusAttributeOptions {
	typ := SchemasStatusAttributeOptionsTypeSchemas2

	return SchemasStatusAttributeOptions{
		Schemas2: &schemas2,
		Type:     typ,
	}
}

func (u *SchemasStatusAttributeOptions) UnmarshalJSON(data []byte) error {

	var schemas2 Schemas2 = Schemas2{}
	if err := utils.UnmarshalJSON(data, &schemas2, "", true, nil); err == nil {
		u.Schemas2 = &schemas2
		u.Type = SchemasStatusAttributeOptionsTypeSchemas2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = SchemasStatusAttributeOptionsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SchemasStatusAttributeOptions", string(data))
}

func (u SchemasStatusAttributeOptions) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Schemas2 != nil {
		return utils.MarshalJSON(u.Schemas2, "", true)
	}

	return nil, errors.New("could not marshal union type SchemasStatusAttributeOptions: all fields are null")
}

type SchemasStatusAttributeType string

const (
	SchemasStatusAttributeTypeStatus SchemasStatusAttributeType = "status"
)

func (e SchemasStatusAttributeType) ToPointer() *SchemasStatusAttributeType {
	return &e
}
func (e *SchemasStatusAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "status":
		*e = SchemasStatusAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasStatusAttributeType: %v", v)
	}
}

// StatusAttributeSchemas - Status select
type StatusAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasStatusAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                `json:"default_value,omitempty"`
	Deprecated   *bool                              `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasStatusAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                             `json:"label"`
	Layout      *string                            `json:"layout,omitempty"`
	Name        string                             `json:"name"`
	Options     []*SchemasStatusAttributeOptions   `json:"options,omitempty"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                      `default:"true" json:"sortable"`
	Type           SchemasStatusAttributeType `json:"type"`
	ValueFormatter *string                    `json:"value_formatter,omitempty"`
}

func (s StatusAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StatusAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (s *StatusAttributeSchemas) GetManifest() []string {
	if s == nil {
		return nil
	}
	return s.Manifest
}

func (s *StatusAttributeSchemas) GetPurpose() []string {
	if s == nil {
		return nil
	}
	return s.Purpose
}

func (s *StatusAttributeSchemas) GetCompositeID() *string {
	if s == nil {
		return nil
	}
	return s.CompositeID
}

func (s *StatusAttributeSchemas) GetConstraints() *SchemasStatusAttributeConstraints {
	if s == nil {
		return nil
	}
	return s.Constraints
}

func (s *StatusAttributeSchemas) GetDefaultValue() any {
	if s == nil {
		return nil
	}
	return s.DefaultValue
}

func (s *StatusAttributeSchemas) GetDeprecated() *bool {
	if s == nil {
		return nil
	}
	return s.Deprecated
}

func (s *StatusAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if s == nil {
		return nil
	}
	return s.EntityBuilderDisableEdit
}

func (s *StatusAttributeSchemas) GetFeatureFlag() *string {
	if s == nil {
		return nil
	}
	return s.FeatureFlag
}

func (s *StatusAttributeSchemas) GetGroup() *string {
	if s == nil {
		return nil
	}
	return s.Group
}

func (s *StatusAttributeSchemas) GetHasPrimary() *bool {
	if s == nil {
		return nil
	}
	return s.HasPrimary
}

func (s *StatusAttributeSchemas) GetHidden() *bool {
	if s == nil {
		return nil
	}
	return s.Hidden
}

func (s *StatusAttributeSchemas) GetHideLabel() *bool {
	if s == nil {
		return nil
	}
	return s.HideLabel
}

func (s *StatusAttributeSchemas) GetIcon() *string {
	if s == nil {
		return nil
	}
	return s.Icon
}

func (s *StatusAttributeSchemas) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *StatusAttributeSchemas) GetInfoHelpers() *SchemasStatusAttributeInfoHelpers {
	if s == nil {
		return nil
	}
	return s.InfoHelpers
}

func (s *StatusAttributeSchemas) GetLabel() string {
	if s == nil {
		return ""
	}
	return s.Label
}

func (s *StatusAttributeSchemas) GetLayout() *string {
	if s == nil {
		return nil
	}
	return s.Layout
}

func (s *StatusAttributeSchemas) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *StatusAttributeSchemas) GetOptions() []*SchemasStatusAttributeOptions {
	if s == nil {
		return nil
	}
	return s.Options
}

func (s *StatusAttributeSchemas) GetOrder() *int64 {
	if s == nil {
		return nil
	}
	return s.Order
}

func (s *StatusAttributeSchemas) GetPlaceholder() *string {
	if s == nil {
		return nil
	}
	return s.Placeholder
}

func (s *StatusAttributeSchemas) GetPreviewValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.PreviewValueFormatter
}

func (s *StatusAttributeSchemas) GetProtected() *bool {
	if s == nil {
		return nil
	}
	return s.Protected
}

func (s *StatusAttributeSchemas) GetReadonly() *bool {
	if s == nil {
		return nil
	}
	return s.Readonly
}

func (s *StatusAttributeSchemas) GetRenderCondition() *string {
	if s == nil {
		return nil
	}
	return s.RenderCondition
}

func (s *StatusAttributeSchemas) GetRepeatable() *bool {
	if s == nil {
		return nil
	}
	return s.Repeatable
}

func (s *StatusAttributeSchemas) GetRequired() *bool {
	if s == nil {
		return nil
	}
	return s.Required
}

func (s *StatusAttributeSchemas) GetSchema() *string {
	if s == nil {
		return nil
	}
	return s.Schema
}

func (s *StatusAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if s == nil {
		return nil
	}
	return s.SettingsFlag
}

func (s *StatusAttributeSchemas) GetShowInTable() *bool {
	if s == nil {
		return nil
	}
	return s.ShowInTable
}

func (s *StatusAttributeSchemas) GetSortable() *bool {
	if s == nil {
		return nil
	}
	return s.Sortable
}

func (s *StatusAttributeSchemas) GetType() SchemasStatusAttributeType {
	if s == nil {
		return SchemasStatusAttributeType("")
	}
	return s.Type
}

func (s *StatusAttributeSchemas) GetValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.ValueFormatter
}

// SchemasMultiSelectAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasMultiSelectAttributeConstraints struct {
}

func (s SchemasMultiSelectAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasMultiSelectAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasMultiSelectAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasMultiSelectAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasMultiSelectAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasMultiSelectAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasMultiSelectAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasMultiSelectAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasMultiSelectAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasMultiSelectAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type Two struct {
	Title *string `json:"title,omitempty"`
	Value string  `json:"value"`
}

func (t Two) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Two) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (t *Two) GetTitle() *string {
	if t == nil {
		return nil
	}
	return t.Title
}

func (t *Two) GetValue() string {
	if t == nil {
		return ""
	}
	return t.Value
}

type OptionsObjType string

const (
	OptionsObjTypeStr OptionsObjType = "str"
	OptionsObjTypeTwo OptionsObjType = "2"
)

type OptionsObj struct {
	Str *string `queryParam:"inline" name:"options"`
	Two *Two    `queryParam:"inline" name:"options"`

	Type OptionsObjType
}

func CreateOptionsObjStr(str string) OptionsObj {
	typ := OptionsObjTypeStr

	return OptionsObj{
		Str:  &str,
		Type: typ,
	}
}

func CreateOptionsObjTwo(two Two) OptionsObj {
	typ := OptionsObjTypeTwo

	return OptionsObj{
		Two:  &two,
		Type: typ,
	}
}

func (u *OptionsObj) UnmarshalJSON(data []byte) error {

	var two Two = Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, nil); err == nil {
		u.Two = &two
		u.Type = OptionsObjTypeTwo
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = OptionsObjTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OptionsObj", string(data))
}

func (u OptionsObj) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type OptionsObj: all fields are null")
}

type SchemasMultiSelectAttributeType string

const (
	SchemasMultiSelectAttributeTypeMultiselect SchemasMultiSelectAttributeType = "multiselect"
	SchemasMultiSelectAttributeTypeCheckbox    SchemasMultiSelectAttributeType = "checkbox"
)

func (e SchemasMultiSelectAttributeType) ToPointer() *SchemasMultiSelectAttributeType {
	return &e
}
func (e *SchemasMultiSelectAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "multiselect":
		fallthrough
	case "checkbox":
		*e = SchemasMultiSelectAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasMultiSelectAttributeType: %v", v)
	}
}

// MultiSelectAttributeSchemas - Multi Choice Selection
type MultiSelectAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// Allow arbitrary input values in addition to provided options
	AllowAny *bool `json:"allow_any,omitempty"`
	// controls if the 360 ui will allow the user to enter a value which is not defined by the options
	AllowExtraOptions *bool   `json:"allow_extra_options,omitempty"`
	CompositeID       *string `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasMultiSelectAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                     `json:"default_value,omitempty"`
	Deprecated   *bool                                   `default:"false" json:"deprecated"`
	// controls if the matching of values against the options is case sensitive or not
	DisableCaseSensitive *bool `json:"disable_case_sensitive,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasMultiSelectAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                  `json:"label"`
	Layout      *string                                 `json:"layout,omitempty"`
	Name        string                                  `json:"name"`
	Options     []*OptionsObj                           `json:"options,omitempty"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                           `default:"true" json:"sortable"`
	Type           SchemasMultiSelectAttributeType `json:"type"`
	ValueFormatter *string                         `json:"value_formatter,omitempty"`
}

func (m MultiSelectAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MultiSelectAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (m *MultiSelectAttributeSchemas) GetManifest() []string {
	if m == nil {
		return nil
	}
	return m.Manifest
}

func (m *MultiSelectAttributeSchemas) GetPurpose() []string {
	if m == nil {
		return nil
	}
	return m.Purpose
}

func (m *MultiSelectAttributeSchemas) GetAllowAny() *bool {
	if m == nil {
		return nil
	}
	return m.AllowAny
}

func (m *MultiSelectAttributeSchemas) GetAllowExtraOptions() *bool {
	if m == nil {
		return nil
	}
	return m.AllowExtraOptions
}

func (m *MultiSelectAttributeSchemas) GetCompositeID() *string {
	if m == nil {
		return nil
	}
	return m.CompositeID
}

func (m *MultiSelectAttributeSchemas) GetConstraints() *SchemasMultiSelectAttributeConstraints {
	if m == nil {
		return nil
	}
	return m.Constraints
}

func (m *MultiSelectAttributeSchemas) GetDefaultValue() any {
	if m == nil {
		return nil
	}
	return m.DefaultValue
}

func (m *MultiSelectAttributeSchemas) GetDeprecated() *bool {
	if m == nil {
		return nil
	}
	return m.Deprecated
}

func (m *MultiSelectAttributeSchemas) GetDisableCaseSensitive() *bool {
	if m == nil {
		return nil
	}
	return m.DisableCaseSensitive
}

func (m *MultiSelectAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if m == nil {
		return nil
	}
	return m.EntityBuilderDisableEdit
}

func (m *MultiSelectAttributeSchemas) GetFeatureFlag() *string {
	if m == nil {
		return nil
	}
	return m.FeatureFlag
}

func (m *MultiSelectAttributeSchemas) GetGroup() *string {
	if m == nil {
		return nil
	}
	return m.Group
}

func (m *MultiSelectAttributeSchemas) GetHasPrimary() *bool {
	if m == nil {
		return nil
	}
	return m.HasPrimary
}

func (m *MultiSelectAttributeSchemas) GetHidden() *bool {
	if m == nil {
		return nil
	}
	return m.Hidden
}

func (m *MultiSelectAttributeSchemas) GetHideLabel() *bool {
	if m == nil {
		return nil
	}
	return m.HideLabel
}

func (m *MultiSelectAttributeSchemas) GetIcon() *string {
	if m == nil {
		return nil
	}
	return m.Icon
}

func (m *MultiSelectAttributeSchemas) GetID() *string {
	if m == nil {
		return nil
	}
	return m.ID
}

func (m *MultiSelectAttributeSchemas) GetInfoHelpers() *SchemasMultiSelectAttributeInfoHelpers {
	if m == nil {
		return nil
	}
	return m.InfoHelpers
}

func (m *MultiSelectAttributeSchemas) GetLabel() string {
	if m == nil {
		return ""
	}
	return m.Label
}

func (m *MultiSelectAttributeSchemas) GetLayout() *string {
	if m == nil {
		return nil
	}
	return m.Layout
}

func (m *MultiSelectAttributeSchemas) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MultiSelectAttributeSchemas) GetOptions() []*OptionsObj {
	if m == nil {
		return nil
	}
	return m.Options
}

func (m *MultiSelectAttributeSchemas) GetOrder() *int64 {
	if m == nil {
		return nil
	}
	return m.Order
}

func (m *MultiSelectAttributeSchemas) GetPlaceholder() *string {
	if m == nil {
		return nil
	}
	return m.Placeholder
}

func (m *MultiSelectAttributeSchemas) GetPreviewValueFormatter() *string {
	if m == nil {
		return nil
	}
	return m.PreviewValueFormatter
}

func (m *MultiSelectAttributeSchemas) GetProtected() *bool {
	if m == nil {
		return nil
	}
	return m.Protected
}

func (m *MultiSelectAttributeSchemas) GetReadonly() *bool {
	if m == nil {
		return nil
	}
	return m.Readonly
}

func (m *MultiSelectAttributeSchemas) GetRenderCondition() *string {
	if m == nil {
		return nil
	}
	return m.RenderCondition
}

func (m *MultiSelectAttributeSchemas) GetRepeatable() *bool {
	if m == nil {
		return nil
	}
	return m.Repeatable
}

func (m *MultiSelectAttributeSchemas) GetRequired() *bool {
	if m == nil {
		return nil
	}
	return m.Required
}

func (m *MultiSelectAttributeSchemas) GetSchema() *string {
	if m == nil {
		return nil
	}
	return m.Schema
}

func (m *MultiSelectAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if m == nil {
		return nil
	}
	return m.SettingsFlag
}

func (m *MultiSelectAttributeSchemas) GetShowInTable() *bool {
	if m == nil {
		return nil
	}
	return m.ShowInTable
}

func (m *MultiSelectAttributeSchemas) GetSortable() *bool {
	if m == nil {
		return nil
	}
	return m.Sortable
}

func (m *MultiSelectAttributeSchemas) GetType() SchemasMultiSelectAttributeType {
	if m == nil {
		return SchemasMultiSelectAttributeType("")
	}
	return m.Type
}

func (m *MultiSelectAttributeSchemas) GetValueFormatter() *string {
	if m == nil {
		return nil
	}
	return m.ValueFormatter
}

// SchemasSelectAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasSelectAttributeConstraints struct {
}

func (s SchemasSelectAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasSelectAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasSelectAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasSelectAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasSelectAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasSelectAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasSelectAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasSelectAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasSelectAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasSelectAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type Schemas1 struct {
	Title *string `json:"title,omitempty"`
	Value string  `json:"value"`
}

func (s Schemas1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Schemas1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (s *Schemas1) GetTitle() *string {
	if s == nil {
		return nil
	}
	return s.Title
}

func (s *Schemas1) GetValue() string {
	if s == nil {
		return ""
	}
	return s.Value
}

type SchemasOptionsType string

const (
	SchemasOptionsTypeSchemas1 SchemasOptionsType = "Schemas_1"
	SchemasOptionsTypeStr      SchemasOptionsType = "str"
)

type SchemasOptions struct {
	Schemas1 *Schemas1 `queryParam:"inline" name:"options"`
	Str      *string   `queryParam:"inline" name:"options"`

	Type SchemasOptionsType
}

func CreateSchemasOptionsSchemas1(schemas1 Schemas1) SchemasOptions {
	typ := SchemasOptionsTypeSchemas1

	return SchemasOptions{
		Schemas1: &schemas1,
		Type:     typ,
	}
}

func CreateSchemasOptionsStr(str string) SchemasOptions {
	typ := SchemasOptionsTypeStr

	return SchemasOptions{
		Str:  &str,
		Type: typ,
	}
}

func (u *SchemasOptions) UnmarshalJSON(data []byte) error {

	var schemas1 Schemas1 = Schemas1{}
	if err := utils.UnmarshalJSON(data, &schemas1, "", true, nil); err == nil {
		u.Schemas1 = &schemas1
		u.Type = SchemasOptionsTypeSchemas1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = SchemasOptionsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SchemasOptions", string(data))
}

func (u SchemasOptions) MarshalJSON() ([]byte, error) {
	if u.Schemas1 != nil {
		return utils.MarshalJSON(u.Schemas1, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type SchemasOptions: all fields are null")
}

type SchemasSelectAttributeType string

const (
	SchemasSelectAttributeTypeSelect SchemasSelectAttributeType = "select"
	SchemasSelectAttributeTypeRadio  SchemasSelectAttributeType = "radio"
)

func (e SchemasSelectAttributeType) ToPointer() *SchemasSelectAttributeType {
	return &e
}
func (e *SchemasSelectAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "select":
		fallthrough
	case "radio":
		*e = SchemasSelectAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasSelectAttributeType: %v", v)
	}
}

// SelectAttributeSchemas - Dropdown select
type SelectAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// Allow arbitrary input values in addition to provided options
	AllowAny    *bool   `json:"allow_any,omitempty"`
	CompositeID *string `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasSelectAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                `json:"default_value,omitempty"`
	Deprecated   *bool                              `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasSelectAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                             `json:"label"`
	Layout      *string                            `json:"layout,omitempty"`
	Name        string                             `json:"name"`
	Options     []*SchemasOptions                  `json:"options,omitempty"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                      `default:"true" json:"sortable"`
	Type           SchemasSelectAttributeType `json:"type"`
	ValueFormatter *string                    `json:"value_formatter,omitempty"`
}

func (s SelectAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SelectAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (s *SelectAttributeSchemas) GetManifest() []string {
	if s == nil {
		return nil
	}
	return s.Manifest
}

func (s *SelectAttributeSchemas) GetPurpose() []string {
	if s == nil {
		return nil
	}
	return s.Purpose
}

func (s *SelectAttributeSchemas) GetAllowAny() *bool {
	if s == nil {
		return nil
	}
	return s.AllowAny
}

func (s *SelectAttributeSchemas) GetCompositeID() *string {
	if s == nil {
		return nil
	}
	return s.CompositeID
}

func (s *SelectAttributeSchemas) GetConstraints() *SchemasSelectAttributeConstraints {
	if s == nil {
		return nil
	}
	return s.Constraints
}

func (s *SelectAttributeSchemas) GetDefaultValue() any {
	if s == nil {
		return nil
	}
	return s.DefaultValue
}

func (s *SelectAttributeSchemas) GetDeprecated() *bool {
	if s == nil {
		return nil
	}
	return s.Deprecated
}

func (s *SelectAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if s == nil {
		return nil
	}
	return s.EntityBuilderDisableEdit
}

func (s *SelectAttributeSchemas) GetFeatureFlag() *string {
	if s == nil {
		return nil
	}
	return s.FeatureFlag
}

func (s *SelectAttributeSchemas) GetGroup() *string {
	if s == nil {
		return nil
	}
	return s.Group
}

func (s *SelectAttributeSchemas) GetHasPrimary() *bool {
	if s == nil {
		return nil
	}
	return s.HasPrimary
}

func (s *SelectAttributeSchemas) GetHidden() *bool {
	if s == nil {
		return nil
	}
	return s.Hidden
}

func (s *SelectAttributeSchemas) GetHideLabel() *bool {
	if s == nil {
		return nil
	}
	return s.HideLabel
}

func (s *SelectAttributeSchemas) GetIcon() *string {
	if s == nil {
		return nil
	}
	return s.Icon
}

func (s *SelectAttributeSchemas) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SelectAttributeSchemas) GetInfoHelpers() *SchemasSelectAttributeInfoHelpers {
	if s == nil {
		return nil
	}
	return s.InfoHelpers
}

func (s *SelectAttributeSchemas) GetLabel() string {
	if s == nil {
		return ""
	}
	return s.Label
}

func (s *SelectAttributeSchemas) GetLayout() *string {
	if s == nil {
		return nil
	}
	return s.Layout
}

func (s *SelectAttributeSchemas) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SelectAttributeSchemas) GetOptions() []*SchemasOptions {
	if s == nil {
		return nil
	}
	return s.Options
}

func (s *SelectAttributeSchemas) GetOrder() *int64 {
	if s == nil {
		return nil
	}
	return s.Order
}

func (s *SelectAttributeSchemas) GetPlaceholder() *string {
	if s == nil {
		return nil
	}
	return s.Placeholder
}

func (s *SelectAttributeSchemas) GetPreviewValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.PreviewValueFormatter
}

func (s *SelectAttributeSchemas) GetProtected() *bool {
	if s == nil {
		return nil
	}
	return s.Protected
}

func (s *SelectAttributeSchemas) GetReadonly() *bool {
	if s == nil {
		return nil
	}
	return s.Readonly
}

func (s *SelectAttributeSchemas) GetRenderCondition() *string {
	if s == nil {
		return nil
	}
	return s.RenderCondition
}

func (s *SelectAttributeSchemas) GetRepeatable() *bool {
	if s == nil {
		return nil
	}
	return s.Repeatable
}

func (s *SelectAttributeSchemas) GetRequired() *bool {
	if s == nil {
		return nil
	}
	return s.Required
}

func (s *SelectAttributeSchemas) GetSchema() *string {
	if s == nil {
		return nil
	}
	return s.Schema
}

func (s *SelectAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if s == nil {
		return nil
	}
	return s.SettingsFlag
}

func (s *SelectAttributeSchemas) GetShowInTable() *bool {
	if s == nil {
		return nil
	}
	return s.ShowInTable
}

func (s *SelectAttributeSchemas) GetSortable() *bool {
	if s == nil {
		return nil
	}
	return s.Sortable
}

func (s *SelectAttributeSchemas) GetType() SchemasSelectAttributeType {
	if s == nil {
		return SchemasSelectAttributeType("")
	}
	return s.Type
}

func (s *SelectAttributeSchemas) GetValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.ValueFormatter
}

// SchemasBooleanAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasBooleanAttributeConstraints struct {
}

func (s SchemasBooleanAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasBooleanAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

type DisplayType string

const (
	DisplayTypeSwitch   DisplayType = "switch"
	DisplayTypeCheckbox DisplayType = "checkbox"
)

func (e DisplayType) ToPointer() *DisplayType {
	return &e
}
func (e *DisplayType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "switch":
		fallthrough
	case "checkbox":
		*e = DisplayType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisplayType: %v", v)
	}
}

// SchemasBooleanAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasBooleanAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasBooleanAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasBooleanAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasBooleanAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasBooleanAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasBooleanAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasBooleanAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasBooleanAttributeType string

const (
	SchemasBooleanAttributeTypeBoolean SchemasBooleanAttributeType = "boolean"
)

func (e SchemasBooleanAttributeType) ToPointer() *SchemasBooleanAttributeType {
	return &e
}
func (e *SchemasBooleanAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		*e = SchemasBooleanAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasBooleanAttributeType: %v", v)
	}
}

// BooleanAttributeSchemas - Yes / No Toggle
type BooleanAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasBooleanAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                 `json:"default_value,omitempty"`
	Deprecated   *bool                               `default:"false" json:"deprecated"`
	DisplayType  *DisplayType                        `default:"switch" json:"display_type"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasBooleanAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                              `json:"label"`
	Layout      *string                             `json:"layout,omitempty"`
	Name        string                              `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                       `default:"true" json:"sortable"`
	Type           SchemasBooleanAttributeType `json:"type"`
	ValueFormatter *string                     `json:"value_formatter,omitempty"`
}

func (b BooleanAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BooleanAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (b *BooleanAttributeSchemas) GetManifest() []string {
	if b == nil {
		return nil
	}
	return b.Manifest
}

func (b *BooleanAttributeSchemas) GetPurpose() []string {
	if b == nil {
		return nil
	}
	return b.Purpose
}

func (b *BooleanAttributeSchemas) GetCompositeID() *string {
	if b == nil {
		return nil
	}
	return b.CompositeID
}

func (b *BooleanAttributeSchemas) GetConstraints() *SchemasBooleanAttributeConstraints {
	if b == nil {
		return nil
	}
	return b.Constraints
}

func (b *BooleanAttributeSchemas) GetDefaultValue() any {
	if b == nil {
		return nil
	}
	return b.DefaultValue
}

func (b *BooleanAttributeSchemas) GetDeprecated() *bool {
	if b == nil {
		return nil
	}
	return b.Deprecated
}

func (b *BooleanAttributeSchemas) GetDisplayType() *DisplayType {
	if b == nil {
		return nil
	}
	return b.DisplayType
}

func (b *BooleanAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if b == nil {
		return nil
	}
	return b.EntityBuilderDisableEdit
}

func (b *BooleanAttributeSchemas) GetFeatureFlag() *string {
	if b == nil {
		return nil
	}
	return b.FeatureFlag
}

func (b *BooleanAttributeSchemas) GetGroup() *string {
	if b == nil {
		return nil
	}
	return b.Group
}

func (b *BooleanAttributeSchemas) GetHasPrimary() *bool {
	if b == nil {
		return nil
	}
	return b.HasPrimary
}

func (b *BooleanAttributeSchemas) GetHidden() *bool {
	if b == nil {
		return nil
	}
	return b.Hidden
}

func (b *BooleanAttributeSchemas) GetHideLabel() *bool {
	if b == nil {
		return nil
	}
	return b.HideLabel
}

func (b *BooleanAttributeSchemas) GetIcon() *string {
	if b == nil {
		return nil
	}
	return b.Icon
}

func (b *BooleanAttributeSchemas) GetID() *string {
	if b == nil {
		return nil
	}
	return b.ID
}

func (b *BooleanAttributeSchemas) GetInfoHelpers() *SchemasBooleanAttributeInfoHelpers {
	if b == nil {
		return nil
	}
	return b.InfoHelpers
}

func (b *BooleanAttributeSchemas) GetLabel() string {
	if b == nil {
		return ""
	}
	return b.Label
}

func (b *BooleanAttributeSchemas) GetLayout() *string {
	if b == nil {
		return nil
	}
	return b.Layout
}

func (b *BooleanAttributeSchemas) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *BooleanAttributeSchemas) GetOrder() *int64 {
	if b == nil {
		return nil
	}
	return b.Order
}

func (b *BooleanAttributeSchemas) GetPlaceholder() *string {
	if b == nil {
		return nil
	}
	return b.Placeholder
}

func (b *BooleanAttributeSchemas) GetPreviewValueFormatter() *string {
	if b == nil {
		return nil
	}
	return b.PreviewValueFormatter
}

func (b *BooleanAttributeSchemas) GetProtected() *bool {
	if b == nil {
		return nil
	}
	return b.Protected
}

func (b *BooleanAttributeSchemas) GetReadonly() *bool {
	if b == nil {
		return nil
	}
	return b.Readonly
}

func (b *BooleanAttributeSchemas) GetRenderCondition() *string {
	if b == nil {
		return nil
	}
	return b.RenderCondition
}

func (b *BooleanAttributeSchemas) GetRepeatable() *bool {
	if b == nil {
		return nil
	}
	return b.Repeatable
}

func (b *BooleanAttributeSchemas) GetRequired() *bool {
	if b == nil {
		return nil
	}
	return b.Required
}

func (b *BooleanAttributeSchemas) GetSchema() *string {
	if b == nil {
		return nil
	}
	return b.Schema
}

func (b *BooleanAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if b == nil {
		return nil
	}
	return b.SettingsFlag
}

func (b *BooleanAttributeSchemas) GetShowInTable() *bool {
	if b == nil {
		return nil
	}
	return b.ShowInTable
}

func (b *BooleanAttributeSchemas) GetSortable() *bool {
	if b == nil {
		return nil
	}
	return b.Sortable
}

func (b *BooleanAttributeSchemas) GetType() SchemasBooleanAttributeType {
	if b == nil {
		return SchemasBooleanAttributeType("")
	}
	return b.Type
}

func (b *BooleanAttributeSchemas) GetValueFormatter() *string {
	if b == nil {
		return nil
	}
	return b.ValueFormatter
}

// SchemasCountryAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasCountryAttributeConstraints struct {
}

func (s SchemasCountryAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasCountryAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasCountryAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasCountryAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasCountryAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasCountryAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasCountryAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasCountryAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasCountryAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasCountryAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasCountryAttributeType string

const (
	SchemasCountryAttributeTypeCountry SchemasCountryAttributeType = "country"
)

func (e SchemasCountryAttributeType) ToPointer() *SchemasCountryAttributeType {
	return &e
}
func (e *SchemasCountryAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "country":
		*e = SchemasCountryAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasCountryAttributeType: %v", v)
	}
}

// CountryAttributeSchemas - Country picker
type CountryAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasCountryAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                 `json:"default_value,omitempty"`
	Deprecated   *bool                               `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasCountryAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                              `json:"label"`
	Layout      *string                             `json:"layout,omitempty"`
	Name        string                              `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                       `default:"true" json:"sortable"`
	Type           SchemasCountryAttributeType `json:"type"`
	ValueFormatter *string                     `json:"value_formatter,omitempty"`
}

func (c CountryAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CountryAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (c *CountryAttributeSchemas) GetManifest() []string {
	if c == nil {
		return nil
	}
	return c.Manifest
}

func (c *CountryAttributeSchemas) GetPurpose() []string {
	if c == nil {
		return nil
	}
	return c.Purpose
}

func (c *CountryAttributeSchemas) GetCompositeID() *string {
	if c == nil {
		return nil
	}
	return c.CompositeID
}

func (c *CountryAttributeSchemas) GetConstraints() *SchemasCountryAttributeConstraints {
	if c == nil {
		return nil
	}
	return c.Constraints
}

func (c *CountryAttributeSchemas) GetDefaultValue() any {
	if c == nil {
		return nil
	}
	return c.DefaultValue
}

func (c *CountryAttributeSchemas) GetDeprecated() *bool {
	if c == nil {
		return nil
	}
	return c.Deprecated
}

func (c *CountryAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if c == nil {
		return nil
	}
	return c.EntityBuilderDisableEdit
}

func (c *CountryAttributeSchemas) GetFeatureFlag() *string {
	if c == nil {
		return nil
	}
	return c.FeatureFlag
}

func (c *CountryAttributeSchemas) GetGroup() *string {
	if c == nil {
		return nil
	}
	return c.Group
}

func (c *CountryAttributeSchemas) GetHasPrimary() *bool {
	if c == nil {
		return nil
	}
	return c.HasPrimary
}

func (c *CountryAttributeSchemas) GetHidden() *bool {
	if c == nil {
		return nil
	}
	return c.Hidden
}

func (c *CountryAttributeSchemas) GetHideLabel() *bool {
	if c == nil {
		return nil
	}
	return c.HideLabel
}

func (c *CountryAttributeSchemas) GetIcon() *string {
	if c == nil {
		return nil
	}
	return c.Icon
}

func (c *CountryAttributeSchemas) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CountryAttributeSchemas) GetInfoHelpers() *SchemasCountryAttributeInfoHelpers {
	if c == nil {
		return nil
	}
	return c.InfoHelpers
}

func (c *CountryAttributeSchemas) GetLabel() string {
	if c == nil {
		return ""
	}
	return c.Label
}

func (c *CountryAttributeSchemas) GetLayout() *string {
	if c == nil {
		return nil
	}
	return c.Layout
}

func (c *CountryAttributeSchemas) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CountryAttributeSchemas) GetOrder() *int64 {
	if c == nil {
		return nil
	}
	return c.Order
}

func (c *CountryAttributeSchemas) GetPlaceholder() *string {
	if c == nil {
		return nil
	}
	return c.Placeholder
}

func (c *CountryAttributeSchemas) GetPreviewValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.PreviewValueFormatter
}

func (c *CountryAttributeSchemas) GetProtected() *bool {
	if c == nil {
		return nil
	}
	return c.Protected
}

func (c *CountryAttributeSchemas) GetReadonly() *bool {
	if c == nil {
		return nil
	}
	return c.Readonly
}

func (c *CountryAttributeSchemas) GetRenderCondition() *string {
	if c == nil {
		return nil
	}
	return c.RenderCondition
}

func (c *CountryAttributeSchemas) GetRepeatable() *bool {
	if c == nil {
		return nil
	}
	return c.Repeatable
}

func (c *CountryAttributeSchemas) GetRequired() *bool {
	if c == nil {
		return nil
	}
	return c.Required
}

func (c *CountryAttributeSchemas) GetSchema() *string {
	if c == nil {
		return nil
	}
	return c.Schema
}

func (c *CountryAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if c == nil {
		return nil
	}
	return c.SettingsFlag
}

func (c *CountryAttributeSchemas) GetShowInTable() *bool {
	if c == nil {
		return nil
	}
	return c.ShowInTable
}

func (c *CountryAttributeSchemas) GetSortable() *bool {
	if c == nil {
		return nil
	}
	return c.Sortable
}

func (c *CountryAttributeSchemas) GetType() SchemasCountryAttributeType {
	if c == nil {
		return SchemasCountryAttributeType("")
	}
	return c.Type
}

func (c *CountryAttributeSchemas) GetValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.ValueFormatter
}

// SchemasDateAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasDateAttributeConstraints struct {
}

func (s SchemasDateAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasDateAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasDateAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasDateAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasDateAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasDateAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasDateAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasDateAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasDateAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasDateAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasDateAttributeType string

const (
	SchemasDateAttributeTypeDate     SchemasDateAttributeType = "date"
	SchemasDateAttributeTypeDatetime SchemasDateAttributeType = "datetime"
)

func (e SchemasDateAttributeType) ToPointer() *SchemasDateAttributeType {
	return &e
}
func (e *SchemasDateAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		fallthrough
	case "datetime":
		*e = SchemasDateAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasDateAttributeType: %v", v)
	}
}

// DateAttributeSchemas - Date or Datetime picker
type DateAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasDateAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                              `json:"default_value,omitempty"`
	Deprecated   *bool                            `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasDateAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                           `json:"label"`
	Layout      *string                          `json:"layout,omitempty"`
	Name        string                           `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                    `default:"true" json:"sortable"`
	Type           SchemasDateAttributeType `json:"type"`
	ValueFormatter *string                  `json:"value_formatter,omitempty"`
}

func (d DateAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DateAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (d *DateAttributeSchemas) GetManifest() []string {
	if d == nil {
		return nil
	}
	return d.Manifest
}

func (d *DateAttributeSchemas) GetPurpose() []string {
	if d == nil {
		return nil
	}
	return d.Purpose
}

func (d *DateAttributeSchemas) GetCompositeID() *string {
	if d == nil {
		return nil
	}
	return d.CompositeID
}

func (d *DateAttributeSchemas) GetConstraints() *SchemasDateAttributeConstraints {
	if d == nil {
		return nil
	}
	return d.Constraints
}

func (d *DateAttributeSchemas) GetDefaultValue() any {
	if d == nil {
		return nil
	}
	return d.DefaultValue
}

func (d *DateAttributeSchemas) GetDeprecated() *bool {
	if d == nil {
		return nil
	}
	return d.Deprecated
}

func (d *DateAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if d == nil {
		return nil
	}
	return d.EntityBuilderDisableEdit
}

func (d *DateAttributeSchemas) GetFeatureFlag() *string {
	if d == nil {
		return nil
	}
	return d.FeatureFlag
}

func (d *DateAttributeSchemas) GetGroup() *string {
	if d == nil {
		return nil
	}
	return d.Group
}

func (d *DateAttributeSchemas) GetHasPrimary() *bool {
	if d == nil {
		return nil
	}
	return d.HasPrimary
}

func (d *DateAttributeSchemas) GetHidden() *bool {
	if d == nil {
		return nil
	}
	return d.Hidden
}

func (d *DateAttributeSchemas) GetHideLabel() *bool {
	if d == nil {
		return nil
	}
	return d.HideLabel
}

func (d *DateAttributeSchemas) GetIcon() *string {
	if d == nil {
		return nil
	}
	return d.Icon
}

func (d *DateAttributeSchemas) GetID() *string {
	if d == nil {
		return nil
	}
	return d.ID
}

func (d *DateAttributeSchemas) GetInfoHelpers() *SchemasDateAttributeInfoHelpers {
	if d == nil {
		return nil
	}
	return d.InfoHelpers
}

func (d *DateAttributeSchemas) GetLabel() string {
	if d == nil {
		return ""
	}
	return d.Label
}

func (d *DateAttributeSchemas) GetLayout() *string {
	if d == nil {
		return nil
	}
	return d.Layout
}

func (d *DateAttributeSchemas) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DateAttributeSchemas) GetOrder() *int64 {
	if d == nil {
		return nil
	}
	return d.Order
}

func (d *DateAttributeSchemas) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DateAttributeSchemas) GetPreviewValueFormatter() *string {
	if d == nil {
		return nil
	}
	return d.PreviewValueFormatter
}

func (d *DateAttributeSchemas) GetProtected() *bool {
	if d == nil {
		return nil
	}
	return d.Protected
}

func (d *DateAttributeSchemas) GetReadonly() *bool {
	if d == nil {
		return nil
	}
	return d.Readonly
}

func (d *DateAttributeSchemas) GetRenderCondition() *string {
	if d == nil {
		return nil
	}
	return d.RenderCondition
}

func (d *DateAttributeSchemas) GetRepeatable() *bool {
	if d == nil {
		return nil
	}
	return d.Repeatable
}

func (d *DateAttributeSchemas) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DateAttributeSchemas) GetSchema() *string {
	if d == nil {
		return nil
	}
	return d.Schema
}

func (d *DateAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if d == nil {
		return nil
	}
	return d.SettingsFlag
}

func (d *DateAttributeSchemas) GetShowInTable() *bool {
	if d == nil {
		return nil
	}
	return d.ShowInTable
}

func (d *DateAttributeSchemas) GetSortable() *bool {
	if d == nil {
		return nil
	}
	return d.Sortable
}

func (d *DateAttributeSchemas) GetType() SchemasDateAttributeType {
	if d == nil {
		return SchemasDateAttributeType("")
	}
	return d.Type
}

func (d *DateAttributeSchemas) GetValueFormatter() *string {
	if d == nil {
		return nil
	}
	return d.ValueFormatter
}

// SchemasLinkAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasLinkAttributeConstraints struct {
}

func (s SchemasLinkAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasLinkAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasLinkAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasLinkAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasLinkAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasLinkAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasLinkAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasLinkAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasLinkAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasLinkAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasLinkAttributeType string

const (
	SchemasLinkAttributeTypeLink SchemasLinkAttributeType = "link"
)

func (e SchemasLinkAttributeType) ToPointer() *SchemasLinkAttributeType {
	return &e
}
func (e *SchemasLinkAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "link":
		*e = SchemasLinkAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasLinkAttributeType: %v", v)
	}
}

// LinkAttributeSchemas - Link with title and href
type LinkAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasLinkAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                              `json:"default_value,omitempty"`
	Deprecated   *bool                            `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasLinkAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                           `json:"label"`
	Layout      *string                          `json:"layout,omitempty"`
	Name        string                           `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                    `default:"true" json:"sortable"`
	Type           SchemasLinkAttributeType `json:"type"`
	ValueFormatter *string                  `json:"value_formatter,omitempty"`
}

func (l LinkAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LinkAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (l *LinkAttributeSchemas) GetManifest() []string {
	if l == nil {
		return nil
	}
	return l.Manifest
}

func (l *LinkAttributeSchemas) GetPurpose() []string {
	if l == nil {
		return nil
	}
	return l.Purpose
}

func (l *LinkAttributeSchemas) GetCompositeID() *string {
	if l == nil {
		return nil
	}
	return l.CompositeID
}

func (l *LinkAttributeSchemas) GetConstraints() *SchemasLinkAttributeConstraints {
	if l == nil {
		return nil
	}
	return l.Constraints
}

func (l *LinkAttributeSchemas) GetDefaultValue() any {
	if l == nil {
		return nil
	}
	return l.DefaultValue
}

func (l *LinkAttributeSchemas) GetDeprecated() *bool {
	if l == nil {
		return nil
	}
	return l.Deprecated
}

func (l *LinkAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if l == nil {
		return nil
	}
	return l.EntityBuilderDisableEdit
}

func (l *LinkAttributeSchemas) GetFeatureFlag() *string {
	if l == nil {
		return nil
	}
	return l.FeatureFlag
}

func (l *LinkAttributeSchemas) GetGroup() *string {
	if l == nil {
		return nil
	}
	return l.Group
}

func (l *LinkAttributeSchemas) GetHasPrimary() *bool {
	if l == nil {
		return nil
	}
	return l.HasPrimary
}

func (l *LinkAttributeSchemas) GetHidden() *bool {
	if l == nil {
		return nil
	}
	return l.Hidden
}

func (l *LinkAttributeSchemas) GetHideLabel() *bool {
	if l == nil {
		return nil
	}
	return l.HideLabel
}

func (l *LinkAttributeSchemas) GetIcon() *string {
	if l == nil {
		return nil
	}
	return l.Icon
}

func (l *LinkAttributeSchemas) GetID() *string {
	if l == nil {
		return nil
	}
	return l.ID
}

func (l *LinkAttributeSchemas) GetInfoHelpers() *SchemasLinkAttributeInfoHelpers {
	if l == nil {
		return nil
	}
	return l.InfoHelpers
}

func (l *LinkAttributeSchemas) GetLabel() string {
	if l == nil {
		return ""
	}
	return l.Label
}

func (l *LinkAttributeSchemas) GetLayout() *string {
	if l == nil {
		return nil
	}
	return l.Layout
}

func (l *LinkAttributeSchemas) GetName() string {
	if l == nil {
		return ""
	}
	return l.Name
}

func (l *LinkAttributeSchemas) GetOrder() *int64 {
	if l == nil {
		return nil
	}
	return l.Order
}

func (l *LinkAttributeSchemas) GetPlaceholder() *string {
	if l == nil {
		return nil
	}
	return l.Placeholder
}

func (l *LinkAttributeSchemas) GetPreviewValueFormatter() *string {
	if l == nil {
		return nil
	}
	return l.PreviewValueFormatter
}

func (l *LinkAttributeSchemas) GetProtected() *bool {
	if l == nil {
		return nil
	}
	return l.Protected
}

func (l *LinkAttributeSchemas) GetReadonly() *bool {
	if l == nil {
		return nil
	}
	return l.Readonly
}

func (l *LinkAttributeSchemas) GetRenderCondition() *string {
	if l == nil {
		return nil
	}
	return l.RenderCondition
}

func (l *LinkAttributeSchemas) GetRepeatable() *bool {
	if l == nil {
		return nil
	}
	return l.Repeatable
}

func (l *LinkAttributeSchemas) GetRequired() *bool {
	if l == nil {
		return nil
	}
	return l.Required
}

func (l *LinkAttributeSchemas) GetSchema() *string {
	if l == nil {
		return nil
	}
	return l.Schema
}

func (l *LinkAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if l == nil {
		return nil
	}
	return l.SettingsFlag
}

func (l *LinkAttributeSchemas) GetShowInTable() *bool {
	if l == nil {
		return nil
	}
	return l.ShowInTable
}

func (l *LinkAttributeSchemas) GetSortable() *bool {
	if l == nil {
		return nil
	}
	return l.Sortable
}

func (l *LinkAttributeSchemas) GetType() SchemasLinkAttributeType {
	if l == nil {
		return SchemasLinkAttributeType("")
	}
	return l.Type
}

func (l *LinkAttributeSchemas) GetValueFormatter() *string {
	if l == nil {
		return nil
	}
	return l.ValueFormatter
}

// SchemasTextAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type SchemasTextAttributeConstraints struct {
}

func (s SchemasTextAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasTextAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// SchemasTextAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type SchemasTextAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s SchemasTextAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasTextAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SchemasTextAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *SchemasTextAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *SchemasTextAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *SchemasTextAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type SchemasRowsType string

const (
	SchemasRowsTypeInteger SchemasRowsType = "integer"
	SchemasRowsTypeStr     SchemasRowsType = "str"
)

// SchemasRows - Number of rows for rich_text textarea
type SchemasRows struct {
	Integer *int64  `queryParam:"inline" name:"rows"`
	Str     *string `queryParam:"inline" name:"rows"`

	Type SchemasRowsType
}

func CreateSchemasRowsInteger(integer int64) SchemasRows {
	typ := SchemasRowsTypeInteger

	return SchemasRows{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateSchemasRowsStr(str string) SchemasRows {
	typ := SchemasRowsTypeStr

	return SchemasRows{
		Str:  &str,
		Type: typ,
	}
}

func (u *SchemasRows) UnmarshalJSON(data []byte) error {

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, nil); err == nil {
		u.Integer = &integer
		u.Type = SchemasRowsTypeInteger
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = SchemasRowsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SchemasRows", string(data))
}

func (u SchemasRows) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type SchemasRows: all fields are null")
}

type SchemasTextAttributeType string

const (
	SchemasTextAttributeTypeString SchemasTextAttributeType = "string"
)

func (e SchemasTextAttributeType) ToPointer() *SchemasTextAttributeType {
	return &e
}
func (e *SchemasTextAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		*e = SchemasTextAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasTextAttributeType: %v", v)
	}
}

// TextAttributeSchemas - Textarea or text input
type TextAttributeSchemas struct {
	// Manifest ID used to create/update the schema attribute
	Manifest    []string `json:"_manifest,omitempty"`
	Purpose     []string `json:"_purpose,omitempty"`
	CompositeID *string  `json:"composite_id,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasTextAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                              `json:"default_value,omitempty"`
	Deprecated   *bool                            `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasTextAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                           `json:"label"`
	Layout      *string                          `json:"layout,omitempty"`
	Multiline   *bool                            `json:"multiline,omitempty"`
	Name        string                           `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	RichText   *bool `json:"rich_text,omitempty"`
	// Number of rows for rich_text textarea
	Rows *SchemasRows `json:"rows,omitempty"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                    `default:"true" json:"sortable"`
	Type           SchemasTextAttributeType `json:"type"`
	ValueFormatter *string                  `json:"value_formatter,omitempty"`
}

func (t TextAttributeSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TextAttributeSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (t *TextAttributeSchemas) GetManifest() []string {
	if t == nil {
		return nil
	}
	return t.Manifest
}

func (t *TextAttributeSchemas) GetPurpose() []string {
	if t == nil {
		return nil
	}
	return t.Purpose
}

func (t *TextAttributeSchemas) GetCompositeID() *string {
	if t == nil {
		return nil
	}
	return t.CompositeID
}

func (t *TextAttributeSchemas) GetConstraints() *SchemasTextAttributeConstraints {
	if t == nil {
		return nil
	}
	return t.Constraints
}

func (t *TextAttributeSchemas) GetDefaultValue() any {
	if t == nil {
		return nil
	}
	return t.DefaultValue
}

func (t *TextAttributeSchemas) GetDeprecated() *bool {
	if t == nil {
		return nil
	}
	return t.Deprecated
}

func (t *TextAttributeSchemas) GetEntityBuilderDisableEdit() *bool {
	if t == nil {
		return nil
	}
	return t.EntityBuilderDisableEdit
}

func (t *TextAttributeSchemas) GetFeatureFlag() *string {
	if t == nil {
		return nil
	}
	return t.FeatureFlag
}

func (t *TextAttributeSchemas) GetGroup() *string {
	if t == nil {
		return nil
	}
	return t.Group
}

func (t *TextAttributeSchemas) GetHasPrimary() *bool {
	if t == nil {
		return nil
	}
	return t.HasPrimary
}

func (t *TextAttributeSchemas) GetHidden() *bool {
	if t == nil {
		return nil
	}
	return t.Hidden
}

func (t *TextAttributeSchemas) GetHideLabel() *bool {
	if t == nil {
		return nil
	}
	return t.HideLabel
}

func (t *TextAttributeSchemas) GetIcon() *string {
	if t == nil {
		return nil
	}
	return t.Icon
}

func (t *TextAttributeSchemas) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TextAttributeSchemas) GetInfoHelpers() *SchemasTextAttributeInfoHelpers {
	if t == nil {
		return nil
	}
	return t.InfoHelpers
}

func (t *TextAttributeSchemas) GetLabel() string {
	if t == nil {
		return ""
	}
	return t.Label
}

func (t *TextAttributeSchemas) GetLayout() *string {
	if t == nil {
		return nil
	}
	return t.Layout
}

func (t *TextAttributeSchemas) GetMultiline() *bool {
	if t == nil {
		return nil
	}
	return t.Multiline
}

func (t *TextAttributeSchemas) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *TextAttributeSchemas) GetOrder() *int64 {
	if t == nil {
		return nil
	}
	return t.Order
}

func (t *TextAttributeSchemas) GetPlaceholder() *string {
	if t == nil {
		return nil
	}
	return t.Placeholder
}

func (t *TextAttributeSchemas) GetPreviewValueFormatter() *string {
	if t == nil {
		return nil
	}
	return t.PreviewValueFormatter
}

func (t *TextAttributeSchemas) GetProtected() *bool {
	if t == nil {
		return nil
	}
	return t.Protected
}

func (t *TextAttributeSchemas) GetReadonly() *bool {
	if t == nil {
		return nil
	}
	return t.Readonly
}

func (t *TextAttributeSchemas) GetRenderCondition() *string {
	if t == nil {
		return nil
	}
	return t.RenderCondition
}

func (t *TextAttributeSchemas) GetRepeatable() *bool {
	if t == nil {
		return nil
	}
	return t.Repeatable
}

func (t *TextAttributeSchemas) GetRequired() *bool {
	if t == nil {
		return nil
	}
	return t.Required
}

func (t *TextAttributeSchemas) GetRichText() *bool {
	if t == nil {
		return nil
	}
	return t.RichText
}

func (t *TextAttributeSchemas) GetRows() *SchemasRows {
	if t == nil {
		return nil
	}
	return t.Rows
}

func (t *TextAttributeSchemas) GetSchema() *string {
	if t == nil {
		return nil
	}
	return t.Schema
}

func (t *TextAttributeSchemas) GetSettingsFlag() []SettingFlag {
	if t == nil {
		return nil
	}
	return t.SettingsFlag
}

func (t *TextAttributeSchemas) GetShowInTable() *bool {
	if t == nil {
		return nil
	}
	return t.ShowInTable
}

func (t *TextAttributeSchemas) GetSortable() *bool {
	if t == nil {
		return nil
	}
	return t.Sortable
}

func (t *TextAttributeSchemas) GetType() SchemasTextAttributeType {
	if t == nil {
		return SchemasTextAttributeType("")
	}
	return t.Type
}

func (t *TextAttributeSchemas) GetValueFormatter() *string {
	if t == nil {
		return nil
	}
	return t.ValueFormatter
}

type AttributeWithCompositeIDType string

const (
	AttributeWithCompositeIDTypeTextAttributeSchemas                  AttributeWithCompositeIDType = "TextAttribute_Schemas"
	AttributeWithCompositeIDTypeLinkAttributeSchemas                  AttributeWithCompositeIDType = "LinkAttribute_Schemas"
	AttributeWithCompositeIDTypeDateAttributeSchemas                  AttributeWithCompositeIDType = "DateAttribute_Schemas"
	AttributeWithCompositeIDTypeCountryAttributeSchemas               AttributeWithCompositeIDType = "CountryAttribute_Schemas"
	AttributeWithCompositeIDTypeBooleanAttributeSchemas               AttributeWithCompositeIDType = "BooleanAttribute_Schemas"
	AttributeWithCompositeIDTypeSelectAttributeSchemas                AttributeWithCompositeIDType = "SelectAttribute_Schemas"
	AttributeWithCompositeIDTypeMultiSelectAttributeSchemas           AttributeWithCompositeIDType = "MultiSelectAttribute_Schemas"
	AttributeWithCompositeIDTypeStatusAttributeSchemas                AttributeWithCompositeIDType = "StatusAttribute_Schemas"
	AttributeWithCompositeIDTypeSequenceAttributeSchemas              AttributeWithCompositeIDType = "SequenceAttribute_Schemas"
	AttributeWithCompositeIDTypeRelationAttributeSchemas              AttributeWithCompositeIDType = "RelationAttribute_Schemas"
	AttributeWithCompositeIDTypeUserRelationAttributeSchemas          AttributeWithCompositeIDType = "UserRelationAttribute_Schemas"
	AttributeWithCompositeIDTypeSchemas                               AttributeWithCompositeIDType = "Schemas"
	AttributeWithCompositeIDTypeAddressRelationAttributeSchemas       AttributeWithCompositeIDType = "AddressRelationAttribute_Schemas"
	AttributeWithCompositeIDTypePaymentMethodRelationAttributeSchemas AttributeWithCompositeIDType = "PaymentMethodRelationAttribute_Schemas"
	AttributeWithCompositeIDTypeCurrencyAttributeSchemas              AttributeWithCompositeIDType = "CurrencyAttribute_Schemas"
	AttributeWithCompositeIDTypeTagsAttributeSchemas                  AttributeWithCompositeIDType = "TagsAttribute_Schemas"
	AttributeWithCompositeIDTypeMessageEmailAddressAttributeSchemas   AttributeWithCompositeIDType = "MessageEmailAddressAttribute_Schemas"
	AttributeWithCompositeIDTypeNumberAttributeSchemas                AttributeWithCompositeIDType = "NumberAttribute_Schemas"
	AttributeWithCompositeIDTypeConsentAttributeSchemas               AttributeWithCompositeIDType = "ConsentAttribute_Schemas"
	AttributeWithCompositeIDTypeInternalAttributeSchemas              AttributeWithCompositeIDType = "InternalAttribute_Schemas"
	AttributeWithCompositeIDTypeOrderedListAttributeSchemas           AttributeWithCompositeIDType = "OrderedListAttribute_Schemas"
	AttributeWithCompositeIDTypeFileAttributeSchemas                  AttributeWithCompositeIDType = "FileAttribute_Schemas"
	AttributeWithCompositeIDTypeComputedAttributeSchemas              AttributeWithCompositeIDType = "ComputedAttribute_Schemas"
	AttributeWithCompositeIDTypePartnerStatusAttributeSchemas         AttributeWithCompositeIDType = "PartnerStatusAttribute_Schemas"
	AttributeWithCompositeIDTypeInvitationEmailAttributeSchemas       AttributeWithCompositeIDType = "InvitationEmailAttribute_Schemas"
	AttributeWithCompositeIDTypeAutomationAttributeSchemas            AttributeWithCompositeIDType = "AutomationAttribute_Schemas"
	AttributeWithCompositeIDTypeInternalUserAttributeSchemas          AttributeWithCompositeIDType = "InternalUserAttribute_Schemas"
	AttributeWithCompositeIDTypePurposeAttributeSchemas               AttributeWithCompositeIDType = "PurposeAttribute_Schemas"
	AttributeWithCompositeIDTypePartnerOrganisationAttributeSchemas   AttributeWithCompositeIDType = "PartnerOrganisationAttribute_Schemas"
	AttributeWithCompositeIDTypePortalAccessAttributeSchemas          AttributeWithCompositeIDType = "PortalAccessAttribute_Schemas"
	AttributeWithCompositeIDTypePhoneAttributeSchemas                 AttributeWithCompositeIDType = "PhoneAttribute_Schemas"
	AttributeWithCompositeIDTypeEmailAttributeSchemas                 AttributeWithCompositeIDType = "EmailAttribute_Schemas"
	AttributeWithCompositeIDTypePaymentAttributeSchemas               AttributeWithCompositeIDType = "PaymentAttribute_Schemas"
	AttributeWithCompositeIDTypePriceComponentAttributeSchemas        AttributeWithCompositeIDType = "PriceComponentAttribute_Schemas"
)

// AttributeWithCompositeID - a readonly computed ID for the attribute including schema slug and the attribute ID
type AttributeWithCompositeID struct {
	TextAttributeSchemas                  *TextAttributeSchemas                  `queryParam:"inline" name:"AttributeWithCompositeID"`
	LinkAttributeSchemas                  *LinkAttributeSchemas                  `queryParam:"inline" name:"AttributeWithCompositeID"`
	DateAttributeSchemas                  *DateAttributeSchemas                  `queryParam:"inline" name:"AttributeWithCompositeID"`
	CountryAttributeSchemas               *CountryAttributeSchemas               `queryParam:"inline" name:"AttributeWithCompositeID"`
	BooleanAttributeSchemas               *BooleanAttributeSchemas               `queryParam:"inline" name:"AttributeWithCompositeID"`
	SelectAttributeSchemas                *SelectAttributeSchemas                `queryParam:"inline" name:"AttributeWithCompositeID"`
	MultiSelectAttributeSchemas           *MultiSelectAttributeSchemas           `queryParam:"inline" name:"AttributeWithCompositeID"`
	StatusAttributeSchemas                *StatusAttributeSchemas                `queryParam:"inline" name:"AttributeWithCompositeID"`
	SequenceAttributeSchemas              *SequenceAttributeSchemas              `queryParam:"inline" name:"AttributeWithCompositeID"`
	RelationAttributeSchemas              *RelationAttributeSchemas              `queryParam:"inline" name:"AttributeWithCompositeID"`
	UserRelationAttributeSchemas          *UserRelationAttributeSchemas          `queryParam:"inline" name:"AttributeWithCompositeID"`
	Schemas                               *Schemas                               `queryParam:"inline" name:"AttributeWithCompositeID"`
	AddressRelationAttributeSchemas       *AddressRelationAttributeSchemas       `queryParam:"inline" name:"AttributeWithCompositeID"`
	PaymentMethodRelationAttributeSchemas *PaymentMethodRelationAttributeSchemas `queryParam:"inline" name:"AttributeWithCompositeID"`
	CurrencyAttributeSchemas              *CurrencyAttributeSchemas              `queryParam:"inline" name:"AttributeWithCompositeID"`
	TagsAttributeSchemas                  *TagsAttributeSchemas                  `queryParam:"inline" name:"AttributeWithCompositeID"`
	MessageEmailAddressAttributeSchemas   *MessageEmailAddressAttributeSchemas   `queryParam:"inline" name:"AttributeWithCompositeID"`
	NumberAttributeSchemas                *NumberAttributeSchemas                `queryParam:"inline" name:"AttributeWithCompositeID"`
	ConsentAttributeSchemas               *ConsentAttributeSchemas               `queryParam:"inline" name:"AttributeWithCompositeID"`
	InternalAttributeSchemas              *InternalAttributeSchemas              `queryParam:"inline" name:"AttributeWithCompositeID"`
	OrderedListAttributeSchemas           *OrderedListAttributeSchemas           `queryParam:"inline" name:"AttributeWithCompositeID"`
	FileAttributeSchemas                  *FileAttributeSchemas                  `queryParam:"inline" name:"AttributeWithCompositeID"`
	ComputedAttributeSchemas              *ComputedAttributeSchemas              `queryParam:"inline" name:"AttributeWithCompositeID"`
	PartnerStatusAttributeSchemas         *PartnerStatusAttributeSchemas         `queryParam:"inline" name:"AttributeWithCompositeID"`
	InvitationEmailAttributeSchemas       *InvitationEmailAttributeSchemas       `queryParam:"inline" name:"AttributeWithCompositeID"`
	AutomationAttributeSchemas            *AutomationAttributeSchemas            `queryParam:"inline" name:"AttributeWithCompositeID"`
	InternalUserAttributeSchemas          *InternalUserAttributeSchemas          `queryParam:"inline" name:"AttributeWithCompositeID"`
	PurposeAttributeSchemas               *PurposeAttributeSchemas               `queryParam:"inline" name:"AttributeWithCompositeID"`
	PartnerOrganisationAttributeSchemas   *PartnerOrganisationAttributeSchemas   `queryParam:"inline" name:"AttributeWithCompositeID"`
	PortalAccessAttributeSchemas          *PortalAccessAttributeSchemas          `queryParam:"inline" name:"AttributeWithCompositeID"`
	PhoneAttributeSchemas                 *PhoneAttributeSchemas                 `queryParam:"inline" name:"AttributeWithCompositeID"`
	EmailAttributeSchemas                 *EmailAttributeSchemas                 `queryParam:"inline" name:"AttributeWithCompositeID"`
	PaymentAttributeSchemas               *PaymentAttributeSchemas               `queryParam:"inline" name:"AttributeWithCompositeID"`
	PriceComponentAttributeSchemas        *PriceComponentAttributeSchemas        `queryParam:"inline" name:"AttributeWithCompositeID"`

	Type AttributeWithCompositeIDType
}

func CreateAttributeWithCompositeIDTextAttributeSchemas(textAttributeSchemas TextAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeTextAttributeSchemas

	return AttributeWithCompositeID{
		TextAttributeSchemas: &textAttributeSchemas,
		Type:                 typ,
	}
}

func CreateAttributeWithCompositeIDLinkAttributeSchemas(linkAttributeSchemas LinkAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeLinkAttributeSchemas

	return AttributeWithCompositeID{
		LinkAttributeSchemas: &linkAttributeSchemas,
		Type:                 typ,
	}
}

func CreateAttributeWithCompositeIDDateAttributeSchemas(dateAttributeSchemas DateAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeDateAttributeSchemas

	return AttributeWithCompositeID{
		DateAttributeSchemas: &dateAttributeSchemas,
		Type:                 typ,
	}
}

func CreateAttributeWithCompositeIDCountryAttributeSchemas(countryAttributeSchemas CountryAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeCountryAttributeSchemas

	return AttributeWithCompositeID{
		CountryAttributeSchemas: &countryAttributeSchemas,
		Type:                    typ,
	}
}

func CreateAttributeWithCompositeIDBooleanAttributeSchemas(booleanAttributeSchemas BooleanAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeBooleanAttributeSchemas

	return AttributeWithCompositeID{
		BooleanAttributeSchemas: &booleanAttributeSchemas,
		Type:                    typ,
	}
}

func CreateAttributeWithCompositeIDSelectAttributeSchemas(selectAttributeSchemas SelectAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeSelectAttributeSchemas

	return AttributeWithCompositeID{
		SelectAttributeSchemas: &selectAttributeSchemas,
		Type:                   typ,
	}
}

func CreateAttributeWithCompositeIDMultiSelectAttributeSchemas(multiSelectAttributeSchemas MultiSelectAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeMultiSelectAttributeSchemas

	return AttributeWithCompositeID{
		MultiSelectAttributeSchemas: &multiSelectAttributeSchemas,
		Type:                        typ,
	}
}

func CreateAttributeWithCompositeIDStatusAttributeSchemas(statusAttributeSchemas StatusAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeStatusAttributeSchemas

	return AttributeWithCompositeID{
		StatusAttributeSchemas: &statusAttributeSchemas,
		Type:                   typ,
	}
}

func CreateAttributeWithCompositeIDSequenceAttributeSchemas(sequenceAttributeSchemas SequenceAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeSequenceAttributeSchemas

	return AttributeWithCompositeID{
		SequenceAttributeSchemas: &sequenceAttributeSchemas,
		Type:                     typ,
	}
}

func CreateAttributeWithCompositeIDRelationAttributeSchemas(relationAttributeSchemas RelationAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeRelationAttributeSchemas

	return AttributeWithCompositeID{
		RelationAttributeSchemas: &relationAttributeSchemas,
		Type:                     typ,
	}
}

func CreateAttributeWithCompositeIDUserRelationAttributeSchemas(userRelationAttributeSchemas UserRelationAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeUserRelationAttributeSchemas

	return AttributeWithCompositeID{
		UserRelationAttributeSchemas: &userRelationAttributeSchemas,
		Type:                         typ,
	}
}

func CreateAttributeWithCompositeIDSchemas(schemas Schemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeSchemas

	return AttributeWithCompositeID{
		Schemas: &schemas,
		Type:    typ,
	}
}

func CreateAttributeWithCompositeIDAddressRelationAttributeSchemas(addressRelationAttributeSchemas AddressRelationAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAddressRelationAttributeSchemas

	return AttributeWithCompositeID{
		AddressRelationAttributeSchemas: &addressRelationAttributeSchemas,
		Type:                            typ,
	}
}

func CreateAttributeWithCompositeIDPaymentMethodRelationAttributeSchemas(paymentMethodRelationAttributeSchemas PaymentMethodRelationAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypePaymentMethodRelationAttributeSchemas

	return AttributeWithCompositeID{
		PaymentMethodRelationAttributeSchemas: &paymentMethodRelationAttributeSchemas,
		Type:                                  typ,
	}
}

func CreateAttributeWithCompositeIDCurrencyAttributeSchemas(currencyAttributeSchemas CurrencyAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeCurrencyAttributeSchemas

	return AttributeWithCompositeID{
		CurrencyAttributeSchemas: &currencyAttributeSchemas,
		Type:                     typ,
	}
}

func CreateAttributeWithCompositeIDTagsAttributeSchemas(tagsAttributeSchemas TagsAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeTagsAttributeSchemas

	return AttributeWithCompositeID{
		TagsAttributeSchemas: &tagsAttributeSchemas,
		Type:                 typ,
	}
}

func CreateAttributeWithCompositeIDMessageEmailAddressAttributeSchemas(messageEmailAddressAttributeSchemas MessageEmailAddressAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeMessageEmailAddressAttributeSchemas

	return AttributeWithCompositeID{
		MessageEmailAddressAttributeSchemas: &messageEmailAddressAttributeSchemas,
		Type:                                typ,
	}
}

func CreateAttributeWithCompositeIDNumberAttributeSchemas(numberAttributeSchemas NumberAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeNumberAttributeSchemas

	return AttributeWithCompositeID{
		NumberAttributeSchemas: &numberAttributeSchemas,
		Type:                   typ,
	}
}

func CreateAttributeWithCompositeIDConsentAttributeSchemas(consentAttributeSchemas ConsentAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeConsentAttributeSchemas

	return AttributeWithCompositeID{
		ConsentAttributeSchemas: &consentAttributeSchemas,
		Type:                    typ,
	}
}

func CreateAttributeWithCompositeIDInternalAttributeSchemas(internalAttributeSchemas InternalAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeInternalAttributeSchemas

	return AttributeWithCompositeID{
		InternalAttributeSchemas: &internalAttributeSchemas,
		Type:                     typ,
	}
}

func CreateAttributeWithCompositeIDOrderedListAttributeSchemas(orderedListAttributeSchemas OrderedListAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeOrderedListAttributeSchemas

	return AttributeWithCompositeID{
		OrderedListAttributeSchemas: &orderedListAttributeSchemas,
		Type:                        typ,
	}
}

func CreateAttributeWithCompositeIDFileAttributeSchemas(fileAttributeSchemas FileAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeFileAttributeSchemas

	return AttributeWithCompositeID{
		FileAttributeSchemas: &fileAttributeSchemas,
		Type:                 typ,
	}
}

func CreateAttributeWithCompositeIDComputedAttributeSchemas(computedAttributeSchemas ComputedAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeComputedAttributeSchemas

	return AttributeWithCompositeID{
		ComputedAttributeSchemas: &computedAttributeSchemas,
		Type:                     typ,
	}
}

func CreateAttributeWithCompositeIDPartnerStatusAttributeSchemas(partnerStatusAttributeSchemas PartnerStatusAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypePartnerStatusAttributeSchemas

	return AttributeWithCompositeID{
		PartnerStatusAttributeSchemas: &partnerStatusAttributeSchemas,
		Type:                          typ,
	}
}

func CreateAttributeWithCompositeIDInvitationEmailAttributeSchemas(invitationEmailAttributeSchemas InvitationEmailAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeInvitationEmailAttributeSchemas

	return AttributeWithCompositeID{
		InvitationEmailAttributeSchemas: &invitationEmailAttributeSchemas,
		Type:                            typ,
	}
}

func CreateAttributeWithCompositeIDAutomationAttributeSchemas(automationAttributeSchemas AutomationAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeAutomationAttributeSchemas

	return AttributeWithCompositeID{
		AutomationAttributeSchemas: &automationAttributeSchemas,
		Type:                       typ,
	}
}

func CreateAttributeWithCompositeIDInternalUserAttributeSchemas(internalUserAttributeSchemas InternalUserAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeInternalUserAttributeSchemas

	return AttributeWithCompositeID{
		InternalUserAttributeSchemas: &internalUserAttributeSchemas,
		Type:                         typ,
	}
}

func CreateAttributeWithCompositeIDPurposeAttributeSchemas(purposeAttributeSchemas PurposeAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypePurposeAttributeSchemas

	return AttributeWithCompositeID{
		PurposeAttributeSchemas: &purposeAttributeSchemas,
		Type:                    typ,
	}
}

func CreateAttributeWithCompositeIDPartnerOrganisationAttributeSchemas(partnerOrganisationAttributeSchemas PartnerOrganisationAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypePartnerOrganisationAttributeSchemas

	return AttributeWithCompositeID{
		PartnerOrganisationAttributeSchemas: &partnerOrganisationAttributeSchemas,
		Type:                                typ,
	}
}

func CreateAttributeWithCompositeIDPortalAccessAttributeSchemas(portalAccessAttributeSchemas PortalAccessAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypePortalAccessAttributeSchemas

	return AttributeWithCompositeID{
		PortalAccessAttributeSchemas: &portalAccessAttributeSchemas,
		Type:                         typ,
	}
}

func CreateAttributeWithCompositeIDPhoneAttributeSchemas(phoneAttributeSchemas PhoneAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypePhoneAttributeSchemas

	return AttributeWithCompositeID{
		PhoneAttributeSchemas: &phoneAttributeSchemas,
		Type:                  typ,
	}
}

func CreateAttributeWithCompositeIDEmailAttributeSchemas(emailAttributeSchemas EmailAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypeEmailAttributeSchemas

	return AttributeWithCompositeID{
		EmailAttributeSchemas: &emailAttributeSchemas,
		Type:                  typ,
	}
}

func CreateAttributeWithCompositeIDPaymentAttributeSchemas(paymentAttributeSchemas PaymentAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypePaymentAttributeSchemas

	return AttributeWithCompositeID{
		PaymentAttributeSchemas: &paymentAttributeSchemas,
		Type:                    typ,
	}
}

func CreateAttributeWithCompositeIDPriceComponentAttributeSchemas(priceComponentAttributeSchemas PriceComponentAttributeSchemas) AttributeWithCompositeID {
	typ := AttributeWithCompositeIDTypePriceComponentAttributeSchemas

	return AttributeWithCompositeID{
		PriceComponentAttributeSchemas: &priceComponentAttributeSchemas,
		Type:                           typ,
	}
}

func (u *AttributeWithCompositeID) UnmarshalJSON(data []byte) error {

	var currencyAttributeSchemas CurrencyAttributeSchemas = CurrencyAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &currencyAttributeSchemas, "", true, nil); err == nil {
		u.CurrencyAttributeSchemas = &currencyAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeCurrencyAttributeSchemas
		return nil
	}

	var consentAttributeSchemas ConsentAttributeSchemas = ConsentAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &consentAttributeSchemas, "", true, nil); err == nil {
		u.ConsentAttributeSchemas = &consentAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeConsentAttributeSchemas
		return nil
	}

	var computedAttributeSchemas ComputedAttributeSchemas = ComputedAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &computedAttributeSchemas, "", true, nil); err == nil {
		u.ComputedAttributeSchemas = &computedAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeComputedAttributeSchemas
		return nil
	}

	var textAttributeSchemas TextAttributeSchemas = TextAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &textAttributeSchemas, "", true, nil); err == nil {
		u.TextAttributeSchemas = &textAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeTextAttributeSchemas
		return nil
	}

	var linkAttributeSchemas LinkAttributeSchemas = LinkAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &linkAttributeSchemas, "", true, nil); err == nil {
		u.LinkAttributeSchemas = &linkAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeLinkAttributeSchemas
		return nil
	}

	var dateAttributeSchemas DateAttributeSchemas = DateAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &dateAttributeSchemas, "", true, nil); err == nil {
		u.DateAttributeSchemas = &dateAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeDateAttributeSchemas
		return nil
	}

	var countryAttributeSchemas CountryAttributeSchemas = CountryAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &countryAttributeSchemas, "", true, nil); err == nil {
		u.CountryAttributeSchemas = &countryAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeCountryAttributeSchemas
		return nil
	}

	var booleanAttributeSchemas BooleanAttributeSchemas = BooleanAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &booleanAttributeSchemas, "", true, nil); err == nil {
		u.BooleanAttributeSchemas = &booleanAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeBooleanAttributeSchemas
		return nil
	}

	var selectAttributeSchemas SelectAttributeSchemas = SelectAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &selectAttributeSchemas, "", true, nil); err == nil {
		u.SelectAttributeSchemas = &selectAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeSelectAttributeSchemas
		return nil
	}

	var multiSelectAttributeSchemas MultiSelectAttributeSchemas = MultiSelectAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &multiSelectAttributeSchemas, "", true, nil); err == nil {
		u.MultiSelectAttributeSchemas = &multiSelectAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeMultiSelectAttributeSchemas
		return nil
	}

	var statusAttributeSchemas StatusAttributeSchemas = StatusAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &statusAttributeSchemas, "", true, nil); err == nil {
		u.StatusAttributeSchemas = &statusAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeStatusAttributeSchemas
		return nil
	}

	var sequenceAttributeSchemas SequenceAttributeSchemas = SequenceAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &sequenceAttributeSchemas, "", true, nil); err == nil {
		u.SequenceAttributeSchemas = &sequenceAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeSequenceAttributeSchemas
		return nil
	}

	var relationAttributeSchemas RelationAttributeSchemas = RelationAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &relationAttributeSchemas, "", true, nil); err == nil {
		u.RelationAttributeSchemas = &relationAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeRelationAttributeSchemas
		return nil
	}

	var userRelationAttributeSchemas UserRelationAttributeSchemas = UserRelationAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &userRelationAttributeSchemas, "", true, nil); err == nil {
		u.UserRelationAttributeSchemas = &userRelationAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeUserRelationAttributeSchemas
		return nil
	}

	var schemas Schemas = Schemas{}
	if err := utils.UnmarshalJSON(data, &schemas, "", true, nil); err == nil {
		u.Schemas = &schemas
		u.Type = AttributeWithCompositeIDTypeSchemas
		return nil
	}

	var addressRelationAttributeSchemas AddressRelationAttributeSchemas = AddressRelationAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &addressRelationAttributeSchemas, "", true, nil); err == nil {
		u.AddressRelationAttributeSchemas = &addressRelationAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeAddressRelationAttributeSchemas
		return nil
	}

	var paymentMethodRelationAttributeSchemas PaymentMethodRelationAttributeSchemas = PaymentMethodRelationAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &paymentMethodRelationAttributeSchemas, "", true, nil); err == nil {
		u.PaymentMethodRelationAttributeSchemas = &paymentMethodRelationAttributeSchemas
		u.Type = AttributeWithCompositeIDTypePaymentMethodRelationAttributeSchemas
		return nil
	}

	var tagsAttributeSchemas TagsAttributeSchemas = TagsAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &tagsAttributeSchemas, "", true, nil); err == nil {
		u.TagsAttributeSchemas = &tagsAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeTagsAttributeSchemas
		return nil
	}

	var messageEmailAddressAttributeSchemas MessageEmailAddressAttributeSchemas = MessageEmailAddressAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &messageEmailAddressAttributeSchemas, "", true, nil); err == nil {
		u.MessageEmailAddressAttributeSchemas = &messageEmailAddressAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeMessageEmailAddressAttributeSchemas
		return nil
	}

	var numberAttributeSchemas NumberAttributeSchemas = NumberAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &numberAttributeSchemas, "", true, nil); err == nil {
		u.NumberAttributeSchemas = &numberAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeNumberAttributeSchemas
		return nil
	}

	var internalAttributeSchemas InternalAttributeSchemas = InternalAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &internalAttributeSchemas, "", true, nil); err == nil {
		u.InternalAttributeSchemas = &internalAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeInternalAttributeSchemas
		return nil
	}

	var orderedListAttributeSchemas OrderedListAttributeSchemas = OrderedListAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &orderedListAttributeSchemas, "", true, nil); err == nil {
		u.OrderedListAttributeSchemas = &orderedListAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeOrderedListAttributeSchemas
		return nil
	}

	var fileAttributeSchemas FileAttributeSchemas = FileAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &fileAttributeSchemas, "", true, nil); err == nil {
		u.FileAttributeSchemas = &fileAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeFileAttributeSchemas
		return nil
	}

	var partnerStatusAttributeSchemas PartnerStatusAttributeSchemas = PartnerStatusAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &partnerStatusAttributeSchemas, "", true, nil); err == nil {
		u.PartnerStatusAttributeSchemas = &partnerStatusAttributeSchemas
		u.Type = AttributeWithCompositeIDTypePartnerStatusAttributeSchemas
		return nil
	}

	var invitationEmailAttributeSchemas InvitationEmailAttributeSchemas = InvitationEmailAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &invitationEmailAttributeSchemas, "", true, nil); err == nil {
		u.InvitationEmailAttributeSchemas = &invitationEmailAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeInvitationEmailAttributeSchemas
		return nil
	}

	var automationAttributeSchemas AutomationAttributeSchemas = AutomationAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &automationAttributeSchemas, "", true, nil); err == nil {
		u.AutomationAttributeSchemas = &automationAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeAutomationAttributeSchemas
		return nil
	}

	var internalUserAttributeSchemas InternalUserAttributeSchemas = InternalUserAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &internalUserAttributeSchemas, "", true, nil); err == nil {
		u.InternalUserAttributeSchemas = &internalUserAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeInternalUserAttributeSchemas
		return nil
	}

	var purposeAttributeSchemas PurposeAttributeSchemas = PurposeAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &purposeAttributeSchemas, "", true, nil); err == nil {
		u.PurposeAttributeSchemas = &purposeAttributeSchemas
		u.Type = AttributeWithCompositeIDTypePurposeAttributeSchemas
		return nil
	}

	var partnerOrganisationAttributeSchemas PartnerOrganisationAttributeSchemas = PartnerOrganisationAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &partnerOrganisationAttributeSchemas, "", true, nil); err == nil {
		u.PartnerOrganisationAttributeSchemas = &partnerOrganisationAttributeSchemas
		u.Type = AttributeWithCompositeIDTypePartnerOrganisationAttributeSchemas
		return nil
	}

	var portalAccessAttributeSchemas PortalAccessAttributeSchemas = PortalAccessAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &portalAccessAttributeSchemas, "", true, nil); err == nil {
		u.PortalAccessAttributeSchemas = &portalAccessAttributeSchemas
		u.Type = AttributeWithCompositeIDTypePortalAccessAttributeSchemas
		return nil
	}

	var phoneAttributeSchemas PhoneAttributeSchemas = PhoneAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &phoneAttributeSchemas, "", true, nil); err == nil {
		u.PhoneAttributeSchemas = &phoneAttributeSchemas
		u.Type = AttributeWithCompositeIDTypePhoneAttributeSchemas
		return nil
	}

	var emailAttributeSchemas EmailAttributeSchemas = EmailAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &emailAttributeSchemas, "", true, nil); err == nil {
		u.EmailAttributeSchemas = &emailAttributeSchemas
		u.Type = AttributeWithCompositeIDTypeEmailAttributeSchemas
		return nil
	}

	var paymentAttributeSchemas PaymentAttributeSchemas = PaymentAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &paymentAttributeSchemas, "", true, nil); err == nil {
		u.PaymentAttributeSchemas = &paymentAttributeSchemas
		u.Type = AttributeWithCompositeIDTypePaymentAttributeSchemas
		return nil
	}

	var priceComponentAttributeSchemas PriceComponentAttributeSchemas = PriceComponentAttributeSchemas{}
	if err := utils.UnmarshalJSON(data, &priceComponentAttributeSchemas, "", true, nil); err == nil {
		u.PriceComponentAttributeSchemas = &priceComponentAttributeSchemas
		u.Type = AttributeWithCompositeIDTypePriceComponentAttributeSchemas
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AttributeWithCompositeID", string(data))
}

func (u AttributeWithCompositeID) MarshalJSON() ([]byte, error) {
	if u.TextAttributeSchemas != nil {
		return utils.MarshalJSON(u.TextAttributeSchemas, "", true)
	}

	if u.LinkAttributeSchemas != nil {
		return utils.MarshalJSON(u.LinkAttributeSchemas, "", true)
	}

	if u.DateAttributeSchemas != nil {
		return utils.MarshalJSON(u.DateAttributeSchemas, "", true)
	}

	if u.CountryAttributeSchemas != nil {
		return utils.MarshalJSON(u.CountryAttributeSchemas, "", true)
	}

	if u.BooleanAttributeSchemas != nil {
		return utils.MarshalJSON(u.BooleanAttributeSchemas, "", true)
	}

	if u.SelectAttributeSchemas != nil {
		return utils.MarshalJSON(u.SelectAttributeSchemas, "", true)
	}

	if u.MultiSelectAttributeSchemas != nil {
		return utils.MarshalJSON(u.MultiSelectAttributeSchemas, "", true)
	}

	if u.StatusAttributeSchemas != nil {
		return utils.MarshalJSON(u.StatusAttributeSchemas, "", true)
	}

	if u.SequenceAttributeSchemas != nil {
		return utils.MarshalJSON(u.SequenceAttributeSchemas, "", true)
	}

	if u.RelationAttributeSchemas != nil {
		return utils.MarshalJSON(u.RelationAttributeSchemas, "", true)
	}

	if u.UserRelationAttributeSchemas != nil {
		return utils.MarshalJSON(u.UserRelationAttributeSchemas, "", true)
	}

	if u.Schemas != nil {
		return utils.MarshalJSON(u.Schemas, "", true)
	}

	if u.AddressRelationAttributeSchemas != nil {
		return utils.MarshalJSON(u.AddressRelationAttributeSchemas, "", true)
	}

	if u.PaymentMethodRelationAttributeSchemas != nil {
		return utils.MarshalJSON(u.PaymentMethodRelationAttributeSchemas, "", true)
	}

	if u.CurrencyAttributeSchemas != nil {
		return utils.MarshalJSON(u.CurrencyAttributeSchemas, "", true)
	}

	if u.TagsAttributeSchemas != nil {
		return utils.MarshalJSON(u.TagsAttributeSchemas, "", true)
	}

	if u.MessageEmailAddressAttributeSchemas != nil {
		return utils.MarshalJSON(u.MessageEmailAddressAttributeSchemas, "", true)
	}

	if u.NumberAttributeSchemas != nil {
		return utils.MarshalJSON(u.NumberAttributeSchemas, "", true)
	}

	if u.ConsentAttributeSchemas != nil {
		return utils.MarshalJSON(u.ConsentAttributeSchemas, "", true)
	}

	if u.InternalAttributeSchemas != nil {
		return utils.MarshalJSON(u.InternalAttributeSchemas, "", true)
	}

	if u.OrderedListAttributeSchemas != nil {
		return utils.MarshalJSON(u.OrderedListAttributeSchemas, "", true)
	}

	if u.FileAttributeSchemas != nil {
		return utils.MarshalJSON(u.FileAttributeSchemas, "", true)
	}

	if u.ComputedAttributeSchemas != nil {
		return utils.MarshalJSON(u.ComputedAttributeSchemas, "", true)
	}

	if u.PartnerStatusAttributeSchemas != nil {
		return utils.MarshalJSON(u.PartnerStatusAttributeSchemas, "", true)
	}

	if u.InvitationEmailAttributeSchemas != nil {
		return utils.MarshalJSON(u.InvitationEmailAttributeSchemas, "", true)
	}

	if u.AutomationAttributeSchemas != nil {
		return utils.MarshalJSON(u.AutomationAttributeSchemas, "", true)
	}

	if u.InternalUserAttributeSchemas != nil {
		return utils.MarshalJSON(u.InternalUserAttributeSchemas, "", true)
	}

	if u.PurposeAttributeSchemas != nil {
		return utils.MarshalJSON(u.PurposeAttributeSchemas, "", true)
	}

	if u.PartnerOrganisationAttributeSchemas != nil {
		return utils.MarshalJSON(u.PartnerOrganisationAttributeSchemas, "", true)
	}

	if u.PortalAccessAttributeSchemas != nil {
		return utils.MarshalJSON(u.PortalAccessAttributeSchemas, "", true)
	}

	if u.PhoneAttributeSchemas != nil {
		return utils.MarshalJSON(u.PhoneAttributeSchemas, "", true)
	}

	if u.EmailAttributeSchemas != nil {
		return utils.MarshalJSON(u.EmailAttributeSchemas, "", true)
	}

	if u.PaymentAttributeSchemas != nil {
		return utils.MarshalJSON(u.PaymentAttributeSchemas, "", true)
	}

	if u.PriceComponentAttributeSchemas != nil {
		return utils.MarshalJSON(u.PriceComponentAttributeSchemas, "", true)
	}

	return nil, errors.New("could not marshal union type AttributeWithCompositeID: all fields are null")
}

// PriceComponentAttributeSchemasInput - Price component
type PriceComponentAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPriceComponentAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                        `json:"default_value,omitempty"`
	Deprecated   *bool                                      `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPriceComponentAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                     `json:"label"`
	Layout      *string                                    `json:"layout,omitempty"`
	Name        string                                     `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                              `default:"true" json:"sortable"`
	Type           SchemasPriceComponentAttributeType `json:"type"`
	ValueFormatter *string                            `json:"value_formatter,omitempty"`
}

func (p PriceComponentAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PriceComponentAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PriceComponentAttributeSchemasInput) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PriceComponentAttributeSchemasInput) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PriceComponentAttributeSchemasInput) GetConstraints() *SchemasPriceComponentAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PriceComponentAttributeSchemasInput) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PriceComponentAttributeSchemasInput) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PriceComponentAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PriceComponentAttributeSchemasInput) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PriceComponentAttributeSchemasInput) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PriceComponentAttributeSchemasInput) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PriceComponentAttributeSchemasInput) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PriceComponentAttributeSchemasInput) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PriceComponentAttributeSchemasInput) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PriceComponentAttributeSchemasInput) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PriceComponentAttributeSchemasInput) GetInfoHelpers() *SchemasPriceComponentAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PriceComponentAttributeSchemasInput) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PriceComponentAttributeSchemasInput) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PriceComponentAttributeSchemasInput) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PriceComponentAttributeSchemasInput) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PriceComponentAttributeSchemasInput) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PriceComponentAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PriceComponentAttributeSchemasInput) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PriceComponentAttributeSchemasInput) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PriceComponentAttributeSchemasInput) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PriceComponentAttributeSchemasInput) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PriceComponentAttributeSchemasInput) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PriceComponentAttributeSchemasInput) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PriceComponentAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PriceComponentAttributeSchemasInput) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PriceComponentAttributeSchemasInput) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PriceComponentAttributeSchemasInput) GetType() SchemasPriceComponentAttributeType {
	if p == nil {
		return SchemasPriceComponentAttributeType("")
	}
	return p.Type
}

func (p *PriceComponentAttributeSchemasInput) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// PaymentAttributeSchemasInput - Payment method
type PaymentAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPaymentAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                 `json:"default_value,omitempty"`
	Deprecated   *bool                               `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPaymentAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                              `json:"label"`
	Layout      *string                             `json:"layout,omitempty"`
	Name        string                              `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                       `default:"true" json:"sortable"`
	Type           SchemasPaymentAttributeType `json:"type"`
	ValueFormatter *string                     `json:"value_formatter,omitempty"`
}

func (p PaymentAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PaymentAttributeSchemasInput) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PaymentAttributeSchemasInput) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PaymentAttributeSchemasInput) GetConstraints() *SchemasPaymentAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PaymentAttributeSchemasInput) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PaymentAttributeSchemasInput) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PaymentAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PaymentAttributeSchemasInput) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PaymentAttributeSchemasInput) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PaymentAttributeSchemasInput) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PaymentAttributeSchemasInput) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PaymentAttributeSchemasInput) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PaymentAttributeSchemasInput) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PaymentAttributeSchemasInput) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PaymentAttributeSchemasInput) GetInfoHelpers() *SchemasPaymentAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PaymentAttributeSchemasInput) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PaymentAttributeSchemasInput) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PaymentAttributeSchemasInput) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PaymentAttributeSchemasInput) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PaymentAttributeSchemasInput) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PaymentAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PaymentAttributeSchemasInput) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PaymentAttributeSchemasInput) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PaymentAttributeSchemasInput) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PaymentAttributeSchemasInput) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PaymentAttributeSchemasInput) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PaymentAttributeSchemasInput) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PaymentAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PaymentAttributeSchemasInput) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PaymentAttributeSchemasInput) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PaymentAttributeSchemasInput) GetType() SchemasPaymentAttributeType {
	if p == nil {
		return SchemasPaymentAttributeType("")
	}
	return p.Type
}

func (p *PaymentAttributeSchemasInput) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// EmailAttributeSchemasInput - Email address
type EmailAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasEmailAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                               `json:"default_value,omitempty"`
	Deprecated   *bool                             `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasEmailAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                            `json:"label"`
	Layout      *string                           `json:"layout,omitempty"`
	Name        string                            `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                     `default:"true" json:"sortable"`
	Type           SchemasEmailAttributeType `json:"type"`
	ValueFormatter *string                   `json:"value_formatter,omitempty"`
}

func (e EmailAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EmailAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (e *EmailAttributeSchemasInput) GetManifest() []string {
	if e == nil {
		return nil
	}
	return e.Manifest
}

func (e *EmailAttributeSchemasInput) GetPurpose() []string {
	if e == nil {
		return nil
	}
	return e.Purpose
}

func (e *EmailAttributeSchemasInput) GetConstraints() *SchemasEmailAttributeConstraints {
	if e == nil {
		return nil
	}
	return e.Constraints
}

func (e *EmailAttributeSchemasInput) GetDefaultValue() any {
	if e == nil {
		return nil
	}
	return e.DefaultValue
}

func (e *EmailAttributeSchemasInput) GetDeprecated() *bool {
	if e == nil {
		return nil
	}
	return e.Deprecated
}

func (e *EmailAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if e == nil {
		return nil
	}
	return e.EntityBuilderDisableEdit
}

func (e *EmailAttributeSchemasInput) GetFeatureFlag() *string {
	if e == nil {
		return nil
	}
	return e.FeatureFlag
}

func (e *EmailAttributeSchemasInput) GetGroup() *string {
	if e == nil {
		return nil
	}
	return e.Group
}

func (e *EmailAttributeSchemasInput) GetHasPrimary() *bool {
	if e == nil {
		return nil
	}
	return e.HasPrimary
}

func (e *EmailAttributeSchemasInput) GetHidden() *bool {
	if e == nil {
		return nil
	}
	return e.Hidden
}

func (e *EmailAttributeSchemasInput) GetHideLabel() *bool {
	if e == nil {
		return nil
	}
	return e.HideLabel
}

func (e *EmailAttributeSchemasInput) GetIcon() *string {
	if e == nil {
		return nil
	}
	return e.Icon
}

func (e *EmailAttributeSchemasInput) GetID() *string {
	if e == nil {
		return nil
	}
	return e.ID
}

func (e *EmailAttributeSchemasInput) GetInfoHelpers() *SchemasEmailAttributeInfoHelpers {
	if e == nil {
		return nil
	}
	return e.InfoHelpers
}

func (e *EmailAttributeSchemasInput) GetLabel() string {
	if e == nil {
		return ""
	}
	return e.Label
}

func (e *EmailAttributeSchemasInput) GetLayout() *string {
	if e == nil {
		return nil
	}
	return e.Layout
}

func (e *EmailAttributeSchemasInput) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *EmailAttributeSchemasInput) GetOrder() *int64 {
	if e == nil {
		return nil
	}
	return e.Order
}

func (e *EmailAttributeSchemasInput) GetPlaceholder() *string {
	if e == nil {
		return nil
	}
	return e.Placeholder
}

func (e *EmailAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if e == nil {
		return nil
	}
	return e.PreviewValueFormatter
}

func (e *EmailAttributeSchemasInput) GetProtected() *bool {
	if e == nil {
		return nil
	}
	return e.Protected
}

func (e *EmailAttributeSchemasInput) GetReadonly() *bool {
	if e == nil {
		return nil
	}
	return e.Readonly
}

func (e *EmailAttributeSchemasInput) GetRenderCondition() *string {
	if e == nil {
		return nil
	}
	return e.RenderCondition
}

func (e *EmailAttributeSchemasInput) GetRepeatable() *bool {
	if e == nil {
		return nil
	}
	return e.Repeatable
}

func (e *EmailAttributeSchemasInput) GetRequired() *bool {
	if e == nil {
		return nil
	}
	return e.Required
}

func (e *EmailAttributeSchemasInput) GetSchema() *string {
	if e == nil {
		return nil
	}
	return e.Schema
}

func (e *EmailAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if e == nil {
		return nil
	}
	return e.SettingsFlag
}

func (e *EmailAttributeSchemasInput) GetShowInTable() *bool {
	if e == nil {
		return nil
	}
	return e.ShowInTable
}

func (e *EmailAttributeSchemasInput) GetSortable() *bool {
	if e == nil {
		return nil
	}
	return e.Sortable
}

func (e *EmailAttributeSchemasInput) GetType() SchemasEmailAttributeType {
	if e == nil {
		return SchemasEmailAttributeType("")
	}
	return e.Type
}

func (e *EmailAttributeSchemasInput) GetValueFormatter() *string {
	if e == nil {
		return nil
	}
	return e.ValueFormatter
}

// PhoneAttributeSchemasInput - Phone number
type PhoneAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPhoneAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                               `json:"default_value,omitempty"`
	Deprecated   *bool                             `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPhoneAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                            `json:"label"`
	Layout      *string                           `json:"layout,omitempty"`
	Name        string                            `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                     `default:"true" json:"sortable"`
	Type           SchemasPhoneAttributeType `json:"type"`
	ValueFormatter *string                   `json:"value_formatter,omitempty"`
}

func (p PhoneAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PhoneAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PhoneAttributeSchemasInput) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PhoneAttributeSchemasInput) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PhoneAttributeSchemasInput) GetConstraints() *SchemasPhoneAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PhoneAttributeSchemasInput) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PhoneAttributeSchemasInput) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PhoneAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PhoneAttributeSchemasInput) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PhoneAttributeSchemasInput) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PhoneAttributeSchemasInput) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PhoneAttributeSchemasInput) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PhoneAttributeSchemasInput) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PhoneAttributeSchemasInput) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PhoneAttributeSchemasInput) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PhoneAttributeSchemasInput) GetInfoHelpers() *SchemasPhoneAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PhoneAttributeSchemasInput) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PhoneAttributeSchemasInput) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PhoneAttributeSchemasInput) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PhoneAttributeSchemasInput) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PhoneAttributeSchemasInput) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PhoneAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PhoneAttributeSchemasInput) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PhoneAttributeSchemasInput) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PhoneAttributeSchemasInput) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PhoneAttributeSchemasInput) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PhoneAttributeSchemasInput) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PhoneAttributeSchemasInput) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PhoneAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PhoneAttributeSchemasInput) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PhoneAttributeSchemasInput) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PhoneAttributeSchemasInput) GetType() SchemasPhoneAttributeType {
	if p == nil {
		return SchemasPhoneAttributeType("")
	}
	return p.Type
}

func (p *PhoneAttributeSchemasInput) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// PortalAccessAttributeSchemasInput - Portal access configuration
type PortalAccessAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPortalAccessAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                      `json:"default_value,omitempty"`
	Deprecated   *bool                                    `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPortalAccessAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                   `json:"label"`
	Layout      *string                                  `json:"layout,omitempty"`
	Name        string                                   `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                            `default:"true" json:"sortable"`
	Type           SchemasPortalAccessAttributeType `json:"type"`
	ValueFormatter *string                          `json:"value_formatter,omitempty"`
}

func (p PortalAccessAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PortalAccessAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PortalAccessAttributeSchemasInput) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PortalAccessAttributeSchemasInput) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PortalAccessAttributeSchemasInput) GetConstraints() *SchemasPortalAccessAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PortalAccessAttributeSchemasInput) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PortalAccessAttributeSchemasInput) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PortalAccessAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PortalAccessAttributeSchemasInput) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PortalAccessAttributeSchemasInput) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PortalAccessAttributeSchemasInput) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PortalAccessAttributeSchemasInput) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PortalAccessAttributeSchemasInput) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PortalAccessAttributeSchemasInput) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PortalAccessAttributeSchemasInput) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PortalAccessAttributeSchemasInput) GetInfoHelpers() *SchemasPortalAccessAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PortalAccessAttributeSchemasInput) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PortalAccessAttributeSchemasInput) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PortalAccessAttributeSchemasInput) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PortalAccessAttributeSchemasInput) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PortalAccessAttributeSchemasInput) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PortalAccessAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PortalAccessAttributeSchemasInput) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PortalAccessAttributeSchemasInput) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PortalAccessAttributeSchemasInput) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PortalAccessAttributeSchemasInput) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PortalAccessAttributeSchemasInput) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PortalAccessAttributeSchemasInput) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PortalAccessAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PortalAccessAttributeSchemasInput) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PortalAccessAttributeSchemasInput) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PortalAccessAttributeSchemasInput) GetType() SchemasPortalAccessAttributeType {
	if p == nil {
		return SchemasPortalAccessAttributeType("")
	}
	return p.Type
}

func (p *PortalAccessAttributeSchemasInput) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// PartnerOrganisationAttributeSchemasInput - Shared Partner Organisations
type PartnerOrganisationAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPartnerOrganisationAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                             `json:"default_value,omitempty"`
	Deprecated   *bool                                           `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPartnerOrganisationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                          `json:"label"`
	Layout      *string                                         `json:"layout,omitempty"`
	Name        string                                          `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                                   `default:"true" json:"sortable"`
	Type           SchemasPartnerOrganisationAttributeType `json:"type"`
	ValueFormatter *string                                 `json:"value_formatter,omitempty"`
}

func (p PartnerOrganisationAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PartnerOrganisationAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PartnerOrganisationAttributeSchemasInput) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PartnerOrganisationAttributeSchemasInput) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PartnerOrganisationAttributeSchemasInput) GetConstraints() *SchemasPartnerOrganisationAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PartnerOrganisationAttributeSchemasInput) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PartnerOrganisationAttributeSchemasInput) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PartnerOrganisationAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PartnerOrganisationAttributeSchemasInput) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PartnerOrganisationAttributeSchemasInput) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PartnerOrganisationAttributeSchemasInput) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PartnerOrganisationAttributeSchemasInput) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PartnerOrganisationAttributeSchemasInput) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PartnerOrganisationAttributeSchemasInput) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PartnerOrganisationAttributeSchemasInput) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PartnerOrganisationAttributeSchemasInput) GetInfoHelpers() *SchemasPartnerOrganisationAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PartnerOrganisationAttributeSchemasInput) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PartnerOrganisationAttributeSchemasInput) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PartnerOrganisationAttributeSchemasInput) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PartnerOrganisationAttributeSchemasInput) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PartnerOrganisationAttributeSchemasInput) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PartnerOrganisationAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PartnerOrganisationAttributeSchemasInput) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PartnerOrganisationAttributeSchemasInput) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PartnerOrganisationAttributeSchemasInput) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PartnerOrganisationAttributeSchemasInput) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PartnerOrganisationAttributeSchemasInput) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PartnerOrganisationAttributeSchemasInput) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PartnerOrganisationAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PartnerOrganisationAttributeSchemasInput) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PartnerOrganisationAttributeSchemasInput) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PartnerOrganisationAttributeSchemasInput) GetType() SchemasPartnerOrganisationAttributeType {
	if p == nil {
		return SchemasPartnerOrganisationAttributeType("")
	}
	return p.Type
}

func (p *PartnerOrganisationAttributeSchemasInput) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// PurposeAttributeSchemasInput - Entity Taxonomy
type PurposeAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPurposeAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                 `json:"default_value,omitempty"`
	Deprecated   *bool                               `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPurposeAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                              `json:"label"`
	Layout      *string                             `json:"layout,omitempty"`
	Name        string                              `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                       `default:"true" json:"sortable"`
	Type           SchemasPurposeAttributeType `json:"type"`
	ValueFormatter *string                     `json:"value_formatter,omitempty"`
}

func (p PurposeAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PurposeAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PurposeAttributeSchemasInput) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PurposeAttributeSchemasInput) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PurposeAttributeSchemasInput) GetConstraints() *SchemasPurposeAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PurposeAttributeSchemasInput) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PurposeAttributeSchemasInput) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PurposeAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PurposeAttributeSchemasInput) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PurposeAttributeSchemasInput) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PurposeAttributeSchemasInput) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PurposeAttributeSchemasInput) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PurposeAttributeSchemasInput) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PurposeAttributeSchemasInput) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PurposeAttributeSchemasInput) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PurposeAttributeSchemasInput) GetInfoHelpers() *SchemasPurposeAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PurposeAttributeSchemasInput) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PurposeAttributeSchemasInput) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PurposeAttributeSchemasInput) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PurposeAttributeSchemasInput) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PurposeAttributeSchemasInput) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PurposeAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PurposeAttributeSchemasInput) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PurposeAttributeSchemasInput) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PurposeAttributeSchemasInput) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PurposeAttributeSchemasInput) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PurposeAttributeSchemasInput) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PurposeAttributeSchemasInput) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PurposeAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PurposeAttributeSchemasInput) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PurposeAttributeSchemasInput) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PurposeAttributeSchemasInput) GetType() SchemasPurposeAttributeType {
	if p == nil {
		return SchemasPurposeAttributeType("")
	}
	return p.Type
}

func (p *PurposeAttributeSchemasInput) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// InternalUserAttributeSchemasInput - Epilot internal user info
type InternalUserAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasInternalUserAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                      `json:"default_value,omitempty"`
	Deprecated   *bool                                    `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasInternalUserAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                   `json:"label"`
	Layout      *string                                  `json:"layout,omitempty"`
	Name        string                                   `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                            `default:"true" json:"sortable"`
	Type           SchemasInternalUserAttributeType `json:"type"`
	ValueFormatter *string                          `json:"value_formatter,omitempty"`
}

func (i InternalUserAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InternalUserAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (i *InternalUserAttributeSchemasInput) GetManifest() []string {
	if i == nil {
		return nil
	}
	return i.Manifest
}

func (i *InternalUserAttributeSchemasInput) GetPurpose() []string {
	if i == nil {
		return nil
	}
	return i.Purpose
}

func (i *InternalUserAttributeSchemasInput) GetConstraints() *SchemasInternalUserAttributeConstraints {
	if i == nil {
		return nil
	}
	return i.Constraints
}

func (i *InternalUserAttributeSchemasInput) GetDefaultValue() any {
	if i == nil {
		return nil
	}
	return i.DefaultValue
}

func (i *InternalUserAttributeSchemasInput) GetDeprecated() *bool {
	if i == nil {
		return nil
	}
	return i.Deprecated
}

func (i *InternalUserAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if i == nil {
		return nil
	}
	return i.EntityBuilderDisableEdit
}

func (i *InternalUserAttributeSchemasInput) GetFeatureFlag() *string {
	if i == nil {
		return nil
	}
	return i.FeatureFlag
}

func (i *InternalUserAttributeSchemasInput) GetGroup() *string {
	if i == nil {
		return nil
	}
	return i.Group
}

func (i *InternalUserAttributeSchemasInput) GetHasPrimary() *bool {
	if i == nil {
		return nil
	}
	return i.HasPrimary
}

func (i *InternalUserAttributeSchemasInput) GetHidden() *bool {
	if i == nil {
		return nil
	}
	return i.Hidden
}

func (i *InternalUserAttributeSchemasInput) GetHideLabel() *bool {
	if i == nil {
		return nil
	}
	return i.HideLabel
}

func (i *InternalUserAttributeSchemasInput) GetIcon() *string {
	if i == nil {
		return nil
	}
	return i.Icon
}

func (i *InternalUserAttributeSchemasInput) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InternalUserAttributeSchemasInput) GetInfoHelpers() *SchemasInternalUserAttributeInfoHelpers {
	if i == nil {
		return nil
	}
	return i.InfoHelpers
}

func (i *InternalUserAttributeSchemasInput) GetLabel() string {
	if i == nil {
		return ""
	}
	return i.Label
}

func (i *InternalUserAttributeSchemasInput) GetLayout() *string {
	if i == nil {
		return nil
	}
	return i.Layout
}

func (i *InternalUserAttributeSchemasInput) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InternalUserAttributeSchemasInput) GetOrder() *int64 {
	if i == nil {
		return nil
	}
	return i.Order
}

func (i *InternalUserAttributeSchemasInput) GetPlaceholder() *string {
	if i == nil {
		return nil
	}
	return i.Placeholder
}

func (i *InternalUserAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if i == nil {
		return nil
	}
	return i.PreviewValueFormatter
}

func (i *InternalUserAttributeSchemasInput) GetProtected() *bool {
	if i == nil {
		return nil
	}
	return i.Protected
}

func (i *InternalUserAttributeSchemasInput) GetReadonly() *bool {
	if i == nil {
		return nil
	}
	return i.Readonly
}

func (i *InternalUserAttributeSchemasInput) GetRenderCondition() *string {
	if i == nil {
		return nil
	}
	return i.RenderCondition
}

func (i *InternalUserAttributeSchemasInput) GetRepeatable() *bool {
	if i == nil {
		return nil
	}
	return i.Repeatable
}

func (i *InternalUserAttributeSchemasInput) GetRequired() *bool {
	if i == nil {
		return nil
	}
	return i.Required
}

func (i *InternalUserAttributeSchemasInput) GetSchema() *string {
	if i == nil {
		return nil
	}
	return i.Schema
}

func (i *InternalUserAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if i == nil {
		return nil
	}
	return i.SettingsFlag
}

func (i *InternalUserAttributeSchemasInput) GetShowInTable() *bool {
	if i == nil {
		return nil
	}
	return i.ShowInTable
}

func (i *InternalUserAttributeSchemasInput) GetSortable() *bool {
	if i == nil {
		return nil
	}
	return i.Sortable
}

func (i *InternalUserAttributeSchemasInput) GetType() SchemasInternalUserAttributeType {
	if i == nil {
		return SchemasInternalUserAttributeType("")
	}
	return i.Type
}

func (i *InternalUserAttributeSchemasInput) GetValueFormatter() *string {
	if i == nil {
		return nil
	}
	return i.ValueFormatter
}

// AutomationAttributeSchemasInput - Automation entity
type AutomationAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasAutomationAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                    `json:"default_value,omitempty"`
	Deprecated   *bool                                  `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasAutomationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                 `json:"label"`
	Layout      *string                                `json:"layout,omitempty"`
	Name        string                                 `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                          `default:"true" json:"sortable"`
	Type           SchemasAutomationAttributeType `json:"type"`
	ValueFormatter *string                        `json:"value_formatter,omitempty"`
}

func (a AutomationAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AutomationAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (a *AutomationAttributeSchemasInput) GetManifest() []string {
	if a == nil {
		return nil
	}
	return a.Manifest
}

func (a *AutomationAttributeSchemasInput) GetPurpose() []string {
	if a == nil {
		return nil
	}
	return a.Purpose
}

func (a *AutomationAttributeSchemasInput) GetConstraints() *SchemasAutomationAttributeConstraints {
	if a == nil {
		return nil
	}
	return a.Constraints
}

func (a *AutomationAttributeSchemasInput) GetDefaultValue() any {
	if a == nil {
		return nil
	}
	return a.DefaultValue
}

func (a *AutomationAttributeSchemasInput) GetDeprecated() *bool {
	if a == nil {
		return nil
	}
	return a.Deprecated
}

func (a *AutomationAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if a == nil {
		return nil
	}
	return a.EntityBuilderDisableEdit
}

func (a *AutomationAttributeSchemasInput) GetFeatureFlag() *string {
	if a == nil {
		return nil
	}
	return a.FeatureFlag
}

func (a *AutomationAttributeSchemasInput) GetGroup() *string {
	if a == nil {
		return nil
	}
	return a.Group
}

func (a *AutomationAttributeSchemasInput) GetHasPrimary() *bool {
	if a == nil {
		return nil
	}
	return a.HasPrimary
}

func (a *AutomationAttributeSchemasInput) GetHidden() *bool {
	if a == nil {
		return nil
	}
	return a.Hidden
}

func (a *AutomationAttributeSchemasInput) GetHideLabel() *bool {
	if a == nil {
		return nil
	}
	return a.HideLabel
}

func (a *AutomationAttributeSchemasInput) GetIcon() *string {
	if a == nil {
		return nil
	}
	return a.Icon
}

func (a *AutomationAttributeSchemasInput) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AutomationAttributeSchemasInput) GetInfoHelpers() *SchemasAutomationAttributeInfoHelpers {
	if a == nil {
		return nil
	}
	return a.InfoHelpers
}

func (a *AutomationAttributeSchemasInput) GetLabel() string {
	if a == nil {
		return ""
	}
	return a.Label
}

func (a *AutomationAttributeSchemasInput) GetLayout() *string {
	if a == nil {
		return nil
	}
	return a.Layout
}

func (a *AutomationAttributeSchemasInput) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AutomationAttributeSchemasInput) GetOrder() *int64 {
	if a == nil {
		return nil
	}
	return a.Order
}

func (a *AutomationAttributeSchemasInput) GetPlaceholder() *string {
	if a == nil {
		return nil
	}
	return a.Placeholder
}

func (a *AutomationAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if a == nil {
		return nil
	}
	return a.PreviewValueFormatter
}

func (a *AutomationAttributeSchemasInput) GetProtected() *bool {
	if a == nil {
		return nil
	}
	return a.Protected
}

func (a *AutomationAttributeSchemasInput) GetReadonly() *bool {
	if a == nil {
		return nil
	}
	return a.Readonly
}

func (a *AutomationAttributeSchemasInput) GetRenderCondition() *string {
	if a == nil {
		return nil
	}
	return a.RenderCondition
}

func (a *AutomationAttributeSchemasInput) GetRepeatable() *bool {
	if a == nil {
		return nil
	}
	return a.Repeatable
}

func (a *AutomationAttributeSchemasInput) GetRequired() *bool {
	if a == nil {
		return nil
	}
	return a.Required
}

func (a *AutomationAttributeSchemasInput) GetSchema() *string {
	if a == nil {
		return nil
	}
	return a.Schema
}

func (a *AutomationAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if a == nil {
		return nil
	}
	return a.SettingsFlag
}

func (a *AutomationAttributeSchemasInput) GetShowInTable() *bool {
	if a == nil {
		return nil
	}
	return a.ShowInTable
}

func (a *AutomationAttributeSchemasInput) GetSortable() *bool {
	if a == nil {
		return nil
	}
	return a.Sortable
}

func (a *AutomationAttributeSchemasInput) GetType() SchemasAutomationAttributeType {
	if a == nil {
		return SchemasAutomationAttributeType("")
	}
	return a.Type
}

func (a *AutomationAttributeSchemasInput) GetValueFormatter() *string {
	if a == nil {
		return nil
	}
	return a.ValueFormatter
}

// InvitationEmailAttributeSchemasInput - Email address for send invitation
type InvitationEmailAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasInvitationEmailAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                         `json:"default_value,omitempty"`
	Deprecated   *bool                                       `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasInvitationEmailAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                      `json:"label"`
	Layout      *string                                     `json:"layout,omitempty"`
	Name        string                                      `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                               `default:"true" json:"sortable"`
	Type           SchemasInvitationEmailAttributeType `json:"type"`
	ValueFormatter *string                             `json:"value_formatter,omitempty"`
}

func (i InvitationEmailAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvitationEmailAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (i *InvitationEmailAttributeSchemasInput) GetManifest() []string {
	if i == nil {
		return nil
	}
	return i.Manifest
}

func (i *InvitationEmailAttributeSchemasInput) GetPurpose() []string {
	if i == nil {
		return nil
	}
	return i.Purpose
}

func (i *InvitationEmailAttributeSchemasInput) GetConstraints() *SchemasInvitationEmailAttributeConstraints {
	if i == nil {
		return nil
	}
	return i.Constraints
}

func (i *InvitationEmailAttributeSchemasInput) GetDefaultValue() any {
	if i == nil {
		return nil
	}
	return i.DefaultValue
}

func (i *InvitationEmailAttributeSchemasInput) GetDeprecated() *bool {
	if i == nil {
		return nil
	}
	return i.Deprecated
}

func (i *InvitationEmailAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if i == nil {
		return nil
	}
	return i.EntityBuilderDisableEdit
}

func (i *InvitationEmailAttributeSchemasInput) GetFeatureFlag() *string {
	if i == nil {
		return nil
	}
	return i.FeatureFlag
}

func (i *InvitationEmailAttributeSchemasInput) GetGroup() *string {
	if i == nil {
		return nil
	}
	return i.Group
}

func (i *InvitationEmailAttributeSchemasInput) GetHasPrimary() *bool {
	if i == nil {
		return nil
	}
	return i.HasPrimary
}

func (i *InvitationEmailAttributeSchemasInput) GetHidden() *bool {
	if i == nil {
		return nil
	}
	return i.Hidden
}

func (i *InvitationEmailAttributeSchemasInput) GetHideLabel() *bool {
	if i == nil {
		return nil
	}
	return i.HideLabel
}

func (i *InvitationEmailAttributeSchemasInput) GetIcon() *string {
	if i == nil {
		return nil
	}
	return i.Icon
}

func (i *InvitationEmailAttributeSchemasInput) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InvitationEmailAttributeSchemasInput) GetInfoHelpers() *SchemasInvitationEmailAttributeInfoHelpers {
	if i == nil {
		return nil
	}
	return i.InfoHelpers
}

func (i *InvitationEmailAttributeSchemasInput) GetLabel() string {
	if i == nil {
		return ""
	}
	return i.Label
}

func (i *InvitationEmailAttributeSchemasInput) GetLayout() *string {
	if i == nil {
		return nil
	}
	return i.Layout
}

func (i *InvitationEmailAttributeSchemasInput) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InvitationEmailAttributeSchemasInput) GetOrder() *int64 {
	if i == nil {
		return nil
	}
	return i.Order
}

func (i *InvitationEmailAttributeSchemasInput) GetPlaceholder() *string {
	if i == nil {
		return nil
	}
	return i.Placeholder
}

func (i *InvitationEmailAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if i == nil {
		return nil
	}
	return i.PreviewValueFormatter
}

func (i *InvitationEmailAttributeSchemasInput) GetProtected() *bool {
	if i == nil {
		return nil
	}
	return i.Protected
}

func (i *InvitationEmailAttributeSchemasInput) GetReadonly() *bool {
	if i == nil {
		return nil
	}
	return i.Readonly
}

func (i *InvitationEmailAttributeSchemasInput) GetRenderCondition() *string {
	if i == nil {
		return nil
	}
	return i.RenderCondition
}

func (i *InvitationEmailAttributeSchemasInput) GetRepeatable() *bool {
	if i == nil {
		return nil
	}
	return i.Repeatable
}

func (i *InvitationEmailAttributeSchemasInput) GetRequired() *bool {
	if i == nil {
		return nil
	}
	return i.Required
}

func (i *InvitationEmailAttributeSchemasInput) GetSchema() *string {
	if i == nil {
		return nil
	}
	return i.Schema
}

func (i *InvitationEmailAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if i == nil {
		return nil
	}
	return i.SettingsFlag
}

func (i *InvitationEmailAttributeSchemasInput) GetShowInTable() *bool {
	if i == nil {
		return nil
	}
	return i.ShowInTable
}

func (i *InvitationEmailAttributeSchemasInput) GetSortable() *bool {
	if i == nil {
		return nil
	}
	return i.Sortable
}

func (i *InvitationEmailAttributeSchemasInput) GetType() SchemasInvitationEmailAttributeType {
	if i == nil {
		return SchemasInvitationEmailAttributeType("")
	}
	return i.Type
}

func (i *InvitationEmailAttributeSchemasInput) GetValueFormatter() *string {
	if i == nil {
		return nil
	}
	return i.ValueFormatter
}

// PartnerStatusAttributeSchemasInput - Partner Status
type PartnerStatusAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPartnerStatusAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                       `json:"default_value,omitempty"`
	Deprecated   *bool                                     `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPartnerStatusAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                    `json:"label"`
	Layout      *string                                   `json:"layout,omitempty"`
	Name        string                                    `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                             `default:"true" json:"sortable"`
	Type           SchemasPartnerStatusAttributeType `json:"type"`
	ValueFormatter *string                           `json:"value_formatter,omitempty"`
}

func (p PartnerStatusAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PartnerStatusAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PartnerStatusAttributeSchemasInput) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PartnerStatusAttributeSchemasInput) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PartnerStatusAttributeSchemasInput) GetConstraints() *SchemasPartnerStatusAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PartnerStatusAttributeSchemasInput) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PartnerStatusAttributeSchemasInput) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PartnerStatusAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PartnerStatusAttributeSchemasInput) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PartnerStatusAttributeSchemasInput) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PartnerStatusAttributeSchemasInput) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PartnerStatusAttributeSchemasInput) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PartnerStatusAttributeSchemasInput) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PartnerStatusAttributeSchemasInput) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PartnerStatusAttributeSchemasInput) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PartnerStatusAttributeSchemasInput) GetInfoHelpers() *SchemasPartnerStatusAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PartnerStatusAttributeSchemasInput) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PartnerStatusAttributeSchemasInput) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PartnerStatusAttributeSchemasInput) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PartnerStatusAttributeSchemasInput) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PartnerStatusAttributeSchemasInput) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PartnerStatusAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PartnerStatusAttributeSchemasInput) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PartnerStatusAttributeSchemasInput) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PartnerStatusAttributeSchemasInput) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PartnerStatusAttributeSchemasInput) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PartnerStatusAttributeSchemasInput) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PartnerStatusAttributeSchemasInput) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PartnerStatusAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PartnerStatusAttributeSchemasInput) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PartnerStatusAttributeSchemasInput) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PartnerStatusAttributeSchemasInput) GetType() SchemasPartnerStatusAttributeType {
	if p == nil {
		return SchemasPartnerStatusAttributeType("")
	}
	return p.Type
}

func (p *PartnerStatusAttributeSchemasInput) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// ComputedAttributeSchemasInput - An attribute that is computed from the entity data. For more details on how to use them, check the docs [here](https://e-pilot.atlassian.net/wiki/spaces/EO/pages/5642977476/How+To+Computed+Schema+Attributes)
type ComputedAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A source amount field that is used to compute the value of the attribute
	AmountField *string `json:"amount_field,omitempty"`
	Computed    *bool   `default:"true" json:"computed"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *SchemasComputedAttributeConstraints `json:"constraints,omitempty"`
	// A currency field used to format a computed currency value
	CurrencyField *string `json:"currency_field,omitempty"`
	DefaultValue  any     `json:"default_value,omitempty"`
	Deprecated    *bool   `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasComputedAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                               `json:"label"`
	Layout      *string                              `json:"layout,omitempty"`
	Name        string                               `json:"name"`
	// Attribute sort order (ascending) in group
	Order       *int64  `json:"order,omitempty"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Variable template used to format a preview for the computed value
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable *bool                        `default:"true" json:"sortable"`
	Type     SchemasComputedAttributeType `json:"type"`
	// Variable template used to format the computed value
	ValueFormatter string `json:"value_formatter"`
}

func (c ComputedAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputedAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"label", "name", "type", "value_formatter"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputedAttributeSchemasInput) GetManifest() []string {
	if c == nil {
		return nil
	}
	return c.Manifest
}

func (c *ComputedAttributeSchemasInput) GetPurpose() []string {
	if c == nil {
		return nil
	}
	return c.Purpose
}

func (c *ComputedAttributeSchemasInput) GetAmountField() *string {
	if c == nil {
		return nil
	}
	return c.AmountField
}

func (c *ComputedAttributeSchemasInput) GetComputed() *bool {
	if c == nil {
		return nil
	}
	return c.Computed
}

func (c *ComputedAttributeSchemasInput) GetConstraints() *SchemasComputedAttributeConstraints {
	if c == nil {
		return nil
	}
	return c.Constraints
}

func (c *ComputedAttributeSchemasInput) GetCurrencyField() *string {
	if c == nil {
		return nil
	}
	return c.CurrencyField
}

func (c *ComputedAttributeSchemasInput) GetDefaultValue() any {
	if c == nil {
		return nil
	}
	return c.DefaultValue
}

func (c *ComputedAttributeSchemasInput) GetDeprecated() *bool {
	if c == nil {
		return nil
	}
	return c.Deprecated
}

func (c *ComputedAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if c == nil {
		return nil
	}
	return c.EntityBuilderDisableEdit
}

func (c *ComputedAttributeSchemasInput) GetFeatureFlag() *string {
	if c == nil {
		return nil
	}
	return c.FeatureFlag
}

func (c *ComputedAttributeSchemasInput) GetGroup() *string {
	if c == nil {
		return nil
	}
	return c.Group
}

func (c *ComputedAttributeSchemasInput) GetHasPrimary() *bool {
	if c == nil {
		return nil
	}
	return c.HasPrimary
}

func (c *ComputedAttributeSchemasInput) GetHidden() *bool {
	if c == nil {
		return nil
	}
	return c.Hidden
}

func (c *ComputedAttributeSchemasInput) GetHideLabel() *bool {
	if c == nil {
		return nil
	}
	return c.HideLabel
}

func (c *ComputedAttributeSchemasInput) GetIcon() *string {
	if c == nil {
		return nil
	}
	return c.Icon
}

func (c *ComputedAttributeSchemasInput) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ComputedAttributeSchemasInput) GetInfoHelpers() *SchemasComputedAttributeInfoHelpers {
	if c == nil {
		return nil
	}
	return c.InfoHelpers
}

func (c *ComputedAttributeSchemasInput) GetLabel() string {
	if c == nil {
		return ""
	}
	return c.Label
}

func (c *ComputedAttributeSchemasInput) GetLayout() *string {
	if c == nil {
		return nil
	}
	return c.Layout
}

func (c *ComputedAttributeSchemasInput) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ComputedAttributeSchemasInput) GetOrder() *int64 {
	if c == nil {
		return nil
	}
	return c.Order
}

func (c *ComputedAttributeSchemasInput) GetPlaceholder() *string {
	if c == nil {
		return nil
	}
	return c.Placeholder
}

func (c *ComputedAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.PreviewValueFormatter
}

func (c *ComputedAttributeSchemasInput) GetProtected() *bool {
	if c == nil {
		return nil
	}
	return c.Protected
}

func (c *ComputedAttributeSchemasInput) GetReadonly() *bool {
	if c == nil {
		return nil
	}
	return c.Readonly
}

func (c *ComputedAttributeSchemasInput) GetRenderCondition() *string {
	if c == nil {
		return nil
	}
	return c.RenderCondition
}

func (c *ComputedAttributeSchemasInput) GetRepeatable() *bool {
	if c == nil {
		return nil
	}
	return c.Repeatable
}

func (c *ComputedAttributeSchemasInput) GetRequired() *bool {
	if c == nil {
		return nil
	}
	return c.Required
}

func (c *ComputedAttributeSchemasInput) GetSchema() *string {
	if c == nil {
		return nil
	}
	return c.Schema
}

func (c *ComputedAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if c == nil {
		return nil
	}
	return c.SettingsFlag
}

func (c *ComputedAttributeSchemasInput) GetShowInTable() *bool {
	if c == nil {
		return nil
	}
	return c.ShowInTable
}

func (c *ComputedAttributeSchemasInput) GetSortable() *bool {
	if c == nil {
		return nil
	}
	return c.Sortable
}

func (c *ComputedAttributeSchemasInput) GetType() SchemasComputedAttributeType {
	if c == nil {
		return SchemasComputedAttributeType("")
	}
	return c.Type
}

func (c *ComputedAttributeSchemasInput) GetValueFormatter() string {
	if c == nil {
		return ""
	}
	return c.ValueFormatter
}

// FileAttributeSchemasInput - File or Image Attachment
type FileAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// List of file extensions (without the dot suffix)
	AllowedExtensions []string `json:"allowed_extensions,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints          *SchemasFileAttributeConstraints `json:"constraints,omitempty"`
	DefaultAccessControl *DefaultAccessControl            `json:"default_access_control,omitempty"`
	DefaultValue         any                              `json:"default_value,omitempty"`
	Deprecated           *bool                            `default:"false" json:"deprecated"`
	// Controls how the images are presented to the user during upload on the Entity Details view.
	DisplayImagesLandscaped *bool `json:"display_images_landscaped,omitempty"`
	// When set to true, an i18n description will be used alongside the attribute label.
	// This description should be set through the platform locales in the form: `file.{attribute_name}.description_text`.
	//
	EnableDescription *bool `json:"enable_description,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasFileAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                           `json:"label"`
	Layout      *string                          `json:"layout,omitempty"`
	Multiple    *bool                            `json:"multiple,omitempty"`
	Name        string                           `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                    `default:"true" json:"sortable"`
	Type           SchemasFileAttributeType `json:"type"`
	ValueFormatter *string                  `json:"value_formatter,omitempty"`
}

func (f FileAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FileAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (f *FileAttributeSchemasInput) GetManifest() []string {
	if f == nil {
		return nil
	}
	return f.Manifest
}

func (f *FileAttributeSchemasInput) GetPurpose() []string {
	if f == nil {
		return nil
	}
	return f.Purpose
}

func (f *FileAttributeSchemasInput) GetAllowedExtensions() []string {
	if f == nil {
		return nil
	}
	return f.AllowedExtensions
}

func (f *FileAttributeSchemasInput) GetConstraints() *SchemasFileAttributeConstraints {
	if f == nil {
		return nil
	}
	return f.Constraints
}

func (f *FileAttributeSchemasInput) GetDefaultAccessControl() *DefaultAccessControl {
	if f == nil {
		return nil
	}
	return f.DefaultAccessControl
}

func (f *FileAttributeSchemasInput) GetDefaultValue() any {
	if f == nil {
		return nil
	}
	return f.DefaultValue
}

func (f *FileAttributeSchemasInput) GetDeprecated() *bool {
	if f == nil {
		return nil
	}
	return f.Deprecated
}

func (f *FileAttributeSchemasInput) GetDisplayImagesLandscaped() *bool {
	if f == nil {
		return nil
	}
	return f.DisplayImagesLandscaped
}

func (f *FileAttributeSchemasInput) GetEnableDescription() *bool {
	if f == nil {
		return nil
	}
	return f.EnableDescription
}

func (f *FileAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if f == nil {
		return nil
	}
	return f.EntityBuilderDisableEdit
}

func (f *FileAttributeSchemasInput) GetFeatureFlag() *string {
	if f == nil {
		return nil
	}
	return f.FeatureFlag
}

func (f *FileAttributeSchemasInput) GetGroup() *string {
	if f == nil {
		return nil
	}
	return f.Group
}

func (f *FileAttributeSchemasInput) GetHasPrimary() *bool {
	if f == nil {
		return nil
	}
	return f.HasPrimary
}

func (f *FileAttributeSchemasInput) GetHidden() *bool {
	if f == nil {
		return nil
	}
	return f.Hidden
}

func (f *FileAttributeSchemasInput) GetHideLabel() *bool {
	if f == nil {
		return nil
	}
	return f.HideLabel
}

func (f *FileAttributeSchemasInput) GetIcon() *string {
	if f == nil {
		return nil
	}
	return f.Icon
}

func (f *FileAttributeSchemasInput) GetID() *string {
	if f == nil {
		return nil
	}
	return f.ID
}

func (f *FileAttributeSchemasInput) GetInfoHelpers() *SchemasFileAttributeInfoHelpers {
	if f == nil {
		return nil
	}
	return f.InfoHelpers
}

func (f *FileAttributeSchemasInput) GetLabel() string {
	if f == nil {
		return ""
	}
	return f.Label
}

func (f *FileAttributeSchemasInput) GetLayout() *string {
	if f == nil {
		return nil
	}
	return f.Layout
}

func (f *FileAttributeSchemasInput) GetMultiple() *bool {
	if f == nil {
		return nil
	}
	return f.Multiple
}

func (f *FileAttributeSchemasInput) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *FileAttributeSchemasInput) GetOrder() *int64 {
	if f == nil {
		return nil
	}
	return f.Order
}

func (f *FileAttributeSchemasInput) GetPlaceholder() *string {
	if f == nil {
		return nil
	}
	return f.Placeholder
}

func (f *FileAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if f == nil {
		return nil
	}
	return f.PreviewValueFormatter
}

func (f *FileAttributeSchemasInput) GetProtected() *bool {
	if f == nil {
		return nil
	}
	return f.Protected
}

func (f *FileAttributeSchemasInput) GetReadonly() *bool {
	if f == nil {
		return nil
	}
	return f.Readonly
}

func (f *FileAttributeSchemasInput) GetRenderCondition() *string {
	if f == nil {
		return nil
	}
	return f.RenderCondition
}

func (f *FileAttributeSchemasInput) GetRepeatable() *bool {
	if f == nil {
		return nil
	}
	return f.Repeatable
}

func (f *FileAttributeSchemasInput) GetRequired() *bool {
	if f == nil {
		return nil
	}
	return f.Required
}

func (f *FileAttributeSchemasInput) GetSchema() *string {
	if f == nil {
		return nil
	}
	return f.Schema
}

func (f *FileAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if f == nil {
		return nil
	}
	return f.SettingsFlag
}

func (f *FileAttributeSchemasInput) GetShowInTable() *bool {
	if f == nil {
		return nil
	}
	return f.ShowInTable
}

func (f *FileAttributeSchemasInput) GetSortable() *bool {
	if f == nil {
		return nil
	}
	return f.Sortable
}

func (f *FileAttributeSchemasInput) GetType() SchemasFileAttributeType {
	if f == nil {
		return SchemasFileAttributeType("")
	}
	return f.Type
}

func (f *FileAttributeSchemasInput) GetValueFormatter() *string {
	if f == nil {
		return nil
	}
	return f.ValueFormatter
}

// OrderedListAttributeSchemasInput - Type of attribute to render N number of ordered fields
type OrderedListAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasOrderedListAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                     `json:"default_value,omitempty"`
	Deprecated   *bool                                   `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasOrderedListAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                  `json:"label"`
	Layout      *string                                 `json:"layout,omitempty"`
	Name        string                                  `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                           `default:"true" json:"sortable"`
	Type           SchemasOrderedListAttributeType `json:"type"`
	ValueFormatter *string                         `json:"value_formatter,omitempty"`
}

func (o OrderedListAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrderedListAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *OrderedListAttributeSchemasInput) GetManifest() []string {
	if o == nil {
		return nil
	}
	return o.Manifest
}

func (o *OrderedListAttributeSchemasInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *OrderedListAttributeSchemasInput) GetConstraints() *SchemasOrderedListAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *OrderedListAttributeSchemasInput) GetDefaultValue() any {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *OrderedListAttributeSchemasInput) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *OrderedListAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *OrderedListAttributeSchemasInput) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *OrderedListAttributeSchemasInput) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *OrderedListAttributeSchemasInput) GetHasPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.HasPrimary
}

func (o *OrderedListAttributeSchemasInput) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *OrderedListAttributeSchemasInput) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *OrderedListAttributeSchemasInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *OrderedListAttributeSchemasInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OrderedListAttributeSchemasInput) GetInfoHelpers() *SchemasOrderedListAttributeInfoHelpers {
	if o == nil {
		return nil
	}
	return o.InfoHelpers
}

func (o *OrderedListAttributeSchemasInput) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OrderedListAttributeSchemasInput) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *OrderedListAttributeSchemasInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *OrderedListAttributeSchemasInput) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *OrderedListAttributeSchemasInput) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *OrderedListAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *OrderedListAttributeSchemasInput) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *OrderedListAttributeSchemasInput) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *OrderedListAttributeSchemasInput) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *OrderedListAttributeSchemasInput) GetRepeatable() *bool {
	if o == nil {
		return nil
	}
	return o.Repeatable
}

func (o *OrderedListAttributeSchemasInput) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *OrderedListAttributeSchemasInput) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *OrderedListAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if o == nil {
		return nil
	}
	return o.SettingsFlag
}

func (o *OrderedListAttributeSchemasInput) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *OrderedListAttributeSchemasInput) GetSortable() *bool {
	if o == nil {
		return nil
	}
	return o.Sortable
}

func (o *OrderedListAttributeSchemasInput) GetType() SchemasOrderedListAttributeType {
	if o == nil {
		return SchemasOrderedListAttributeType("")
	}
	return o.Type
}

func (o *OrderedListAttributeSchemasInput) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}

// InternalAttributeSchemasInput - No UI representation
type InternalAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasInternalAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                  `json:"default_value,omitempty"`
	Deprecated   *bool                                `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasInternalAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                               `json:"label"`
	Layout      *string                              `json:"layout,omitempty"`
	Name        string                               `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                        `default:"true" json:"sortable"`
	Type           SchemasInternalAttributeType `json:"type"`
	ValueFormatter *string                      `json:"value_formatter,omitempty"`
}

func (i InternalAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InternalAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (i *InternalAttributeSchemasInput) GetManifest() []string {
	if i == nil {
		return nil
	}
	return i.Manifest
}

func (i *InternalAttributeSchemasInput) GetPurpose() []string {
	if i == nil {
		return nil
	}
	return i.Purpose
}

func (i *InternalAttributeSchemasInput) GetConstraints() *SchemasInternalAttributeConstraints {
	if i == nil {
		return nil
	}
	return i.Constraints
}

func (i *InternalAttributeSchemasInput) GetDefaultValue() any {
	if i == nil {
		return nil
	}
	return i.DefaultValue
}

func (i *InternalAttributeSchemasInput) GetDeprecated() *bool {
	if i == nil {
		return nil
	}
	return i.Deprecated
}

func (i *InternalAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if i == nil {
		return nil
	}
	return i.EntityBuilderDisableEdit
}

func (i *InternalAttributeSchemasInput) GetFeatureFlag() *string {
	if i == nil {
		return nil
	}
	return i.FeatureFlag
}

func (i *InternalAttributeSchemasInput) GetGroup() *string {
	if i == nil {
		return nil
	}
	return i.Group
}

func (i *InternalAttributeSchemasInput) GetHasPrimary() *bool {
	if i == nil {
		return nil
	}
	return i.HasPrimary
}

func (i *InternalAttributeSchemasInput) GetHidden() *bool {
	if i == nil {
		return nil
	}
	return i.Hidden
}

func (i *InternalAttributeSchemasInput) GetHideLabel() *bool {
	if i == nil {
		return nil
	}
	return i.HideLabel
}

func (i *InternalAttributeSchemasInput) GetIcon() *string {
	if i == nil {
		return nil
	}
	return i.Icon
}

func (i *InternalAttributeSchemasInput) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InternalAttributeSchemasInput) GetInfoHelpers() *SchemasInternalAttributeInfoHelpers {
	if i == nil {
		return nil
	}
	return i.InfoHelpers
}

func (i *InternalAttributeSchemasInput) GetLabel() string {
	if i == nil {
		return ""
	}
	return i.Label
}

func (i *InternalAttributeSchemasInput) GetLayout() *string {
	if i == nil {
		return nil
	}
	return i.Layout
}

func (i *InternalAttributeSchemasInput) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InternalAttributeSchemasInput) GetOrder() *int64 {
	if i == nil {
		return nil
	}
	return i.Order
}

func (i *InternalAttributeSchemasInput) GetPlaceholder() *string {
	if i == nil {
		return nil
	}
	return i.Placeholder
}

func (i *InternalAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if i == nil {
		return nil
	}
	return i.PreviewValueFormatter
}

func (i *InternalAttributeSchemasInput) GetProtected() *bool {
	if i == nil {
		return nil
	}
	return i.Protected
}

func (i *InternalAttributeSchemasInput) GetReadonly() *bool {
	if i == nil {
		return nil
	}
	return i.Readonly
}

func (i *InternalAttributeSchemasInput) GetRenderCondition() *string {
	if i == nil {
		return nil
	}
	return i.RenderCondition
}

func (i *InternalAttributeSchemasInput) GetRepeatable() *bool {
	if i == nil {
		return nil
	}
	return i.Repeatable
}

func (i *InternalAttributeSchemasInput) GetRequired() *bool {
	if i == nil {
		return nil
	}
	return i.Required
}

func (i *InternalAttributeSchemasInput) GetSchema() *string {
	if i == nil {
		return nil
	}
	return i.Schema
}

func (i *InternalAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if i == nil {
		return nil
	}
	return i.SettingsFlag
}

func (i *InternalAttributeSchemasInput) GetShowInTable() *bool {
	if i == nil {
		return nil
	}
	return i.ShowInTable
}

func (i *InternalAttributeSchemasInput) GetSortable() *bool {
	if i == nil {
		return nil
	}
	return i.Sortable
}

func (i *InternalAttributeSchemasInput) GetType() SchemasInternalAttributeType {
	if i == nil {
		return SchemasInternalAttributeType("")
	}
	return i.Type
}

func (i *InternalAttributeSchemasInput) GetValueFormatter() *string {
	if i == nil {
		return nil
	}
	return i.ValueFormatter
}

// ConsentAttributeSchemasInput - Consent Management
type ConsentAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasConsentAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                 `json:"default_value,omitempty"`
	Deprecated   *bool                               `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID          *string  `json:"id,omitempty"`
	Identifiers []string `json:"identifiers,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasConsentAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                              `json:"label"`
	Layout      *string                             `json:"layout,omitempty"`
	Name        string                              `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                       `default:"true" json:"sortable"`
	Topic          string                      `json:"topic"`
	Type           SchemasConsentAttributeType `json:"type"`
	ValueFormatter *string                     `json:"value_formatter,omitempty"`
}

func (c ConsentAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConsentAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"label", "name", "topic", "type"}); err != nil {
		return err
	}
	return nil
}

func (c *ConsentAttributeSchemasInput) GetManifest() []string {
	if c == nil {
		return nil
	}
	return c.Manifest
}

func (c *ConsentAttributeSchemasInput) GetPurpose() []string {
	if c == nil {
		return nil
	}
	return c.Purpose
}

func (c *ConsentAttributeSchemasInput) GetConstraints() *SchemasConsentAttributeConstraints {
	if c == nil {
		return nil
	}
	return c.Constraints
}

func (c *ConsentAttributeSchemasInput) GetDefaultValue() any {
	if c == nil {
		return nil
	}
	return c.DefaultValue
}

func (c *ConsentAttributeSchemasInput) GetDeprecated() *bool {
	if c == nil {
		return nil
	}
	return c.Deprecated
}

func (c *ConsentAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if c == nil {
		return nil
	}
	return c.EntityBuilderDisableEdit
}

func (c *ConsentAttributeSchemasInput) GetFeatureFlag() *string {
	if c == nil {
		return nil
	}
	return c.FeatureFlag
}

func (c *ConsentAttributeSchemasInput) GetGroup() *string {
	if c == nil {
		return nil
	}
	return c.Group
}

func (c *ConsentAttributeSchemasInput) GetHasPrimary() *bool {
	if c == nil {
		return nil
	}
	return c.HasPrimary
}

func (c *ConsentAttributeSchemasInput) GetHidden() *bool {
	if c == nil {
		return nil
	}
	return c.Hidden
}

func (c *ConsentAttributeSchemasInput) GetHideLabel() *bool {
	if c == nil {
		return nil
	}
	return c.HideLabel
}

func (c *ConsentAttributeSchemasInput) GetIcon() *string {
	if c == nil {
		return nil
	}
	return c.Icon
}

func (c *ConsentAttributeSchemasInput) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ConsentAttributeSchemasInput) GetIdentifiers() []string {
	if c == nil {
		return nil
	}
	return c.Identifiers
}

func (c *ConsentAttributeSchemasInput) GetInfoHelpers() *SchemasConsentAttributeInfoHelpers {
	if c == nil {
		return nil
	}
	return c.InfoHelpers
}

func (c *ConsentAttributeSchemasInput) GetLabel() string {
	if c == nil {
		return ""
	}
	return c.Label
}

func (c *ConsentAttributeSchemasInput) GetLayout() *string {
	if c == nil {
		return nil
	}
	return c.Layout
}

func (c *ConsentAttributeSchemasInput) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ConsentAttributeSchemasInput) GetOrder() *int64 {
	if c == nil {
		return nil
	}
	return c.Order
}

func (c *ConsentAttributeSchemasInput) GetPlaceholder() *string {
	if c == nil {
		return nil
	}
	return c.Placeholder
}

func (c *ConsentAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.PreviewValueFormatter
}

func (c *ConsentAttributeSchemasInput) GetProtected() *bool {
	if c == nil {
		return nil
	}
	return c.Protected
}

func (c *ConsentAttributeSchemasInput) GetReadonly() *bool {
	if c == nil {
		return nil
	}
	return c.Readonly
}

func (c *ConsentAttributeSchemasInput) GetRenderCondition() *string {
	if c == nil {
		return nil
	}
	return c.RenderCondition
}

func (c *ConsentAttributeSchemasInput) GetRepeatable() *bool {
	if c == nil {
		return nil
	}
	return c.Repeatable
}

func (c *ConsentAttributeSchemasInput) GetRequired() *bool {
	if c == nil {
		return nil
	}
	return c.Required
}

func (c *ConsentAttributeSchemasInput) GetSchema() *string {
	if c == nil {
		return nil
	}
	return c.Schema
}

func (c *ConsentAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if c == nil {
		return nil
	}
	return c.SettingsFlag
}

func (c *ConsentAttributeSchemasInput) GetShowInTable() *bool {
	if c == nil {
		return nil
	}
	return c.ShowInTable
}

func (c *ConsentAttributeSchemasInput) GetSortable() *bool {
	if c == nil {
		return nil
	}
	return c.Sortable
}

func (c *ConsentAttributeSchemasInput) GetTopic() string {
	if c == nil {
		return ""
	}
	return c.Topic
}

func (c *ConsentAttributeSchemasInput) GetType() SchemasConsentAttributeType {
	if c == nil {
		return SchemasConsentAttributeType("")
	}
	return c.Type
}

func (c *ConsentAttributeSchemasInput) GetValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.ValueFormatter
}

// NumberAttributeSchemasInput - Numeric input
type NumberAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasNumberAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                `json:"default_value,omitempty"`
	Deprecated   *bool                              `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	Format      *string `json:"format,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasNumberAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                             `json:"label"`
	Layout      *string                            `json:"layout,omitempty"`
	Name        string                             `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Whether or not to show a thousands separator
	ShowSeparator *bool `default:"true" json:"show_separator"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                      `default:"true" json:"sortable"`
	Type           SchemasNumberAttributeType `json:"type"`
	ValueFormatter *string                    `json:"value_formatter,omitempty"`
}

func (n NumberAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NumberAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (n *NumberAttributeSchemasInput) GetManifest() []string {
	if n == nil {
		return nil
	}
	return n.Manifest
}

func (n *NumberAttributeSchemasInput) GetPurpose() []string {
	if n == nil {
		return nil
	}
	return n.Purpose
}

func (n *NumberAttributeSchemasInput) GetConstraints() *SchemasNumberAttributeConstraints {
	if n == nil {
		return nil
	}
	return n.Constraints
}

func (n *NumberAttributeSchemasInput) GetDefaultValue() any {
	if n == nil {
		return nil
	}
	return n.DefaultValue
}

func (n *NumberAttributeSchemasInput) GetDeprecated() *bool {
	if n == nil {
		return nil
	}
	return n.Deprecated
}

func (n *NumberAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if n == nil {
		return nil
	}
	return n.EntityBuilderDisableEdit
}

func (n *NumberAttributeSchemasInput) GetFeatureFlag() *string {
	if n == nil {
		return nil
	}
	return n.FeatureFlag
}

func (n *NumberAttributeSchemasInput) GetFormat() *string {
	if n == nil {
		return nil
	}
	return n.Format
}

func (n *NumberAttributeSchemasInput) GetGroup() *string {
	if n == nil {
		return nil
	}
	return n.Group
}

func (n *NumberAttributeSchemasInput) GetHasPrimary() *bool {
	if n == nil {
		return nil
	}
	return n.HasPrimary
}

func (n *NumberAttributeSchemasInput) GetHidden() *bool {
	if n == nil {
		return nil
	}
	return n.Hidden
}

func (n *NumberAttributeSchemasInput) GetHideLabel() *bool {
	if n == nil {
		return nil
	}
	return n.HideLabel
}

func (n *NumberAttributeSchemasInput) GetIcon() *string {
	if n == nil {
		return nil
	}
	return n.Icon
}

func (n *NumberAttributeSchemasInput) GetID() *string {
	if n == nil {
		return nil
	}
	return n.ID
}

func (n *NumberAttributeSchemasInput) GetInfoHelpers() *SchemasNumberAttributeInfoHelpers {
	if n == nil {
		return nil
	}
	return n.InfoHelpers
}

func (n *NumberAttributeSchemasInput) GetLabel() string {
	if n == nil {
		return ""
	}
	return n.Label
}

func (n *NumberAttributeSchemasInput) GetLayout() *string {
	if n == nil {
		return nil
	}
	return n.Layout
}

func (n *NumberAttributeSchemasInput) GetName() string {
	if n == nil {
		return ""
	}
	return n.Name
}

func (n *NumberAttributeSchemasInput) GetOrder() *int64 {
	if n == nil {
		return nil
	}
	return n.Order
}

func (n *NumberAttributeSchemasInput) GetPlaceholder() *string {
	if n == nil {
		return nil
	}
	return n.Placeholder
}

func (n *NumberAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if n == nil {
		return nil
	}
	return n.PreviewValueFormatter
}

func (n *NumberAttributeSchemasInput) GetProtected() *bool {
	if n == nil {
		return nil
	}
	return n.Protected
}

func (n *NumberAttributeSchemasInput) GetReadonly() *bool {
	if n == nil {
		return nil
	}
	return n.Readonly
}

func (n *NumberAttributeSchemasInput) GetRenderCondition() *string {
	if n == nil {
		return nil
	}
	return n.RenderCondition
}

func (n *NumberAttributeSchemasInput) GetRepeatable() *bool {
	if n == nil {
		return nil
	}
	return n.Repeatable
}

func (n *NumberAttributeSchemasInput) GetRequired() *bool {
	if n == nil {
		return nil
	}
	return n.Required
}

func (n *NumberAttributeSchemasInput) GetSchema() *string {
	if n == nil {
		return nil
	}
	return n.Schema
}

func (n *NumberAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if n == nil {
		return nil
	}
	return n.SettingsFlag
}

func (n *NumberAttributeSchemasInput) GetShowInTable() *bool {
	if n == nil {
		return nil
	}
	return n.ShowInTable
}

func (n *NumberAttributeSchemasInput) GetShowSeparator() *bool {
	if n == nil {
		return nil
	}
	return n.ShowSeparator
}

func (n *NumberAttributeSchemasInput) GetSortable() *bool {
	if n == nil {
		return nil
	}
	return n.Sortable
}

func (n *NumberAttributeSchemasInput) GetType() SchemasNumberAttributeType {
	if n == nil {
		return SchemasNumberAttributeType("")
	}
	return n.Type
}

func (n *NumberAttributeSchemasInput) GetValueFormatter() *string {
	if n == nil {
		return nil
	}
	return n.ValueFormatter
}

// MessageEmailAddressAttributeSchemasInput - Message emil address
type MessageEmailAddressAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	Address  *string  `json:"address,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasMessageEmailAddressAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                             `json:"default_value,omitempty"`
	Deprecated   *bool                                           `default:"false" json:"deprecated"`
	EmailType    *string                                         `json:"email_type,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasMessageEmailAddressAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                          `json:"label"`
	Layout      *string                                         `json:"layout,omitempty"`
	Name        string                                          `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema     *string `json:"schema,omitempty"`
	SendStatus *string `json:"send_status,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                                   `default:"true" json:"sortable"`
	Type           SchemasMessageEmailAddressAttributeType `json:"type"`
	ValueFormatter *string                                 `json:"value_formatter,omitempty"`
}

func (m MessageEmailAddressAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MessageEmailAddressAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (m *MessageEmailAddressAttributeSchemasInput) GetManifest() []string {
	if m == nil {
		return nil
	}
	return m.Manifest
}

func (m *MessageEmailAddressAttributeSchemasInput) GetPurpose() []string {
	if m == nil {
		return nil
	}
	return m.Purpose
}

func (m *MessageEmailAddressAttributeSchemasInput) GetAddress() *string {
	if m == nil {
		return nil
	}
	return m.Address
}

func (m *MessageEmailAddressAttributeSchemasInput) GetConstraints() *SchemasMessageEmailAddressAttributeConstraints {
	if m == nil {
		return nil
	}
	return m.Constraints
}

func (m *MessageEmailAddressAttributeSchemasInput) GetDefaultValue() any {
	if m == nil {
		return nil
	}
	return m.DefaultValue
}

func (m *MessageEmailAddressAttributeSchemasInput) GetDeprecated() *bool {
	if m == nil {
		return nil
	}
	return m.Deprecated
}

func (m *MessageEmailAddressAttributeSchemasInput) GetEmailType() *string {
	if m == nil {
		return nil
	}
	return m.EmailType
}

func (m *MessageEmailAddressAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if m == nil {
		return nil
	}
	return m.EntityBuilderDisableEdit
}

func (m *MessageEmailAddressAttributeSchemasInput) GetFeatureFlag() *string {
	if m == nil {
		return nil
	}
	return m.FeatureFlag
}

func (m *MessageEmailAddressAttributeSchemasInput) GetGroup() *string {
	if m == nil {
		return nil
	}
	return m.Group
}

func (m *MessageEmailAddressAttributeSchemasInput) GetHasPrimary() *bool {
	if m == nil {
		return nil
	}
	return m.HasPrimary
}

func (m *MessageEmailAddressAttributeSchemasInput) GetHidden() *bool {
	if m == nil {
		return nil
	}
	return m.Hidden
}

func (m *MessageEmailAddressAttributeSchemasInput) GetHideLabel() *bool {
	if m == nil {
		return nil
	}
	return m.HideLabel
}

func (m *MessageEmailAddressAttributeSchemasInput) GetIcon() *string {
	if m == nil {
		return nil
	}
	return m.Icon
}

func (m *MessageEmailAddressAttributeSchemasInput) GetID() *string {
	if m == nil {
		return nil
	}
	return m.ID
}

func (m *MessageEmailAddressAttributeSchemasInput) GetInfoHelpers() *SchemasMessageEmailAddressAttributeInfoHelpers {
	if m == nil {
		return nil
	}
	return m.InfoHelpers
}

func (m *MessageEmailAddressAttributeSchemasInput) GetLabel() string {
	if m == nil {
		return ""
	}
	return m.Label
}

func (m *MessageEmailAddressAttributeSchemasInput) GetLayout() *string {
	if m == nil {
		return nil
	}
	return m.Layout
}

func (m *MessageEmailAddressAttributeSchemasInput) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MessageEmailAddressAttributeSchemasInput) GetOrder() *int64 {
	if m == nil {
		return nil
	}
	return m.Order
}

func (m *MessageEmailAddressAttributeSchemasInput) GetPlaceholder() *string {
	if m == nil {
		return nil
	}
	return m.Placeholder
}

func (m *MessageEmailAddressAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if m == nil {
		return nil
	}
	return m.PreviewValueFormatter
}

func (m *MessageEmailAddressAttributeSchemasInput) GetProtected() *bool {
	if m == nil {
		return nil
	}
	return m.Protected
}

func (m *MessageEmailAddressAttributeSchemasInput) GetReadonly() *bool {
	if m == nil {
		return nil
	}
	return m.Readonly
}

func (m *MessageEmailAddressAttributeSchemasInput) GetRenderCondition() *string {
	if m == nil {
		return nil
	}
	return m.RenderCondition
}

func (m *MessageEmailAddressAttributeSchemasInput) GetRepeatable() *bool {
	if m == nil {
		return nil
	}
	return m.Repeatable
}

func (m *MessageEmailAddressAttributeSchemasInput) GetRequired() *bool {
	if m == nil {
		return nil
	}
	return m.Required
}

func (m *MessageEmailAddressAttributeSchemasInput) GetSchema() *string {
	if m == nil {
		return nil
	}
	return m.Schema
}

func (m *MessageEmailAddressAttributeSchemasInput) GetSendStatus() *string {
	if m == nil {
		return nil
	}
	return m.SendStatus
}

func (m *MessageEmailAddressAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if m == nil {
		return nil
	}
	return m.SettingsFlag
}

func (m *MessageEmailAddressAttributeSchemasInput) GetShowInTable() *bool {
	if m == nil {
		return nil
	}
	return m.ShowInTable
}

func (m *MessageEmailAddressAttributeSchemasInput) GetSortable() *bool {
	if m == nil {
		return nil
	}
	return m.Sortable
}

func (m *MessageEmailAddressAttributeSchemasInput) GetType() SchemasMessageEmailAddressAttributeType {
	if m == nil {
		return SchemasMessageEmailAddressAttributeType("")
	}
	return m.Type
}

func (m *MessageEmailAddressAttributeSchemasInput) GetValueFormatter() *string {
	if m == nil {
		return nil
	}
	return m.ValueFormatter
}

// TagsAttributeSchemasInput - Tags
type TagsAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasTagsAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                              `json:"default_value,omitempty"`
	Deprecated   *bool                            `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasTagsAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                           `json:"label"`
	Layout      *string                          `json:"layout,omitempty"`
	Name        string                           `json:"name"`
	Options     []string                         `json:"options,omitempty"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                    `default:"true" json:"sortable"`
	Suggestions    []string                 `json:"suggestions,omitempty"`
	Type           SchemasTagsAttributeType `json:"type"`
	ValueFormatter *string                  `json:"value_formatter,omitempty"`
}

func (t TagsAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TagsAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (t *TagsAttributeSchemasInput) GetManifest() []string {
	if t == nil {
		return nil
	}
	return t.Manifest
}

func (t *TagsAttributeSchemasInput) GetPurpose() []string {
	if t == nil {
		return nil
	}
	return t.Purpose
}

func (t *TagsAttributeSchemasInput) GetConstraints() *SchemasTagsAttributeConstraints {
	if t == nil {
		return nil
	}
	return t.Constraints
}

func (t *TagsAttributeSchemasInput) GetDefaultValue() any {
	if t == nil {
		return nil
	}
	return t.DefaultValue
}

func (t *TagsAttributeSchemasInput) GetDeprecated() *bool {
	if t == nil {
		return nil
	}
	return t.Deprecated
}

func (t *TagsAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if t == nil {
		return nil
	}
	return t.EntityBuilderDisableEdit
}

func (t *TagsAttributeSchemasInput) GetFeatureFlag() *string {
	if t == nil {
		return nil
	}
	return t.FeatureFlag
}

func (t *TagsAttributeSchemasInput) GetGroup() *string {
	if t == nil {
		return nil
	}
	return t.Group
}

func (t *TagsAttributeSchemasInput) GetHasPrimary() *bool {
	if t == nil {
		return nil
	}
	return t.HasPrimary
}

func (t *TagsAttributeSchemasInput) GetHidden() *bool {
	if t == nil {
		return nil
	}
	return t.Hidden
}

func (t *TagsAttributeSchemasInput) GetHideLabel() *bool {
	if t == nil {
		return nil
	}
	return t.HideLabel
}

func (t *TagsAttributeSchemasInput) GetIcon() *string {
	if t == nil {
		return nil
	}
	return t.Icon
}

func (t *TagsAttributeSchemasInput) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TagsAttributeSchemasInput) GetInfoHelpers() *SchemasTagsAttributeInfoHelpers {
	if t == nil {
		return nil
	}
	return t.InfoHelpers
}

func (t *TagsAttributeSchemasInput) GetLabel() string {
	if t == nil {
		return ""
	}
	return t.Label
}

func (t *TagsAttributeSchemasInput) GetLayout() *string {
	if t == nil {
		return nil
	}
	return t.Layout
}

func (t *TagsAttributeSchemasInput) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *TagsAttributeSchemasInput) GetOptions() []string {
	if t == nil {
		return nil
	}
	return t.Options
}

func (t *TagsAttributeSchemasInput) GetOrder() *int64 {
	if t == nil {
		return nil
	}
	return t.Order
}

func (t *TagsAttributeSchemasInput) GetPlaceholder() *string {
	if t == nil {
		return nil
	}
	return t.Placeholder
}

func (t *TagsAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if t == nil {
		return nil
	}
	return t.PreviewValueFormatter
}

func (t *TagsAttributeSchemasInput) GetProtected() *bool {
	if t == nil {
		return nil
	}
	return t.Protected
}

func (t *TagsAttributeSchemasInput) GetReadonly() *bool {
	if t == nil {
		return nil
	}
	return t.Readonly
}

func (t *TagsAttributeSchemasInput) GetRenderCondition() *string {
	if t == nil {
		return nil
	}
	return t.RenderCondition
}

func (t *TagsAttributeSchemasInput) GetRepeatable() *bool {
	if t == nil {
		return nil
	}
	return t.Repeatable
}

func (t *TagsAttributeSchemasInput) GetRequired() *bool {
	if t == nil {
		return nil
	}
	return t.Required
}

func (t *TagsAttributeSchemasInput) GetSchema() *string {
	if t == nil {
		return nil
	}
	return t.Schema
}

func (t *TagsAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if t == nil {
		return nil
	}
	return t.SettingsFlag
}

func (t *TagsAttributeSchemasInput) GetShowInTable() *bool {
	if t == nil {
		return nil
	}
	return t.ShowInTable
}

func (t *TagsAttributeSchemasInput) GetSortable() *bool {
	if t == nil {
		return nil
	}
	return t.Sortable
}

func (t *TagsAttributeSchemasInput) GetSuggestions() []string {
	if t == nil {
		return nil
	}
	return t.Suggestions
}

func (t *TagsAttributeSchemasInput) GetType() SchemasTagsAttributeType {
	if t == nil {
		return SchemasTagsAttributeType("")
	}
	return t.Type
}

func (t *TagsAttributeSchemasInput) GetValueFormatter() *string {
	if t == nil {
		return nil
	}
	return t.ValueFormatter
}

// CurrencyAttributeSchemasInput - Currency input
type CurrencyAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *SchemasCurrencyAttributeConstraints `json:"constraints,omitempty"`
	// An array of currency configurations with a country code (ISO-4217)
	Currency             []Currency `json:"currency"`
	CurrencySelectorOnly *bool      `default:"false" json:"currency_selector_only"`
	DefaultValue         any        `json:"default_value,omitempty"`
	Deprecated           *bool      `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasCurrencyAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                               `json:"label"`
	Layout      *string                              `json:"layout,omitempty"`
	Name        string                               `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                        `default:"true" json:"sortable"`
	Type           SchemasCurrencyAttributeType `json:"type"`
	ValueFormatter *string                      `json:"value_formatter,omitempty"`
}

func (c CurrencyAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CurrencyAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"currency", "label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (c *CurrencyAttributeSchemasInput) GetManifest() []string {
	if c == nil {
		return nil
	}
	return c.Manifest
}

func (c *CurrencyAttributeSchemasInput) GetPurpose() []string {
	if c == nil {
		return nil
	}
	return c.Purpose
}

func (c *CurrencyAttributeSchemasInput) GetConstraints() *SchemasCurrencyAttributeConstraints {
	if c == nil {
		return nil
	}
	return c.Constraints
}

func (c *CurrencyAttributeSchemasInput) GetCurrency() []Currency {
	if c == nil {
		return []Currency{}
	}
	return c.Currency
}

func (c *CurrencyAttributeSchemasInput) GetCurrencySelectorOnly() *bool {
	if c == nil {
		return nil
	}
	return c.CurrencySelectorOnly
}

func (c *CurrencyAttributeSchemasInput) GetDefaultValue() any {
	if c == nil {
		return nil
	}
	return c.DefaultValue
}

func (c *CurrencyAttributeSchemasInput) GetDeprecated() *bool {
	if c == nil {
		return nil
	}
	return c.Deprecated
}

func (c *CurrencyAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if c == nil {
		return nil
	}
	return c.EntityBuilderDisableEdit
}

func (c *CurrencyAttributeSchemasInput) GetFeatureFlag() *string {
	if c == nil {
		return nil
	}
	return c.FeatureFlag
}

func (c *CurrencyAttributeSchemasInput) GetGroup() *string {
	if c == nil {
		return nil
	}
	return c.Group
}

func (c *CurrencyAttributeSchemasInput) GetHasPrimary() *bool {
	if c == nil {
		return nil
	}
	return c.HasPrimary
}

func (c *CurrencyAttributeSchemasInput) GetHidden() *bool {
	if c == nil {
		return nil
	}
	return c.Hidden
}

func (c *CurrencyAttributeSchemasInput) GetHideLabel() *bool {
	if c == nil {
		return nil
	}
	return c.HideLabel
}

func (c *CurrencyAttributeSchemasInput) GetIcon() *string {
	if c == nil {
		return nil
	}
	return c.Icon
}

func (c *CurrencyAttributeSchemasInput) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CurrencyAttributeSchemasInput) GetInfoHelpers() *SchemasCurrencyAttributeInfoHelpers {
	if c == nil {
		return nil
	}
	return c.InfoHelpers
}

func (c *CurrencyAttributeSchemasInput) GetLabel() string {
	if c == nil {
		return ""
	}
	return c.Label
}

func (c *CurrencyAttributeSchemasInput) GetLayout() *string {
	if c == nil {
		return nil
	}
	return c.Layout
}

func (c *CurrencyAttributeSchemasInput) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CurrencyAttributeSchemasInput) GetOrder() *int64 {
	if c == nil {
		return nil
	}
	return c.Order
}

func (c *CurrencyAttributeSchemasInput) GetPlaceholder() *string {
	if c == nil {
		return nil
	}
	return c.Placeholder
}

func (c *CurrencyAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.PreviewValueFormatter
}

func (c *CurrencyAttributeSchemasInput) GetProtected() *bool {
	if c == nil {
		return nil
	}
	return c.Protected
}

func (c *CurrencyAttributeSchemasInput) GetReadonly() *bool {
	if c == nil {
		return nil
	}
	return c.Readonly
}

func (c *CurrencyAttributeSchemasInput) GetRenderCondition() *string {
	if c == nil {
		return nil
	}
	return c.RenderCondition
}

func (c *CurrencyAttributeSchemasInput) GetRepeatable() *bool {
	if c == nil {
		return nil
	}
	return c.Repeatable
}

func (c *CurrencyAttributeSchemasInput) GetRequired() *bool {
	if c == nil {
		return nil
	}
	return c.Required
}

func (c *CurrencyAttributeSchemasInput) GetSchema() *string {
	if c == nil {
		return nil
	}
	return c.Schema
}

func (c *CurrencyAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if c == nil {
		return nil
	}
	return c.SettingsFlag
}

func (c *CurrencyAttributeSchemasInput) GetShowInTable() *bool {
	if c == nil {
		return nil
	}
	return c.ShowInTable
}

func (c *CurrencyAttributeSchemasInput) GetSortable() *bool {
	if c == nil {
		return nil
	}
	return c.Sortable
}

func (c *CurrencyAttributeSchemasInput) GetType() SchemasCurrencyAttributeType {
	if c == nil {
		return SchemasCurrencyAttributeType("")
	}
	return c.Type
}

func (c *CurrencyAttributeSchemasInput) GetValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.ValueFormatter
}

// PaymentMethodRelationAttributeSchemasInput - Reference to a payment method attribute of another entity
type PaymentMethodRelationAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasPaymentMethodRelationAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                               `json:"default_value,omitempty"`
	Deprecated   *bool                                             `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasPaymentMethodRelationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                            `json:"label"`
	Layout      *string                                           `json:"layout,omitempty"`
	Name        string                                            `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                                     `default:"true" json:"sortable"`
	Type           SchemasPaymentMethodRelationAttributeType `json:"type"`
	ValueFormatter *string                                   `json:"value_formatter,omitempty"`
}

func (p PaymentMethodRelationAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentMethodRelationAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetConstraints() *SchemasPaymentMethodRelationAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetInfoHelpers() *SchemasPaymentMethodRelationAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetSchema() *string {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetType() SchemasPaymentMethodRelationAttributeType {
	if p == nil {
		return SchemasPaymentMethodRelationAttributeType("")
	}
	return p.Type
}

func (p *PaymentMethodRelationAttributeSchemasInput) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}

// AddressRelationAttributeSchemasInput - Reference to an address attribute of another entity
type AddressRelationAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *SchemasConstraints `json:"constraints,omitempty"`
	// Default fields visible on addresses
	//
	// Valid values are:
	//   - postal_code (default)
	//   - city (default)
	//   - street (default)
	//   - street_number (default)
	//   - plot_area
	//   - plot_of_land
	//   - suburb
	//   - country
	//   - additional_info
	//   - coordinates
	//   - start_date
	//   - end_date
	//   - salutation
	//   - title
	//   - first_name
	//   - last_name
	//   - company_name
	//
	DefaultAddressFields []string `json:"default_address_fields,omitempty"`
	DefaultValue         any      `json:"default_value,omitempty"`
	Deprecated           *bool    `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasInfoHelpers `json:"info_helpers,omitempty"`
	Label       string              `json:"label"`
	Layout      *string             `json:"layout,omitempty"`
	Name        string              `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool       `default:"true" json:"sortable"`
	Type           SchemasType `json:"type"`
	ValueFormatter *string     `json:"value_formatter,omitempty"`
}

func (a AddressRelationAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AddressRelationAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (a *AddressRelationAttributeSchemasInput) GetManifest() []string {
	if a == nil {
		return nil
	}
	return a.Manifest
}

func (a *AddressRelationAttributeSchemasInput) GetPurpose() []string {
	if a == nil {
		return nil
	}
	return a.Purpose
}

func (a *AddressRelationAttributeSchemasInput) GetConstraints() *SchemasConstraints {
	if a == nil {
		return nil
	}
	return a.Constraints
}

func (a *AddressRelationAttributeSchemasInput) GetDefaultAddressFields() []string {
	if a == nil {
		return nil
	}
	return a.DefaultAddressFields
}

func (a *AddressRelationAttributeSchemasInput) GetDefaultValue() any {
	if a == nil {
		return nil
	}
	return a.DefaultValue
}

func (a *AddressRelationAttributeSchemasInput) GetDeprecated() *bool {
	if a == nil {
		return nil
	}
	return a.Deprecated
}

func (a *AddressRelationAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if a == nil {
		return nil
	}
	return a.EntityBuilderDisableEdit
}

func (a *AddressRelationAttributeSchemasInput) GetFeatureFlag() *string {
	if a == nil {
		return nil
	}
	return a.FeatureFlag
}

func (a *AddressRelationAttributeSchemasInput) GetGroup() *string {
	if a == nil {
		return nil
	}
	return a.Group
}

func (a *AddressRelationAttributeSchemasInput) GetHasPrimary() *bool {
	if a == nil {
		return nil
	}
	return a.HasPrimary
}

func (a *AddressRelationAttributeSchemasInput) GetHidden() *bool {
	if a == nil {
		return nil
	}
	return a.Hidden
}

func (a *AddressRelationAttributeSchemasInput) GetHideLabel() *bool {
	if a == nil {
		return nil
	}
	return a.HideLabel
}

func (a *AddressRelationAttributeSchemasInput) GetIcon() *string {
	if a == nil {
		return nil
	}
	return a.Icon
}

func (a *AddressRelationAttributeSchemasInput) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AddressRelationAttributeSchemasInput) GetInfoHelpers() *SchemasInfoHelpers {
	if a == nil {
		return nil
	}
	return a.InfoHelpers
}

func (a *AddressRelationAttributeSchemasInput) GetLabel() string {
	if a == nil {
		return ""
	}
	return a.Label
}

func (a *AddressRelationAttributeSchemasInput) GetLayout() *string {
	if a == nil {
		return nil
	}
	return a.Layout
}

func (a *AddressRelationAttributeSchemasInput) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AddressRelationAttributeSchemasInput) GetOrder() *int64 {
	if a == nil {
		return nil
	}
	return a.Order
}

func (a *AddressRelationAttributeSchemasInput) GetPlaceholder() *string {
	if a == nil {
		return nil
	}
	return a.Placeholder
}

func (a *AddressRelationAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if a == nil {
		return nil
	}
	return a.PreviewValueFormatter
}

func (a *AddressRelationAttributeSchemasInput) GetProtected() *bool {
	if a == nil {
		return nil
	}
	return a.Protected
}

func (a *AddressRelationAttributeSchemasInput) GetReadonly() *bool {
	if a == nil {
		return nil
	}
	return a.Readonly
}

func (a *AddressRelationAttributeSchemasInput) GetRenderCondition() *string {
	if a == nil {
		return nil
	}
	return a.RenderCondition
}

func (a *AddressRelationAttributeSchemasInput) GetRepeatable() *bool {
	if a == nil {
		return nil
	}
	return a.Repeatable
}

func (a *AddressRelationAttributeSchemasInput) GetRequired() *bool {
	if a == nil {
		return nil
	}
	return a.Required
}

func (a *AddressRelationAttributeSchemasInput) GetSchema() *string {
	if a == nil {
		return nil
	}
	return a.Schema
}

func (a *AddressRelationAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if a == nil {
		return nil
	}
	return a.SettingsFlag
}

func (a *AddressRelationAttributeSchemasInput) GetShowInTable() *bool {
	if a == nil {
		return nil
	}
	return a.ShowInTable
}

func (a *AddressRelationAttributeSchemasInput) GetSortable() *bool {
	if a == nil {
		return nil
	}
	return a.Sortable
}

func (a *AddressRelationAttributeSchemasInput) GetType() SchemasType {
	if a == nil {
		return SchemasType("")
	}
	return a.Type
}

func (a *AddressRelationAttributeSchemasInput) GetValueFormatter() *string {
	if a == nil {
		return nil
	}
	return a.ValueFormatter
}

// SchemasInput - Address attribute
type SchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints *Constraints `json:"constraints,omitempty"`
	// Default fields visible on addresses
	//
	// Valid values are:
	//   - postal_code (default)
	//   - city (default)
	//   - street (default)
	//   - street_number (default)
	//   - plot_area
	//   - plot_of_land
	//   - suburb
	//   - country
	//   - additional_info
	//   - coordinates
	//   - start_date
	//   - end_date
	//   - salutation
	//   - title
	//   - first_name
	//   - last_name
	//   - company_name
	//
	DefaultAddressFields []string `json:"default_address_fields,omitempty"`
	DefaultValue         any      `json:"default_value,omitempty"`
	Deprecated           *bool    `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *InfoHelpers `json:"info_helpers,omitempty"`
	Label       string       `json:"label"`
	Layout      *string      `json:"layout,omitempty"`
	Name        string       `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool   `default:"true" json:"sortable"`
	Type           Type    `json:"type"`
	ValueFormatter *string `json:"value_formatter,omitempty"`
}

func (s SchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (s *SchemasInput) GetManifest() []string {
	if s == nil {
		return nil
	}
	return s.Manifest
}

func (s *SchemasInput) GetPurpose() []string {
	if s == nil {
		return nil
	}
	return s.Purpose
}

func (s *SchemasInput) GetConstraints() *Constraints {
	if s == nil {
		return nil
	}
	return s.Constraints
}

func (s *SchemasInput) GetDefaultAddressFields() []string {
	if s == nil {
		return nil
	}
	return s.DefaultAddressFields
}

func (s *SchemasInput) GetDefaultValue() any {
	if s == nil {
		return nil
	}
	return s.DefaultValue
}

func (s *SchemasInput) GetDeprecated() *bool {
	if s == nil {
		return nil
	}
	return s.Deprecated
}

func (s *SchemasInput) GetEntityBuilderDisableEdit() *bool {
	if s == nil {
		return nil
	}
	return s.EntityBuilderDisableEdit
}

func (s *SchemasInput) GetFeatureFlag() *string {
	if s == nil {
		return nil
	}
	return s.FeatureFlag
}

func (s *SchemasInput) GetGroup() *string {
	if s == nil {
		return nil
	}
	return s.Group
}

func (s *SchemasInput) GetHasPrimary() *bool {
	if s == nil {
		return nil
	}
	return s.HasPrimary
}

func (s *SchemasInput) GetHidden() *bool {
	if s == nil {
		return nil
	}
	return s.Hidden
}

func (s *SchemasInput) GetHideLabel() *bool {
	if s == nil {
		return nil
	}
	return s.HideLabel
}

func (s *SchemasInput) GetIcon() *string {
	if s == nil {
		return nil
	}
	return s.Icon
}

func (s *SchemasInput) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SchemasInput) GetInfoHelpers() *InfoHelpers {
	if s == nil {
		return nil
	}
	return s.InfoHelpers
}

func (s *SchemasInput) GetLabel() string {
	if s == nil {
		return ""
	}
	return s.Label
}

func (s *SchemasInput) GetLayout() *string {
	if s == nil {
		return nil
	}
	return s.Layout
}

func (s *SchemasInput) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SchemasInput) GetOrder() *int64 {
	if s == nil {
		return nil
	}
	return s.Order
}

func (s *SchemasInput) GetPlaceholder() *string {
	if s == nil {
		return nil
	}
	return s.Placeholder
}

func (s *SchemasInput) GetPreviewValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.PreviewValueFormatter
}

func (s *SchemasInput) GetProtected() *bool {
	if s == nil {
		return nil
	}
	return s.Protected
}

func (s *SchemasInput) GetReadonly() *bool {
	if s == nil {
		return nil
	}
	return s.Readonly
}

func (s *SchemasInput) GetRenderCondition() *string {
	if s == nil {
		return nil
	}
	return s.RenderCondition
}

func (s *SchemasInput) GetRepeatable() *bool {
	if s == nil {
		return nil
	}
	return s.Repeatable
}

func (s *SchemasInput) GetRequired() *bool {
	if s == nil {
		return nil
	}
	return s.Required
}

func (s *SchemasInput) GetSchema() *string {
	if s == nil {
		return nil
	}
	return s.Schema
}

func (s *SchemasInput) GetSettingsFlag() []SettingFlag {
	if s == nil {
		return nil
	}
	return s.SettingsFlag
}

func (s *SchemasInput) GetShowInTable() *bool {
	if s == nil {
		return nil
	}
	return s.ShowInTable
}

func (s *SchemasInput) GetSortable() *bool {
	if s == nil {
		return nil
	}
	return s.Sortable
}

func (s *SchemasInput) GetType() Type {
	if s == nil {
		return Type("")
	}
	return s.Type
}

func (s *SchemasInput) GetValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.ValueFormatter
}

// UserRelationAttributeSchemasInput - User Relationship
type UserRelationAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasUserRelationAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                      `json:"default_value,omitempty"`
	Deprecated   *bool                                    `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasUserRelationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                   `json:"label"`
	Layout      *string                                  `json:"layout,omitempty"`
	Multiple    *bool                                    `default:"false" json:"multiple"`
	Name        string                                   `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                            `default:"true" json:"sortable"`
	Type           SchemasUserRelationAttributeType `json:"type"`
	ValueFormatter *string                          `json:"value_formatter,omitempty"`
}

func (u UserRelationAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserRelationAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (u *UserRelationAttributeSchemasInput) GetManifest() []string {
	if u == nil {
		return nil
	}
	return u.Manifest
}

func (u *UserRelationAttributeSchemasInput) GetPurpose() []string {
	if u == nil {
		return nil
	}
	return u.Purpose
}

func (u *UserRelationAttributeSchemasInput) GetConstraints() *SchemasUserRelationAttributeConstraints {
	if u == nil {
		return nil
	}
	return u.Constraints
}

func (u *UserRelationAttributeSchemasInput) GetDefaultValue() any {
	if u == nil {
		return nil
	}
	return u.DefaultValue
}

func (u *UserRelationAttributeSchemasInput) GetDeprecated() *bool {
	if u == nil {
		return nil
	}
	return u.Deprecated
}

func (u *UserRelationAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if u == nil {
		return nil
	}
	return u.EntityBuilderDisableEdit
}

func (u *UserRelationAttributeSchemasInput) GetFeatureFlag() *string {
	if u == nil {
		return nil
	}
	return u.FeatureFlag
}

func (u *UserRelationAttributeSchemasInput) GetGroup() *string {
	if u == nil {
		return nil
	}
	return u.Group
}

func (u *UserRelationAttributeSchemasInput) GetHasPrimary() *bool {
	if u == nil {
		return nil
	}
	return u.HasPrimary
}

func (u *UserRelationAttributeSchemasInput) GetHidden() *bool {
	if u == nil {
		return nil
	}
	return u.Hidden
}

func (u *UserRelationAttributeSchemasInput) GetHideLabel() *bool {
	if u == nil {
		return nil
	}
	return u.HideLabel
}

func (u *UserRelationAttributeSchemasInput) GetIcon() *string {
	if u == nil {
		return nil
	}
	return u.Icon
}

func (u *UserRelationAttributeSchemasInput) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UserRelationAttributeSchemasInput) GetInfoHelpers() *SchemasUserRelationAttributeInfoHelpers {
	if u == nil {
		return nil
	}
	return u.InfoHelpers
}

func (u *UserRelationAttributeSchemasInput) GetLabel() string {
	if u == nil {
		return ""
	}
	return u.Label
}

func (u *UserRelationAttributeSchemasInput) GetLayout() *string {
	if u == nil {
		return nil
	}
	return u.Layout
}

func (u *UserRelationAttributeSchemasInput) GetMultiple() *bool {
	if u == nil {
		return nil
	}
	return u.Multiple
}

func (u *UserRelationAttributeSchemasInput) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UserRelationAttributeSchemasInput) GetOrder() *int64 {
	if u == nil {
		return nil
	}
	return u.Order
}

func (u *UserRelationAttributeSchemasInput) GetPlaceholder() *string {
	if u == nil {
		return nil
	}
	return u.Placeholder
}

func (u *UserRelationAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if u == nil {
		return nil
	}
	return u.PreviewValueFormatter
}

func (u *UserRelationAttributeSchemasInput) GetProtected() *bool {
	if u == nil {
		return nil
	}
	return u.Protected
}

func (u *UserRelationAttributeSchemasInput) GetReadonly() *bool {
	if u == nil {
		return nil
	}
	return u.Readonly
}

func (u *UserRelationAttributeSchemasInput) GetRenderCondition() *string {
	if u == nil {
		return nil
	}
	return u.RenderCondition
}

func (u *UserRelationAttributeSchemasInput) GetRepeatable() *bool {
	if u == nil {
		return nil
	}
	return u.Repeatable
}

func (u *UserRelationAttributeSchemasInput) GetRequired() *bool {
	if u == nil {
		return nil
	}
	return u.Required
}

func (u *UserRelationAttributeSchemasInput) GetSchema() *string {
	if u == nil {
		return nil
	}
	return u.Schema
}

func (u *UserRelationAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if u == nil {
		return nil
	}
	return u.SettingsFlag
}

func (u *UserRelationAttributeSchemasInput) GetShowInTable() *bool {
	if u == nil {
		return nil
	}
	return u.ShowInTable
}

func (u *UserRelationAttributeSchemasInput) GetSortable() *bool {
	if u == nil {
		return nil
	}
	return u.Sortable
}

func (u *UserRelationAttributeSchemasInput) GetType() SchemasUserRelationAttributeType {
	if u == nil {
		return SchemasUserRelationAttributeType("")
	}
	return u.Type
}

func (u *UserRelationAttributeSchemasInput) GetValueFormatter() *string {
	if u == nil {
		return nil
	}
	return u.ValueFormatter
}

// RelationAttributeSchemasInput - Entity Relationship
type RelationAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string  `json:"_manifest,omitempty"`
	Purpose  []string  `json:"_purpose,omitempty"`
	Actions  []Actions `json:"actions,omitempty"`
	// Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is.
	AddButtonLabel *string  `json:"add_button_label,omitempty"`
	AllowedSchemas []string `json:"allowedSchemas,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasRelationAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                  `json:"default_value,omitempty"`
	Deprecated   *bool                                `default:"false" json:"deprecated"`
	// Enables the preview, edition, and creation of relation items on a Master-Details view mode.
	DetailsViewModeEnabled *bool       `default:"false" json:"details_view_mode_enabled"`
	DrawerSize             *DrawerSize `json:"drawer_size,omitempty"`
	EditMode               *EditMode   `json:"edit_mode,omitempty"`
	// When enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link.
	EnableRelationPicker *bool `default:"true" json:"enable_relation_picker"`
	// When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item.
	EnableRelationTags *bool `default:"true" json:"enable_relation_tags"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool   `json:"hide_label,omitempty"`
	Icon      *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasRelationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                               `json:"label"`
	Layout      *string                              `json:"layout,omitempty"`
	Name        string                               `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.
	RelationAffinityMode *RelationAffinityMode `json:"relation_affinity_mode,omitempty"`
	// Additional entity search filter for relation picker
	RelationPickerFilter *RelationPickerFilter `json:"relation_picker_filter,omitempty"`
	RelationType         *RelationType         `json:"relation_type,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// Relations are always repeatables
	Repeatable *bool `default:"true" json:"repeatable"`
	Required   *bool `default:"false" json:"required"`
	// Map of schema slug to target relation attribute
	ReverseAttributes map[string]string `json:"reverse_attributes,omitempty"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is.
	SearchPlaceholder *string `json:"search_placeholder,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                        `default:"true" json:"sortable"`
	SummaryFields  []SummaryFields              `json:"summary_fields,omitempty"`
	Type           SchemasRelationAttributeType `json:"type"`
	ValueFormatter *string                      `json:"value_formatter,omitempty"`
}

func (r RelationAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RelationAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (r *RelationAttributeSchemasInput) GetManifest() []string {
	if r == nil {
		return nil
	}
	return r.Manifest
}

func (r *RelationAttributeSchemasInput) GetPurpose() []string {
	if r == nil {
		return nil
	}
	return r.Purpose
}

func (r *RelationAttributeSchemasInput) GetActions() []Actions {
	if r == nil {
		return nil
	}
	return r.Actions
}

func (r *RelationAttributeSchemasInput) GetAddButtonLabel() *string {
	if r == nil {
		return nil
	}
	return r.AddButtonLabel
}

func (r *RelationAttributeSchemasInput) GetAllowedSchemas() []string {
	if r == nil {
		return nil
	}
	return r.AllowedSchemas
}

func (r *RelationAttributeSchemasInput) GetConstraints() *SchemasRelationAttributeConstraints {
	if r == nil {
		return nil
	}
	return r.Constraints
}

func (r *RelationAttributeSchemasInput) GetDefaultValue() any {
	if r == nil {
		return nil
	}
	return r.DefaultValue
}

func (r *RelationAttributeSchemasInput) GetDeprecated() *bool {
	if r == nil {
		return nil
	}
	return r.Deprecated
}

func (r *RelationAttributeSchemasInput) GetDetailsViewModeEnabled() *bool {
	if r == nil {
		return nil
	}
	return r.DetailsViewModeEnabled
}

func (r *RelationAttributeSchemasInput) GetDrawerSize() *DrawerSize {
	if r == nil {
		return nil
	}
	return r.DrawerSize
}

func (r *RelationAttributeSchemasInput) GetEditMode() *EditMode {
	if r == nil {
		return nil
	}
	return r.EditMode
}

func (r *RelationAttributeSchemasInput) GetEnableRelationPicker() *bool {
	if r == nil {
		return nil
	}
	return r.EnableRelationPicker
}

func (r *RelationAttributeSchemasInput) GetEnableRelationTags() *bool {
	if r == nil {
		return nil
	}
	return r.EnableRelationTags
}

func (r *RelationAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if r == nil {
		return nil
	}
	return r.EntityBuilderDisableEdit
}

func (r *RelationAttributeSchemasInput) GetFeatureFlag() *string {
	if r == nil {
		return nil
	}
	return r.FeatureFlag
}

func (r *RelationAttributeSchemasInput) GetGroup() *string {
	if r == nil {
		return nil
	}
	return r.Group
}

func (r *RelationAttributeSchemasInput) GetHasPrimary() *bool {
	if r == nil {
		return nil
	}
	return r.HasPrimary
}

func (r *RelationAttributeSchemasInput) GetHidden() *bool {
	if r == nil {
		return nil
	}
	return r.Hidden
}

func (r *RelationAttributeSchemasInput) GetHideLabel() *bool {
	if r == nil {
		return nil
	}
	return r.HideLabel
}

func (r *RelationAttributeSchemasInput) GetIcon() *string {
	if r == nil {
		return nil
	}
	return r.Icon
}

func (r *RelationAttributeSchemasInput) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *RelationAttributeSchemasInput) GetInfoHelpers() *SchemasRelationAttributeInfoHelpers {
	if r == nil {
		return nil
	}
	return r.InfoHelpers
}

func (r *RelationAttributeSchemasInput) GetLabel() string {
	if r == nil {
		return ""
	}
	return r.Label
}

func (r *RelationAttributeSchemasInput) GetLayout() *string {
	if r == nil {
		return nil
	}
	return r.Layout
}

func (r *RelationAttributeSchemasInput) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *RelationAttributeSchemasInput) GetOrder() *int64 {
	if r == nil {
		return nil
	}
	return r.Order
}

func (r *RelationAttributeSchemasInput) GetPlaceholder() *string {
	if r == nil {
		return nil
	}
	return r.Placeholder
}

func (r *RelationAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if r == nil {
		return nil
	}
	return r.PreviewValueFormatter
}

func (r *RelationAttributeSchemasInput) GetProtected() *bool {
	if r == nil {
		return nil
	}
	return r.Protected
}

func (r *RelationAttributeSchemasInput) GetReadonly() *bool {
	if r == nil {
		return nil
	}
	return r.Readonly
}

func (r *RelationAttributeSchemasInput) GetRelationAffinityMode() *RelationAffinityMode {
	if r == nil {
		return nil
	}
	return r.RelationAffinityMode
}

func (r *RelationAttributeSchemasInput) GetRelationPickerFilter() *RelationPickerFilter {
	if r == nil {
		return nil
	}
	return r.RelationPickerFilter
}

func (r *RelationAttributeSchemasInput) GetRelationType() *RelationType {
	if r == nil {
		return nil
	}
	return r.RelationType
}

func (r *RelationAttributeSchemasInput) GetRenderCondition() *string {
	if r == nil {
		return nil
	}
	return r.RenderCondition
}

func (r *RelationAttributeSchemasInput) GetRepeatable() *bool {
	if r == nil {
		return nil
	}
	return r.Repeatable
}

func (r *RelationAttributeSchemasInput) GetRequired() *bool {
	if r == nil {
		return nil
	}
	return r.Required
}

func (r *RelationAttributeSchemasInput) GetReverseAttributes() map[string]string {
	if r == nil {
		return nil
	}
	return r.ReverseAttributes
}

func (r *RelationAttributeSchemasInput) GetSchema() *string {
	if r == nil {
		return nil
	}
	return r.Schema
}

func (r *RelationAttributeSchemasInput) GetSearchPlaceholder() *string {
	if r == nil {
		return nil
	}
	return r.SearchPlaceholder
}

func (r *RelationAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if r == nil {
		return nil
	}
	return r.SettingsFlag
}

func (r *RelationAttributeSchemasInput) GetShowInTable() *bool {
	if r == nil {
		return nil
	}
	return r.ShowInTable
}

func (r *RelationAttributeSchemasInput) GetSortable() *bool {
	if r == nil {
		return nil
	}
	return r.Sortable
}

func (r *RelationAttributeSchemasInput) GetSummaryFields() []SummaryFields {
	if r == nil {
		return nil
	}
	return r.SummaryFields
}

func (r *RelationAttributeSchemasInput) GetType() SchemasRelationAttributeType {
	if r == nil {
		return SchemasRelationAttributeType("")
	}
	return r.Type
}

func (r *RelationAttributeSchemasInput) GetValueFormatter() *string {
	if r == nil {
		return nil
	}
	return r.ValueFormatter
}

// SequenceAttributeSchemasInput - Sequence of unique identifiers
type SequenceAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasSequenceAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                  `json:"default_value,omitempty"`
	Deprecated   *bool                                `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasSequenceAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                               `json:"label"`
	Layout      *string                              `json:"layout,omitempty"`
	Name        string                               `json:"name"`
	// Attribute sort order (ascending) in group
	Order       *int64  `json:"order,omitempty"`
	Placeholder *string `json:"placeholder,omitempty"`
	// Prefix added before the sequence number
	Prefix                *string `json:"prefix,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                        `default:"true" json:"sortable"`
	StartNumber    *int64                       `json:"start_number,omitempty"`
	Type           SchemasSequenceAttributeType `json:"type"`
	ValueFormatter *string                      `json:"value_formatter,omitempty"`
}

func (s SequenceAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SequenceAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (s *SequenceAttributeSchemasInput) GetManifest() []string {
	if s == nil {
		return nil
	}
	return s.Manifest
}

func (s *SequenceAttributeSchemasInput) GetPurpose() []string {
	if s == nil {
		return nil
	}
	return s.Purpose
}

func (s *SequenceAttributeSchemasInput) GetConstraints() *SchemasSequenceAttributeConstraints {
	if s == nil {
		return nil
	}
	return s.Constraints
}

func (s *SequenceAttributeSchemasInput) GetDefaultValue() any {
	if s == nil {
		return nil
	}
	return s.DefaultValue
}

func (s *SequenceAttributeSchemasInput) GetDeprecated() *bool {
	if s == nil {
		return nil
	}
	return s.Deprecated
}

func (s *SequenceAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if s == nil {
		return nil
	}
	return s.EntityBuilderDisableEdit
}

func (s *SequenceAttributeSchemasInput) GetFeatureFlag() *string {
	if s == nil {
		return nil
	}
	return s.FeatureFlag
}

func (s *SequenceAttributeSchemasInput) GetGroup() *string {
	if s == nil {
		return nil
	}
	return s.Group
}

func (s *SequenceAttributeSchemasInput) GetHasPrimary() *bool {
	if s == nil {
		return nil
	}
	return s.HasPrimary
}

func (s *SequenceAttributeSchemasInput) GetHidden() *bool {
	if s == nil {
		return nil
	}
	return s.Hidden
}

func (s *SequenceAttributeSchemasInput) GetHideLabel() *bool {
	if s == nil {
		return nil
	}
	return s.HideLabel
}

func (s *SequenceAttributeSchemasInput) GetIcon() *string {
	if s == nil {
		return nil
	}
	return s.Icon
}

func (s *SequenceAttributeSchemasInput) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SequenceAttributeSchemasInput) GetInfoHelpers() *SchemasSequenceAttributeInfoHelpers {
	if s == nil {
		return nil
	}
	return s.InfoHelpers
}

func (s *SequenceAttributeSchemasInput) GetLabel() string {
	if s == nil {
		return ""
	}
	return s.Label
}

func (s *SequenceAttributeSchemasInput) GetLayout() *string {
	if s == nil {
		return nil
	}
	return s.Layout
}

func (s *SequenceAttributeSchemasInput) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SequenceAttributeSchemasInput) GetOrder() *int64 {
	if s == nil {
		return nil
	}
	return s.Order
}

func (s *SequenceAttributeSchemasInput) GetPlaceholder() *string {
	if s == nil {
		return nil
	}
	return s.Placeholder
}

func (s *SequenceAttributeSchemasInput) GetPrefix() *string {
	if s == nil {
		return nil
	}
	return s.Prefix
}

func (s *SequenceAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.PreviewValueFormatter
}

func (s *SequenceAttributeSchemasInput) GetProtected() *bool {
	if s == nil {
		return nil
	}
	return s.Protected
}

func (s *SequenceAttributeSchemasInput) GetReadonly() *bool {
	if s == nil {
		return nil
	}
	return s.Readonly
}

func (s *SequenceAttributeSchemasInput) GetRenderCondition() *string {
	if s == nil {
		return nil
	}
	return s.RenderCondition
}

func (s *SequenceAttributeSchemasInput) GetRepeatable() *bool {
	if s == nil {
		return nil
	}
	return s.Repeatable
}

func (s *SequenceAttributeSchemasInput) GetRequired() *bool {
	if s == nil {
		return nil
	}
	return s.Required
}

func (s *SequenceAttributeSchemasInput) GetSchema() *string {
	if s == nil {
		return nil
	}
	return s.Schema
}

func (s *SequenceAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if s == nil {
		return nil
	}
	return s.SettingsFlag
}

func (s *SequenceAttributeSchemasInput) GetShowInTable() *bool {
	if s == nil {
		return nil
	}
	return s.ShowInTable
}

func (s *SequenceAttributeSchemasInput) GetSortable() *bool {
	if s == nil {
		return nil
	}
	return s.Sortable
}

func (s *SequenceAttributeSchemasInput) GetStartNumber() *int64 {
	if s == nil {
		return nil
	}
	return s.StartNumber
}

func (s *SequenceAttributeSchemasInput) GetType() SchemasSequenceAttributeType {
	if s == nil {
		return SchemasSequenceAttributeType("")
	}
	return s.Type
}

func (s *SequenceAttributeSchemasInput) GetValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.ValueFormatter
}

// StatusAttributeSchemasInput - Status select
type StatusAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasStatusAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                `json:"default_value,omitempty"`
	Deprecated   *bool                              `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasStatusAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                             `json:"label"`
	Layout      *string                            `json:"layout,omitempty"`
	Name        string                             `json:"name"`
	Options     []*SchemasStatusAttributeOptions   `json:"options,omitempty"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                      `default:"true" json:"sortable"`
	Type           SchemasStatusAttributeType `json:"type"`
	ValueFormatter *string                    `json:"value_formatter,omitempty"`
}

func (s StatusAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StatusAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (s *StatusAttributeSchemasInput) GetManifest() []string {
	if s == nil {
		return nil
	}
	return s.Manifest
}

func (s *StatusAttributeSchemasInput) GetPurpose() []string {
	if s == nil {
		return nil
	}
	return s.Purpose
}

func (s *StatusAttributeSchemasInput) GetConstraints() *SchemasStatusAttributeConstraints {
	if s == nil {
		return nil
	}
	return s.Constraints
}

func (s *StatusAttributeSchemasInput) GetDefaultValue() any {
	if s == nil {
		return nil
	}
	return s.DefaultValue
}

func (s *StatusAttributeSchemasInput) GetDeprecated() *bool {
	if s == nil {
		return nil
	}
	return s.Deprecated
}

func (s *StatusAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if s == nil {
		return nil
	}
	return s.EntityBuilderDisableEdit
}

func (s *StatusAttributeSchemasInput) GetFeatureFlag() *string {
	if s == nil {
		return nil
	}
	return s.FeatureFlag
}

func (s *StatusAttributeSchemasInput) GetGroup() *string {
	if s == nil {
		return nil
	}
	return s.Group
}

func (s *StatusAttributeSchemasInput) GetHasPrimary() *bool {
	if s == nil {
		return nil
	}
	return s.HasPrimary
}

func (s *StatusAttributeSchemasInput) GetHidden() *bool {
	if s == nil {
		return nil
	}
	return s.Hidden
}

func (s *StatusAttributeSchemasInput) GetHideLabel() *bool {
	if s == nil {
		return nil
	}
	return s.HideLabel
}

func (s *StatusAttributeSchemasInput) GetIcon() *string {
	if s == nil {
		return nil
	}
	return s.Icon
}

func (s *StatusAttributeSchemasInput) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *StatusAttributeSchemasInput) GetInfoHelpers() *SchemasStatusAttributeInfoHelpers {
	if s == nil {
		return nil
	}
	return s.InfoHelpers
}

func (s *StatusAttributeSchemasInput) GetLabel() string {
	if s == nil {
		return ""
	}
	return s.Label
}

func (s *StatusAttributeSchemasInput) GetLayout() *string {
	if s == nil {
		return nil
	}
	return s.Layout
}

func (s *StatusAttributeSchemasInput) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *StatusAttributeSchemasInput) GetOptions() []*SchemasStatusAttributeOptions {
	if s == nil {
		return nil
	}
	return s.Options
}

func (s *StatusAttributeSchemasInput) GetOrder() *int64 {
	if s == nil {
		return nil
	}
	return s.Order
}

func (s *StatusAttributeSchemasInput) GetPlaceholder() *string {
	if s == nil {
		return nil
	}
	return s.Placeholder
}

func (s *StatusAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.PreviewValueFormatter
}

func (s *StatusAttributeSchemasInput) GetProtected() *bool {
	if s == nil {
		return nil
	}
	return s.Protected
}

func (s *StatusAttributeSchemasInput) GetReadonly() *bool {
	if s == nil {
		return nil
	}
	return s.Readonly
}

func (s *StatusAttributeSchemasInput) GetRenderCondition() *string {
	if s == nil {
		return nil
	}
	return s.RenderCondition
}

func (s *StatusAttributeSchemasInput) GetRepeatable() *bool {
	if s == nil {
		return nil
	}
	return s.Repeatable
}

func (s *StatusAttributeSchemasInput) GetRequired() *bool {
	if s == nil {
		return nil
	}
	return s.Required
}

func (s *StatusAttributeSchemasInput) GetSchema() *string {
	if s == nil {
		return nil
	}
	return s.Schema
}

func (s *StatusAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if s == nil {
		return nil
	}
	return s.SettingsFlag
}

func (s *StatusAttributeSchemasInput) GetShowInTable() *bool {
	if s == nil {
		return nil
	}
	return s.ShowInTable
}

func (s *StatusAttributeSchemasInput) GetSortable() *bool {
	if s == nil {
		return nil
	}
	return s.Sortable
}

func (s *StatusAttributeSchemasInput) GetType() SchemasStatusAttributeType {
	if s == nil {
		return SchemasStatusAttributeType("")
	}
	return s.Type
}

func (s *StatusAttributeSchemasInput) GetValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.ValueFormatter
}

// MultiSelectAttributeSchemasInput - Multi Choice Selection
type MultiSelectAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// Allow arbitrary input values in addition to provided options
	AllowAny *bool `json:"allow_any,omitempty"`
	// controls if the 360 ui will allow the user to enter a value which is not defined by the options
	AllowExtraOptions *bool `json:"allow_extra_options,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasMultiSelectAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                     `json:"default_value,omitempty"`
	Deprecated   *bool                                   `default:"false" json:"deprecated"`
	// controls if the matching of values against the options is case sensitive or not
	DisableCaseSensitive *bool `json:"disable_case_sensitive,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasMultiSelectAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                                  `json:"label"`
	Layout      *string                                 `json:"layout,omitempty"`
	Name        string                                  `json:"name"`
	Options     []*OptionsObj                           `json:"options,omitempty"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                           `default:"true" json:"sortable"`
	Type           SchemasMultiSelectAttributeType `json:"type"`
	ValueFormatter *string                         `json:"value_formatter,omitempty"`
}

func (m MultiSelectAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MultiSelectAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (m *MultiSelectAttributeSchemasInput) GetManifest() []string {
	if m == nil {
		return nil
	}
	return m.Manifest
}

func (m *MultiSelectAttributeSchemasInput) GetPurpose() []string {
	if m == nil {
		return nil
	}
	return m.Purpose
}

func (m *MultiSelectAttributeSchemasInput) GetAllowAny() *bool {
	if m == nil {
		return nil
	}
	return m.AllowAny
}

func (m *MultiSelectAttributeSchemasInput) GetAllowExtraOptions() *bool {
	if m == nil {
		return nil
	}
	return m.AllowExtraOptions
}

func (m *MultiSelectAttributeSchemasInput) GetConstraints() *SchemasMultiSelectAttributeConstraints {
	if m == nil {
		return nil
	}
	return m.Constraints
}

func (m *MultiSelectAttributeSchemasInput) GetDefaultValue() any {
	if m == nil {
		return nil
	}
	return m.DefaultValue
}

func (m *MultiSelectAttributeSchemasInput) GetDeprecated() *bool {
	if m == nil {
		return nil
	}
	return m.Deprecated
}

func (m *MultiSelectAttributeSchemasInput) GetDisableCaseSensitive() *bool {
	if m == nil {
		return nil
	}
	return m.DisableCaseSensitive
}

func (m *MultiSelectAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if m == nil {
		return nil
	}
	return m.EntityBuilderDisableEdit
}

func (m *MultiSelectAttributeSchemasInput) GetFeatureFlag() *string {
	if m == nil {
		return nil
	}
	return m.FeatureFlag
}

func (m *MultiSelectAttributeSchemasInput) GetGroup() *string {
	if m == nil {
		return nil
	}
	return m.Group
}

func (m *MultiSelectAttributeSchemasInput) GetHasPrimary() *bool {
	if m == nil {
		return nil
	}
	return m.HasPrimary
}

func (m *MultiSelectAttributeSchemasInput) GetHidden() *bool {
	if m == nil {
		return nil
	}
	return m.Hidden
}

func (m *MultiSelectAttributeSchemasInput) GetHideLabel() *bool {
	if m == nil {
		return nil
	}
	return m.HideLabel
}

func (m *MultiSelectAttributeSchemasInput) GetIcon() *string {
	if m == nil {
		return nil
	}
	return m.Icon
}

func (m *MultiSelectAttributeSchemasInput) GetID() *string {
	if m == nil {
		return nil
	}
	return m.ID
}

func (m *MultiSelectAttributeSchemasInput) GetInfoHelpers() *SchemasMultiSelectAttributeInfoHelpers {
	if m == nil {
		return nil
	}
	return m.InfoHelpers
}

func (m *MultiSelectAttributeSchemasInput) GetLabel() string {
	if m == nil {
		return ""
	}
	return m.Label
}

func (m *MultiSelectAttributeSchemasInput) GetLayout() *string {
	if m == nil {
		return nil
	}
	return m.Layout
}

func (m *MultiSelectAttributeSchemasInput) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MultiSelectAttributeSchemasInput) GetOptions() []*OptionsObj {
	if m == nil {
		return nil
	}
	return m.Options
}

func (m *MultiSelectAttributeSchemasInput) GetOrder() *int64 {
	if m == nil {
		return nil
	}
	return m.Order
}

func (m *MultiSelectAttributeSchemasInput) GetPlaceholder() *string {
	if m == nil {
		return nil
	}
	return m.Placeholder
}

func (m *MultiSelectAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if m == nil {
		return nil
	}
	return m.PreviewValueFormatter
}

func (m *MultiSelectAttributeSchemasInput) GetProtected() *bool {
	if m == nil {
		return nil
	}
	return m.Protected
}

func (m *MultiSelectAttributeSchemasInput) GetReadonly() *bool {
	if m == nil {
		return nil
	}
	return m.Readonly
}

func (m *MultiSelectAttributeSchemasInput) GetRenderCondition() *string {
	if m == nil {
		return nil
	}
	return m.RenderCondition
}

func (m *MultiSelectAttributeSchemasInput) GetRepeatable() *bool {
	if m == nil {
		return nil
	}
	return m.Repeatable
}

func (m *MultiSelectAttributeSchemasInput) GetRequired() *bool {
	if m == nil {
		return nil
	}
	return m.Required
}

func (m *MultiSelectAttributeSchemasInput) GetSchema() *string {
	if m == nil {
		return nil
	}
	return m.Schema
}

func (m *MultiSelectAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if m == nil {
		return nil
	}
	return m.SettingsFlag
}

func (m *MultiSelectAttributeSchemasInput) GetShowInTable() *bool {
	if m == nil {
		return nil
	}
	return m.ShowInTable
}

func (m *MultiSelectAttributeSchemasInput) GetSortable() *bool {
	if m == nil {
		return nil
	}
	return m.Sortable
}

func (m *MultiSelectAttributeSchemasInput) GetType() SchemasMultiSelectAttributeType {
	if m == nil {
		return SchemasMultiSelectAttributeType("")
	}
	return m.Type
}

func (m *MultiSelectAttributeSchemasInput) GetValueFormatter() *string {
	if m == nil {
		return nil
	}
	return m.ValueFormatter
}

// SelectAttributeSchemasInput - Dropdown select
type SelectAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// Allow arbitrary input values in addition to provided options
	AllowAny *bool `json:"allow_any,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasSelectAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                `json:"default_value,omitempty"`
	Deprecated   *bool                              `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasSelectAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                             `json:"label"`
	Layout      *string                            `json:"layout,omitempty"`
	Name        string                             `json:"name"`
	Options     []*SchemasOptions                  `json:"options,omitempty"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                      `default:"true" json:"sortable"`
	Type           SchemasSelectAttributeType `json:"type"`
	ValueFormatter *string                    `json:"value_formatter,omitempty"`
}

func (s SelectAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SelectAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (s *SelectAttributeSchemasInput) GetManifest() []string {
	if s == nil {
		return nil
	}
	return s.Manifest
}

func (s *SelectAttributeSchemasInput) GetPurpose() []string {
	if s == nil {
		return nil
	}
	return s.Purpose
}

func (s *SelectAttributeSchemasInput) GetAllowAny() *bool {
	if s == nil {
		return nil
	}
	return s.AllowAny
}

func (s *SelectAttributeSchemasInput) GetConstraints() *SchemasSelectAttributeConstraints {
	if s == nil {
		return nil
	}
	return s.Constraints
}

func (s *SelectAttributeSchemasInput) GetDefaultValue() any {
	if s == nil {
		return nil
	}
	return s.DefaultValue
}

func (s *SelectAttributeSchemasInput) GetDeprecated() *bool {
	if s == nil {
		return nil
	}
	return s.Deprecated
}

func (s *SelectAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if s == nil {
		return nil
	}
	return s.EntityBuilderDisableEdit
}

func (s *SelectAttributeSchemasInput) GetFeatureFlag() *string {
	if s == nil {
		return nil
	}
	return s.FeatureFlag
}

func (s *SelectAttributeSchemasInput) GetGroup() *string {
	if s == nil {
		return nil
	}
	return s.Group
}

func (s *SelectAttributeSchemasInput) GetHasPrimary() *bool {
	if s == nil {
		return nil
	}
	return s.HasPrimary
}

func (s *SelectAttributeSchemasInput) GetHidden() *bool {
	if s == nil {
		return nil
	}
	return s.Hidden
}

func (s *SelectAttributeSchemasInput) GetHideLabel() *bool {
	if s == nil {
		return nil
	}
	return s.HideLabel
}

func (s *SelectAttributeSchemasInput) GetIcon() *string {
	if s == nil {
		return nil
	}
	return s.Icon
}

func (s *SelectAttributeSchemasInput) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SelectAttributeSchemasInput) GetInfoHelpers() *SchemasSelectAttributeInfoHelpers {
	if s == nil {
		return nil
	}
	return s.InfoHelpers
}

func (s *SelectAttributeSchemasInput) GetLabel() string {
	if s == nil {
		return ""
	}
	return s.Label
}

func (s *SelectAttributeSchemasInput) GetLayout() *string {
	if s == nil {
		return nil
	}
	return s.Layout
}

func (s *SelectAttributeSchemasInput) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SelectAttributeSchemasInput) GetOptions() []*SchemasOptions {
	if s == nil {
		return nil
	}
	return s.Options
}

func (s *SelectAttributeSchemasInput) GetOrder() *int64 {
	if s == nil {
		return nil
	}
	return s.Order
}

func (s *SelectAttributeSchemasInput) GetPlaceholder() *string {
	if s == nil {
		return nil
	}
	return s.Placeholder
}

func (s *SelectAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.PreviewValueFormatter
}

func (s *SelectAttributeSchemasInput) GetProtected() *bool {
	if s == nil {
		return nil
	}
	return s.Protected
}

func (s *SelectAttributeSchemasInput) GetReadonly() *bool {
	if s == nil {
		return nil
	}
	return s.Readonly
}

func (s *SelectAttributeSchemasInput) GetRenderCondition() *string {
	if s == nil {
		return nil
	}
	return s.RenderCondition
}

func (s *SelectAttributeSchemasInput) GetRepeatable() *bool {
	if s == nil {
		return nil
	}
	return s.Repeatable
}

func (s *SelectAttributeSchemasInput) GetRequired() *bool {
	if s == nil {
		return nil
	}
	return s.Required
}

func (s *SelectAttributeSchemasInput) GetSchema() *string {
	if s == nil {
		return nil
	}
	return s.Schema
}

func (s *SelectAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if s == nil {
		return nil
	}
	return s.SettingsFlag
}

func (s *SelectAttributeSchemasInput) GetShowInTable() *bool {
	if s == nil {
		return nil
	}
	return s.ShowInTable
}

func (s *SelectAttributeSchemasInput) GetSortable() *bool {
	if s == nil {
		return nil
	}
	return s.Sortable
}

func (s *SelectAttributeSchemasInput) GetType() SchemasSelectAttributeType {
	if s == nil {
		return SchemasSelectAttributeType("")
	}
	return s.Type
}

func (s *SelectAttributeSchemasInput) GetValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.ValueFormatter
}

// BooleanAttributeSchemasInput - Yes / No Toggle
type BooleanAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasBooleanAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                 `json:"default_value,omitempty"`
	Deprecated   *bool                               `default:"false" json:"deprecated"`
	DisplayType  *DisplayType                        `default:"switch" json:"display_type"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasBooleanAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                              `json:"label"`
	Layout      *string                             `json:"layout,omitempty"`
	Name        string                              `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                       `default:"true" json:"sortable"`
	Type           SchemasBooleanAttributeType `json:"type"`
	ValueFormatter *string                     `json:"value_formatter,omitempty"`
}

func (b BooleanAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BooleanAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (b *BooleanAttributeSchemasInput) GetManifest() []string {
	if b == nil {
		return nil
	}
	return b.Manifest
}

func (b *BooleanAttributeSchemasInput) GetPurpose() []string {
	if b == nil {
		return nil
	}
	return b.Purpose
}

func (b *BooleanAttributeSchemasInput) GetConstraints() *SchemasBooleanAttributeConstraints {
	if b == nil {
		return nil
	}
	return b.Constraints
}

func (b *BooleanAttributeSchemasInput) GetDefaultValue() any {
	if b == nil {
		return nil
	}
	return b.DefaultValue
}

func (b *BooleanAttributeSchemasInput) GetDeprecated() *bool {
	if b == nil {
		return nil
	}
	return b.Deprecated
}

func (b *BooleanAttributeSchemasInput) GetDisplayType() *DisplayType {
	if b == nil {
		return nil
	}
	return b.DisplayType
}

func (b *BooleanAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if b == nil {
		return nil
	}
	return b.EntityBuilderDisableEdit
}

func (b *BooleanAttributeSchemasInput) GetFeatureFlag() *string {
	if b == nil {
		return nil
	}
	return b.FeatureFlag
}

func (b *BooleanAttributeSchemasInput) GetGroup() *string {
	if b == nil {
		return nil
	}
	return b.Group
}

func (b *BooleanAttributeSchemasInput) GetHasPrimary() *bool {
	if b == nil {
		return nil
	}
	return b.HasPrimary
}

func (b *BooleanAttributeSchemasInput) GetHidden() *bool {
	if b == nil {
		return nil
	}
	return b.Hidden
}

func (b *BooleanAttributeSchemasInput) GetHideLabel() *bool {
	if b == nil {
		return nil
	}
	return b.HideLabel
}

func (b *BooleanAttributeSchemasInput) GetIcon() *string {
	if b == nil {
		return nil
	}
	return b.Icon
}

func (b *BooleanAttributeSchemasInput) GetID() *string {
	if b == nil {
		return nil
	}
	return b.ID
}

func (b *BooleanAttributeSchemasInput) GetInfoHelpers() *SchemasBooleanAttributeInfoHelpers {
	if b == nil {
		return nil
	}
	return b.InfoHelpers
}

func (b *BooleanAttributeSchemasInput) GetLabel() string {
	if b == nil {
		return ""
	}
	return b.Label
}

func (b *BooleanAttributeSchemasInput) GetLayout() *string {
	if b == nil {
		return nil
	}
	return b.Layout
}

func (b *BooleanAttributeSchemasInput) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *BooleanAttributeSchemasInput) GetOrder() *int64 {
	if b == nil {
		return nil
	}
	return b.Order
}

func (b *BooleanAttributeSchemasInput) GetPlaceholder() *string {
	if b == nil {
		return nil
	}
	return b.Placeholder
}

func (b *BooleanAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if b == nil {
		return nil
	}
	return b.PreviewValueFormatter
}

func (b *BooleanAttributeSchemasInput) GetProtected() *bool {
	if b == nil {
		return nil
	}
	return b.Protected
}

func (b *BooleanAttributeSchemasInput) GetReadonly() *bool {
	if b == nil {
		return nil
	}
	return b.Readonly
}

func (b *BooleanAttributeSchemasInput) GetRenderCondition() *string {
	if b == nil {
		return nil
	}
	return b.RenderCondition
}

func (b *BooleanAttributeSchemasInput) GetRepeatable() *bool {
	if b == nil {
		return nil
	}
	return b.Repeatable
}

func (b *BooleanAttributeSchemasInput) GetRequired() *bool {
	if b == nil {
		return nil
	}
	return b.Required
}

func (b *BooleanAttributeSchemasInput) GetSchema() *string {
	if b == nil {
		return nil
	}
	return b.Schema
}

func (b *BooleanAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if b == nil {
		return nil
	}
	return b.SettingsFlag
}

func (b *BooleanAttributeSchemasInput) GetShowInTable() *bool {
	if b == nil {
		return nil
	}
	return b.ShowInTable
}

func (b *BooleanAttributeSchemasInput) GetSortable() *bool {
	if b == nil {
		return nil
	}
	return b.Sortable
}

func (b *BooleanAttributeSchemasInput) GetType() SchemasBooleanAttributeType {
	if b == nil {
		return SchemasBooleanAttributeType("")
	}
	return b.Type
}

func (b *BooleanAttributeSchemasInput) GetValueFormatter() *string {
	if b == nil {
		return nil
	}
	return b.ValueFormatter
}

// CountryAttributeSchemasInput - Country picker
type CountryAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasCountryAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                                 `json:"default_value,omitempty"`
	Deprecated   *bool                               `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasCountryAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                              `json:"label"`
	Layout      *string                             `json:"layout,omitempty"`
	Name        string                              `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                       `default:"true" json:"sortable"`
	Type           SchemasCountryAttributeType `json:"type"`
	ValueFormatter *string                     `json:"value_formatter,omitempty"`
}

func (c CountryAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CountryAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (c *CountryAttributeSchemasInput) GetManifest() []string {
	if c == nil {
		return nil
	}
	return c.Manifest
}

func (c *CountryAttributeSchemasInput) GetPurpose() []string {
	if c == nil {
		return nil
	}
	return c.Purpose
}

func (c *CountryAttributeSchemasInput) GetConstraints() *SchemasCountryAttributeConstraints {
	if c == nil {
		return nil
	}
	return c.Constraints
}

func (c *CountryAttributeSchemasInput) GetDefaultValue() any {
	if c == nil {
		return nil
	}
	return c.DefaultValue
}

func (c *CountryAttributeSchemasInput) GetDeprecated() *bool {
	if c == nil {
		return nil
	}
	return c.Deprecated
}

func (c *CountryAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if c == nil {
		return nil
	}
	return c.EntityBuilderDisableEdit
}

func (c *CountryAttributeSchemasInput) GetFeatureFlag() *string {
	if c == nil {
		return nil
	}
	return c.FeatureFlag
}

func (c *CountryAttributeSchemasInput) GetGroup() *string {
	if c == nil {
		return nil
	}
	return c.Group
}

func (c *CountryAttributeSchemasInput) GetHasPrimary() *bool {
	if c == nil {
		return nil
	}
	return c.HasPrimary
}

func (c *CountryAttributeSchemasInput) GetHidden() *bool {
	if c == nil {
		return nil
	}
	return c.Hidden
}

func (c *CountryAttributeSchemasInput) GetHideLabel() *bool {
	if c == nil {
		return nil
	}
	return c.HideLabel
}

func (c *CountryAttributeSchemasInput) GetIcon() *string {
	if c == nil {
		return nil
	}
	return c.Icon
}

func (c *CountryAttributeSchemasInput) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CountryAttributeSchemasInput) GetInfoHelpers() *SchemasCountryAttributeInfoHelpers {
	if c == nil {
		return nil
	}
	return c.InfoHelpers
}

func (c *CountryAttributeSchemasInput) GetLabel() string {
	if c == nil {
		return ""
	}
	return c.Label
}

func (c *CountryAttributeSchemasInput) GetLayout() *string {
	if c == nil {
		return nil
	}
	return c.Layout
}

func (c *CountryAttributeSchemasInput) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CountryAttributeSchemasInput) GetOrder() *int64 {
	if c == nil {
		return nil
	}
	return c.Order
}

func (c *CountryAttributeSchemasInput) GetPlaceholder() *string {
	if c == nil {
		return nil
	}
	return c.Placeholder
}

func (c *CountryAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.PreviewValueFormatter
}

func (c *CountryAttributeSchemasInput) GetProtected() *bool {
	if c == nil {
		return nil
	}
	return c.Protected
}

func (c *CountryAttributeSchemasInput) GetReadonly() *bool {
	if c == nil {
		return nil
	}
	return c.Readonly
}

func (c *CountryAttributeSchemasInput) GetRenderCondition() *string {
	if c == nil {
		return nil
	}
	return c.RenderCondition
}

func (c *CountryAttributeSchemasInput) GetRepeatable() *bool {
	if c == nil {
		return nil
	}
	return c.Repeatable
}

func (c *CountryAttributeSchemasInput) GetRequired() *bool {
	if c == nil {
		return nil
	}
	return c.Required
}

func (c *CountryAttributeSchemasInput) GetSchema() *string {
	if c == nil {
		return nil
	}
	return c.Schema
}

func (c *CountryAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if c == nil {
		return nil
	}
	return c.SettingsFlag
}

func (c *CountryAttributeSchemasInput) GetShowInTable() *bool {
	if c == nil {
		return nil
	}
	return c.ShowInTable
}

func (c *CountryAttributeSchemasInput) GetSortable() *bool {
	if c == nil {
		return nil
	}
	return c.Sortable
}

func (c *CountryAttributeSchemasInput) GetType() SchemasCountryAttributeType {
	if c == nil {
		return SchemasCountryAttributeType("")
	}
	return c.Type
}

func (c *CountryAttributeSchemasInput) GetValueFormatter() *string {
	if c == nil {
		return nil
	}
	return c.ValueFormatter
}

// DateAttributeSchemasInput - Date or Datetime picker
type DateAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasDateAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                              `json:"default_value,omitempty"`
	Deprecated   *bool                            `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasDateAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                           `json:"label"`
	Layout      *string                          `json:"layout,omitempty"`
	Name        string                           `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                    `default:"true" json:"sortable"`
	Type           SchemasDateAttributeType `json:"type"`
	ValueFormatter *string                  `json:"value_formatter,omitempty"`
}

func (d DateAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DateAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (d *DateAttributeSchemasInput) GetManifest() []string {
	if d == nil {
		return nil
	}
	return d.Manifest
}

func (d *DateAttributeSchemasInput) GetPurpose() []string {
	if d == nil {
		return nil
	}
	return d.Purpose
}

func (d *DateAttributeSchemasInput) GetConstraints() *SchemasDateAttributeConstraints {
	if d == nil {
		return nil
	}
	return d.Constraints
}

func (d *DateAttributeSchemasInput) GetDefaultValue() any {
	if d == nil {
		return nil
	}
	return d.DefaultValue
}

func (d *DateAttributeSchemasInput) GetDeprecated() *bool {
	if d == nil {
		return nil
	}
	return d.Deprecated
}

func (d *DateAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if d == nil {
		return nil
	}
	return d.EntityBuilderDisableEdit
}

func (d *DateAttributeSchemasInput) GetFeatureFlag() *string {
	if d == nil {
		return nil
	}
	return d.FeatureFlag
}

func (d *DateAttributeSchemasInput) GetGroup() *string {
	if d == nil {
		return nil
	}
	return d.Group
}

func (d *DateAttributeSchemasInput) GetHasPrimary() *bool {
	if d == nil {
		return nil
	}
	return d.HasPrimary
}

func (d *DateAttributeSchemasInput) GetHidden() *bool {
	if d == nil {
		return nil
	}
	return d.Hidden
}

func (d *DateAttributeSchemasInput) GetHideLabel() *bool {
	if d == nil {
		return nil
	}
	return d.HideLabel
}

func (d *DateAttributeSchemasInput) GetIcon() *string {
	if d == nil {
		return nil
	}
	return d.Icon
}

func (d *DateAttributeSchemasInput) GetID() *string {
	if d == nil {
		return nil
	}
	return d.ID
}

func (d *DateAttributeSchemasInput) GetInfoHelpers() *SchemasDateAttributeInfoHelpers {
	if d == nil {
		return nil
	}
	return d.InfoHelpers
}

func (d *DateAttributeSchemasInput) GetLabel() string {
	if d == nil {
		return ""
	}
	return d.Label
}

func (d *DateAttributeSchemasInput) GetLayout() *string {
	if d == nil {
		return nil
	}
	return d.Layout
}

func (d *DateAttributeSchemasInput) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DateAttributeSchemasInput) GetOrder() *int64 {
	if d == nil {
		return nil
	}
	return d.Order
}

func (d *DateAttributeSchemasInput) GetPlaceholder() *string {
	if d == nil {
		return nil
	}
	return d.Placeholder
}

func (d *DateAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if d == nil {
		return nil
	}
	return d.PreviewValueFormatter
}

func (d *DateAttributeSchemasInput) GetProtected() *bool {
	if d == nil {
		return nil
	}
	return d.Protected
}

func (d *DateAttributeSchemasInput) GetReadonly() *bool {
	if d == nil {
		return nil
	}
	return d.Readonly
}

func (d *DateAttributeSchemasInput) GetRenderCondition() *string {
	if d == nil {
		return nil
	}
	return d.RenderCondition
}

func (d *DateAttributeSchemasInput) GetRepeatable() *bool {
	if d == nil {
		return nil
	}
	return d.Repeatable
}

func (d *DateAttributeSchemasInput) GetRequired() *bool {
	if d == nil {
		return nil
	}
	return d.Required
}

func (d *DateAttributeSchemasInput) GetSchema() *string {
	if d == nil {
		return nil
	}
	return d.Schema
}

func (d *DateAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if d == nil {
		return nil
	}
	return d.SettingsFlag
}

func (d *DateAttributeSchemasInput) GetShowInTable() *bool {
	if d == nil {
		return nil
	}
	return d.ShowInTable
}

func (d *DateAttributeSchemasInput) GetSortable() *bool {
	if d == nil {
		return nil
	}
	return d.Sortable
}

func (d *DateAttributeSchemasInput) GetType() SchemasDateAttributeType {
	if d == nil {
		return SchemasDateAttributeType("")
	}
	return d.Type
}

func (d *DateAttributeSchemasInput) GetValueFormatter() *string {
	if d == nil {
		return nil
	}
	return d.ValueFormatter
}

// LinkAttributeSchemasInput - Link with title and href
type LinkAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasLinkAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                              `json:"default_value,omitempty"`
	Deprecated   *bool                            `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasLinkAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                           `json:"label"`
	Layout      *string                          `json:"layout,omitempty"`
	Name        string                           `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                    `default:"true" json:"sortable"`
	Type           SchemasLinkAttributeType `json:"type"`
	ValueFormatter *string                  `json:"value_formatter,omitempty"`
}

func (l LinkAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LinkAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (l *LinkAttributeSchemasInput) GetManifest() []string {
	if l == nil {
		return nil
	}
	return l.Manifest
}

func (l *LinkAttributeSchemasInput) GetPurpose() []string {
	if l == nil {
		return nil
	}
	return l.Purpose
}

func (l *LinkAttributeSchemasInput) GetConstraints() *SchemasLinkAttributeConstraints {
	if l == nil {
		return nil
	}
	return l.Constraints
}

func (l *LinkAttributeSchemasInput) GetDefaultValue() any {
	if l == nil {
		return nil
	}
	return l.DefaultValue
}

func (l *LinkAttributeSchemasInput) GetDeprecated() *bool {
	if l == nil {
		return nil
	}
	return l.Deprecated
}

func (l *LinkAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if l == nil {
		return nil
	}
	return l.EntityBuilderDisableEdit
}

func (l *LinkAttributeSchemasInput) GetFeatureFlag() *string {
	if l == nil {
		return nil
	}
	return l.FeatureFlag
}

func (l *LinkAttributeSchemasInput) GetGroup() *string {
	if l == nil {
		return nil
	}
	return l.Group
}

func (l *LinkAttributeSchemasInput) GetHasPrimary() *bool {
	if l == nil {
		return nil
	}
	return l.HasPrimary
}

func (l *LinkAttributeSchemasInput) GetHidden() *bool {
	if l == nil {
		return nil
	}
	return l.Hidden
}

func (l *LinkAttributeSchemasInput) GetHideLabel() *bool {
	if l == nil {
		return nil
	}
	return l.HideLabel
}

func (l *LinkAttributeSchemasInput) GetIcon() *string {
	if l == nil {
		return nil
	}
	return l.Icon
}

func (l *LinkAttributeSchemasInput) GetID() *string {
	if l == nil {
		return nil
	}
	return l.ID
}

func (l *LinkAttributeSchemasInput) GetInfoHelpers() *SchemasLinkAttributeInfoHelpers {
	if l == nil {
		return nil
	}
	return l.InfoHelpers
}

func (l *LinkAttributeSchemasInput) GetLabel() string {
	if l == nil {
		return ""
	}
	return l.Label
}

func (l *LinkAttributeSchemasInput) GetLayout() *string {
	if l == nil {
		return nil
	}
	return l.Layout
}

func (l *LinkAttributeSchemasInput) GetName() string {
	if l == nil {
		return ""
	}
	return l.Name
}

func (l *LinkAttributeSchemasInput) GetOrder() *int64 {
	if l == nil {
		return nil
	}
	return l.Order
}

func (l *LinkAttributeSchemasInput) GetPlaceholder() *string {
	if l == nil {
		return nil
	}
	return l.Placeholder
}

func (l *LinkAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if l == nil {
		return nil
	}
	return l.PreviewValueFormatter
}

func (l *LinkAttributeSchemasInput) GetProtected() *bool {
	if l == nil {
		return nil
	}
	return l.Protected
}

func (l *LinkAttributeSchemasInput) GetReadonly() *bool {
	if l == nil {
		return nil
	}
	return l.Readonly
}

func (l *LinkAttributeSchemasInput) GetRenderCondition() *string {
	if l == nil {
		return nil
	}
	return l.RenderCondition
}

func (l *LinkAttributeSchemasInput) GetRepeatable() *bool {
	if l == nil {
		return nil
	}
	return l.Repeatable
}

func (l *LinkAttributeSchemasInput) GetRequired() *bool {
	if l == nil {
		return nil
	}
	return l.Required
}

func (l *LinkAttributeSchemasInput) GetSchema() *string {
	if l == nil {
		return nil
	}
	return l.Schema
}

func (l *LinkAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if l == nil {
		return nil
	}
	return l.SettingsFlag
}

func (l *LinkAttributeSchemasInput) GetShowInTable() *bool {
	if l == nil {
		return nil
	}
	return l.ShowInTable
}

func (l *LinkAttributeSchemasInput) GetSortable() *bool {
	if l == nil {
		return nil
	}
	return l.Sortable
}

func (l *LinkAttributeSchemasInput) GetType() SchemasLinkAttributeType {
	if l == nil {
		return SchemasLinkAttributeType("")
	}
	return l.Type
}

func (l *LinkAttributeSchemasInput) GetValueFormatter() *string {
	if l == nil {
		return nil
	}
	return l.ValueFormatter
}

// TextAttributeSchemasInput - Textarea or text input
type TextAttributeSchemasInput struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *SchemasTextAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                              `json:"default_value,omitempty"`
	Deprecated   *bool                            `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *SchemasTextAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                           `json:"label"`
	Layout      *string                          `json:"layout,omitempty"`
	Multiline   *bool                            `json:"multiline,omitempty"`
	Name        string                           `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	RichText   *bool `json:"rich_text,omitempty"`
	// Number of rows for rich_text textarea
	Rows *SchemasRows `json:"rows,omitempty"`
	// Schema slug the attribute belongs to
	Schema *string `json:"schema,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                    `default:"true" json:"sortable"`
	Type           SchemasTextAttributeType `json:"type"`
	ValueFormatter *string                  `json:"value_formatter,omitempty"`
}

func (t TextAttributeSchemasInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TextAttributeSchemasInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (t *TextAttributeSchemasInput) GetManifest() []string {
	if t == nil {
		return nil
	}
	return t.Manifest
}

func (t *TextAttributeSchemasInput) GetPurpose() []string {
	if t == nil {
		return nil
	}
	return t.Purpose
}

func (t *TextAttributeSchemasInput) GetConstraints() *SchemasTextAttributeConstraints {
	if t == nil {
		return nil
	}
	return t.Constraints
}

func (t *TextAttributeSchemasInput) GetDefaultValue() any {
	if t == nil {
		return nil
	}
	return t.DefaultValue
}

func (t *TextAttributeSchemasInput) GetDeprecated() *bool {
	if t == nil {
		return nil
	}
	return t.Deprecated
}

func (t *TextAttributeSchemasInput) GetEntityBuilderDisableEdit() *bool {
	if t == nil {
		return nil
	}
	return t.EntityBuilderDisableEdit
}

func (t *TextAttributeSchemasInput) GetFeatureFlag() *string {
	if t == nil {
		return nil
	}
	return t.FeatureFlag
}

func (t *TextAttributeSchemasInput) GetGroup() *string {
	if t == nil {
		return nil
	}
	return t.Group
}

func (t *TextAttributeSchemasInput) GetHasPrimary() *bool {
	if t == nil {
		return nil
	}
	return t.HasPrimary
}

func (t *TextAttributeSchemasInput) GetHidden() *bool {
	if t == nil {
		return nil
	}
	return t.Hidden
}

func (t *TextAttributeSchemasInput) GetHideLabel() *bool {
	if t == nil {
		return nil
	}
	return t.HideLabel
}

func (t *TextAttributeSchemasInput) GetIcon() *string {
	if t == nil {
		return nil
	}
	return t.Icon
}

func (t *TextAttributeSchemasInput) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TextAttributeSchemasInput) GetInfoHelpers() *SchemasTextAttributeInfoHelpers {
	if t == nil {
		return nil
	}
	return t.InfoHelpers
}

func (t *TextAttributeSchemasInput) GetLabel() string {
	if t == nil {
		return ""
	}
	return t.Label
}

func (t *TextAttributeSchemasInput) GetLayout() *string {
	if t == nil {
		return nil
	}
	return t.Layout
}

func (t *TextAttributeSchemasInput) GetMultiline() *bool {
	if t == nil {
		return nil
	}
	return t.Multiline
}

func (t *TextAttributeSchemasInput) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *TextAttributeSchemasInput) GetOrder() *int64 {
	if t == nil {
		return nil
	}
	return t.Order
}

func (t *TextAttributeSchemasInput) GetPlaceholder() *string {
	if t == nil {
		return nil
	}
	return t.Placeholder
}

func (t *TextAttributeSchemasInput) GetPreviewValueFormatter() *string {
	if t == nil {
		return nil
	}
	return t.PreviewValueFormatter
}

func (t *TextAttributeSchemasInput) GetProtected() *bool {
	if t == nil {
		return nil
	}
	return t.Protected
}

func (t *TextAttributeSchemasInput) GetReadonly() *bool {
	if t == nil {
		return nil
	}
	return t.Readonly
}

func (t *TextAttributeSchemasInput) GetRenderCondition() *string {
	if t == nil {
		return nil
	}
	return t.RenderCondition
}

func (t *TextAttributeSchemasInput) GetRepeatable() *bool {
	if t == nil {
		return nil
	}
	return t.Repeatable
}

func (t *TextAttributeSchemasInput) GetRequired() *bool {
	if t == nil {
		return nil
	}
	return t.Required
}

func (t *TextAttributeSchemasInput) GetRichText() *bool {
	if t == nil {
		return nil
	}
	return t.RichText
}

func (t *TextAttributeSchemasInput) GetRows() *SchemasRows {
	if t == nil {
		return nil
	}
	return t.Rows
}

func (t *TextAttributeSchemasInput) GetSchema() *string {
	if t == nil {
		return nil
	}
	return t.Schema
}

func (t *TextAttributeSchemasInput) GetSettingsFlag() []SettingFlag {
	if t == nil {
		return nil
	}
	return t.SettingsFlag
}

func (t *TextAttributeSchemasInput) GetShowInTable() *bool {
	if t == nil {
		return nil
	}
	return t.ShowInTable
}

func (t *TextAttributeSchemasInput) GetSortable() *bool {
	if t == nil {
		return nil
	}
	return t.Sortable
}

func (t *TextAttributeSchemasInput) GetType() SchemasTextAttributeType {
	if t == nil {
		return SchemasTextAttributeType("")
	}
	return t.Type
}

func (t *TextAttributeSchemasInput) GetValueFormatter() *string {
	if t == nil {
		return nil
	}
	return t.ValueFormatter
}

type AttributeWithCompositeIDInputType string

const (
	AttributeWithCompositeIDInputTypeTextAttributeSchemasInput                  AttributeWithCompositeIDInputType = "TextAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeLinkAttributeSchemasInput                  AttributeWithCompositeIDInputType = "LinkAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeDateAttributeSchemasInput                  AttributeWithCompositeIDInputType = "DateAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeCountryAttributeSchemasInput               AttributeWithCompositeIDInputType = "CountryAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeBooleanAttributeSchemasInput               AttributeWithCompositeIDInputType = "BooleanAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeSelectAttributeSchemasInput                AttributeWithCompositeIDInputType = "SelectAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeMultiSelectAttributeSchemasInput           AttributeWithCompositeIDInputType = "MultiSelectAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeStatusAttributeSchemasInput                AttributeWithCompositeIDInputType = "StatusAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeSequenceAttributeSchemasInput              AttributeWithCompositeIDInputType = "SequenceAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeRelationAttributeSchemasInput              AttributeWithCompositeIDInputType = "RelationAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeUserRelationAttributeSchemasInput          AttributeWithCompositeIDInputType = "UserRelationAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeSchemasInput                               AttributeWithCompositeIDInputType = "Schemas_input"
	AttributeWithCompositeIDInputTypeAddressRelationAttributeSchemasInput       AttributeWithCompositeIDInputType = "AddressRelationAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypePaymentMethodRelationAttributeSchemasInput AttributeWithCompositeIDInputType = "PaymentMethodRelationAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeCurrencyAttributeSchemasInput              AttributeWithCompositeIDInputType = "CurrencyAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeTagsAttributeSchemasInput                  AttributeWithCompositeIDInputType = "TagsAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeMessageEmailAddressAttributeSchemasInput   AttributeWithCompositeIDInputType = "MessageEmailAddressAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeNumberAttributeSchemasInput                AttributeWithCompositeIDInputType = "NumberAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeConsentAttributeSchemasInput               AttributeWithCompositeIDInputType = "ConsentAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeInternalAttributeSchemasInput              AttributeWithCompositeIDInputType = "InternalAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeOrderedListAttributeSchemasInput           AttributeWithCompositeIDInputType = "OrderedListAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeFileAttributeSchemasInput                  AttributeWithCompositeIDInputType = "FileAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeComputedAttributeSchemasInput              AttributeWithCompositeIDInputType = "ComputedAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypePartnerStatusAttributeSchemasInput         AttributeWithCompositeIDInputType = "PartnerStatusAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeInvitationEmailAttributeSchemasInput       AttributeWithCompositeIDInputType = "InvitationEmailAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeAutomationAttributeSchemasInput            AttributeWithCompositeIDInputType = "AutomationAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeInternalUserAttributeSchemasInput          AttributeWithCompositeIDInputType = "InternalUserAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypePurposeAttributeSchemasInput               AttributeWithCompositeIDInputType = "PurposeAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypePartnerOrganisationAttributeSchemasInput   AttributeWithCompositeIDInputType = "PartnerOrganisationAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypePortalAccessAttributeSchemasInput          AttributeWithCompositeIDInputType = "PortalAccessAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypePhoneAttributeSchemasInput                 AttributeWithCompositeIDInputType = "PhoneAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypeEmailAttributeSchemasInput                 AttributeWithCompositeIDInputType = "EmailAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypePaymentAttributeSchemasInput               AttributeWithCompositeIDInputType = "PaymentAttribute_Schemas_input"
	AttributeWithCompositeIDInputTypePriceComponentAttributeSchemasInput        AttributeWithCompositeIDInputType = "PriceComponentAttribute_Schemas_input"
)

// AttributeWithCompositeIDInput - a readonly computed ID for the attribute including schema slug and the attribute ID
type AttributeWithCompositeIDInput struct {
	TextAttributeSchemasInput                  *TextAttributeSchemasInput                  `queryParam:"inline" name:"AttributeWithCompositeID"`
	LinkAttributeSchemasInput                  *LinkAttributeSchemasInput                  `queryParam:"inline" name:"AttributeWithCompositeID"`
	DateAttributeSchemasInput                  *DateAttributeSchemasInput                  `queryParam:"inline" name:"AttributeWithCompositeID"`
	CountryAttributeSchemasInput               *CountryAttributeSchemasInput               `queryParam:"inline" name:"AttributeWithCompositeID"`
	BooleanAttributeSchemasInput               *BooleanAttributeSchemasInput               `queryParam:"inline" name:"AttributeWithCompositeID"`
	SelectAttributeSchemasInput                *SelectAttributeSchemasInput                `queryParam:"inline" name:"AttributeWithCompositeID"`
	MultiSelectAttributeSchemasInput           *MultiSelectAttributeSchemasInput           `queryParam:"inline" name:"AttributeWithCompositeID"`
	StatusAttributeSchemasInput                *StatusAttributeSchemasInput                `queryParam:"inline" name:"AttributeWithCompositeID"`
	SequenceAttributeSchemasInput              *SequenceAttributeSchemasInput              `queryParam:"inline" name:"AttributeWithCompositeID"`
	RelationAttributeSchemasInput              *RelationAttributeSchemasInput              `queryParam:"inline" name:"AttributeWithCompositeID"`
	UserRelationAttributeSchemasInput          *UserRelationAttributeSchemasInput          `queryParam:"inline" name:"AttributeWithCompositeID"`
	SchemasInput                               *SchemasInput                               `queryParam:"inline" name:"AttributeWithCompositeID"`
	AddressRelationAttributeSchemasInput       *AddressRelationAttributeSchemasInput       `queryParam:"inline" name:"AttributeWithCompositeID"`
	PaymentMethodRelationAttributeSchemasInput *PaymentMethodRelationAttributeSchemasInput `queryParam:"inline" name:"AttributeWithCompositeID"`
	CurrencyAttributeSchemasInput              *CurrencyAttributeSchemasInput              `queryParam:"inline" name:"AttributeWithCompositeID"`
	TagsAttributeSchemasInput                  *TagsAttributeSchemasInput                  `queryParam:"inline" name:"AttributeWithCompositeID"`
	MessageEmailAddressAttributeSchemasInput   *MessageEmailAddressAttributeSchemasInput   `queryParam:"inline" name:"AttributeWithCompositeID"`
	NumberAttributeSchemasInput                *NumberAttributeSchemasInput                `queryParam:"inline" name:"AttributeWithCompositeID"`
	ConsentAttributeSchemasInput               *ConsentAttributeSchemasInput               `queryParam:"inline" name:"AttributeWithCompositeID"`
	InternalAttributeSchemasInput              *InternalAttributeSchemasInput              `queryParam:"inline" name:"AttributeWithCompositeID"`
	OrderedListAttributeSchemasInput           *OrderedListAttributeSchemasInput           `queryParam:"inline" name:"AttributeWithCompositeID"`
	FileAttributeSchemasInput                  *FileAttributeSchemasInput                  `queryParam:"inline" name:"AttributeWithCompositeID"`
	ComputedAttributeSchemasInput              *ComputedAttributeSchemasInput              `queryParam:"inline" name:"AttributeWithCompositeID"`
	PartnerStatusAttributeSchemasInput         *PartnerStatusAttributeSchemasInput         `queryParam:"inline" name:"AttributeWithCompositeID"`
	InvitationEmailAttributeSchemasInput       *InvitationEmailAttributeSchemasInput       `queryParam:"inline" name:"AttributeWithCompositeID"`
	AutomationAttributeSchemasInput            *AutomationAttributeSchemasInput            `queryParam:"inline" name:"AttributeWithCompositeID"`
	InternalUserAttributeSchemasInput          *InternalUserAttributeSchemasInput          `queryParam:"inline" name:"AttributeWithCompositeID"`
	PurposeAttributeSchemasInput               *PurposeAttributeSchemasInput               `queryParam:"inline" name:"AttributeWithCompositeID"`
	PartnerOrganisationAttributeSchemasInput   *PartnerOrganisationAttributeSchemasInput   `queryParam:"inline" name:"AttributeWithCompositeID"`
	PortalAccessAttributeSchemasInput          *PortalAccessAttributeSchemasInput          `queryParam:"inline" name:"AttributeWithCompositeID"`
	PhoneAttributeSchemasInput                 *PhoneAttributeSchemasInput                 `queryParam:"inline" name:"AttributeWithCompositeID"`
	EmailAttributeSchemasInput                 *EmailAttributeSchemasInput                 `queryParam:"inline" name:"AttributeWithCompositeID"`
	PaymentAttributeSchemasInput               *PaymentAttributeSchemasInput               `queryParam:"inline" name:"AttributeWithCompositeID"`
	PriceComponentAttributeSchemasInput        *PriceComponentAttributeSchemasInput        `queryParam:"inline" name:"AttributeWithCompositeID"`

	Type AttributeWithCompositeIDInputType
}

func CreateAttributeWithCompositeIDInputTextAttributeSchemasInput(textAttributeSchemasInput TextAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeTextAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		TextAttributeSchemasInput: &textAttributeSchemasInput,
		Type:                      typ,
	}
}

func CreateAttributeWithCompositeIDInputLinkAttributeSchemasInput(linkAttributeSchemasInput LinkAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeLinkAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		LinkAttributeSchemasInput: &linkAttributeSchemasInput,
		Type:                      typ,
	}
}

func CreateAttributeWithCompositeIDInputDateAttributeSchemasInput(dateAttributeSchemasInput DateAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeDateAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		DateAttributeSchemasInput: &dateAttributeSchemasInput,
		Type:                      typ,
	}
}

func CreateAttributeWithCompositeIDInputCountryAttributeSchemasInput(countryAttributeSchemasInput CountryAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeCountryAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		CountryAttributeSchemasInput: &countryAttributeSchemasInput,
		Type:                         typ,
	}
}

func CreateAttributeWithCompositeIDInputBooleanAttributeSchemasInput(booleanAttributeSchemasInput BooleanAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeBooleanAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		BooleanAttributeSchemasInput: &booleanAttributeSchemasInput,
		Type:                         typ,
	}
}

func CreateAttributeWithCompositeIDInputSelectAttributeSchemasInput(selectAttributeSchemasInput SelectAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeSelectAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		SelectAttributeSchemasInput: &selectAttributeSchemasInput,
		Type:                        typ,
	}
}

func CreateAttributeWithCompositeIDInputMultiSelectAttributeSchemasInput(multiSelectAttributeSchemasInput MultiSelectAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeMultiSelectAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		MultiSelectAttributeSchemasInput: &multiSelectAttributeSchemasInput,
		Type:                             typ,
	}
}

func CreateAttributeWithCompositeIDInputStatusAttributeSchemasInput(statusAttributeSchemasInput StatusAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeStatusAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		StatusAttributeSchemasInput: &statusAttributeSchemasInput,
		Type:                        typ,
	}
}

func CreateAttributeWithCompositeIDInputSequenceAttributeSchemasInput(sequenceAttributeSchemasInput SequenceAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeSequenceAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		SequenceAttributeSchemasInput: &sequenceAttributeSchemasInput,
		Type:                          typ,
	}
}

func CreateAttributeWithCompositeIDInputRelationAttributeSchemasInput(relationAttributeSchemasInput RelationAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeRelationAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		RelationAttributeSchemasInput: &relationAttributeSchemasInput,
		Type:                          typ,
	}
}

func CreateAttributeWithCompositeIDInputUserRelationAttributeSchemasInput(userRelationAttributeSchemasInput UserRelationAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeUserRelationAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		UserRelationAttributeSchemasInput: &userRelationAttributeSchemasInput,
		Type:                              typ,
	}
}

func CreateAttributeWithCompositeIDInputSchemasInput(schemasInput SchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeSchemasInput

	return AttributeWithCompositeIDInput{
		SchemasInput: &schemasInput,
		Type:         typ,
	}
}

func CreateAttributeWithCompositeIDInputAddressRelationAttributeSchemasInput(addressRelationAttributeSchemasInput AddressRelationAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAddressRelationAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		AddressRelationAttributeSchemasInput: &addressRelationAttributeSchemasInput,
		Type:                                 typ,
	}
}

func CreateAttributeWithCompositeIDInputPaymentMethodRelationAttributeSchemasInput(paymentMethodRelationAttributeSchemasInput PaymentMethodRelationAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypePaymentMethodRelationAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		PaymentMethodRelationAttributeSchemasInput: &paymentMethodRelationAttributeSchemasInput,
		Type: typ,
	}
}

func CreateAttributeWithCompositeIDInputCurrencyAttributeSchemasInput(currencyAttributeSchemasInput CurrencyAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeCurrencyAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		CurrencyAttributeSchemasInput: &currencyAttributeSchemasInput,
		Type:                          typ,
	}
}

func CreateAttributeWithCompositeIDInputTagsAttributeSchemasInput(tagsAttributeSchemasInput TagsAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeTagsAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		TagsAttributeSchemasInput: &tagsAttributeSchemasInput,
		Type:                      typ,
	}
}

func CreateAttributeWithCompositeIDInputMessageEmailAddressAttributeSchemasInput(messageEmailAddressAttributeSchemasInput MessageEmailAddressAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeMessageEmailAddressAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		MessageEmailAddressAttributeSchemasInput: &messageEmailAddressAttributeSchemasInput,
		Type:                                     typ,
	}
}

func CreateAttributeWithCompositeIDInputNumberAttributeSchemasInput(numberAttributeSchemasInput NumberAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeNumberAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		NumberAttributeSchemasInput: &numberAttributeSchemasInput,
		Type:                        typ,
	}
}

func CreateAttributeWithCompositeIDInputConsentAttributeSchemasInput(consentAttributeSchemasInput ConsentAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeConsentAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		ConsentAttributeSchemasInput: &consentAttributeSchemasInput,
		Type:                         typ,
	}
}

func CreateAttributeWithCompositeIDInputInternalAttributeSchemasInput(internalAttributeSchemasInput InternalAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeInternalAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		InternalAttributeSchemasInput: &internalAttributeSchemasInput,
		Type:                          typ,
	}
}

func CreateAttributeWithCompositeIDInputOrderedListAttributeSchemasInput(orderedListAttributeSchemasInput OrderedListAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeOrderedListAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		OrderedListAttributeSchemasInput: &orderedListAttributeSchemasInput,
		Type:                             typ,
	}
}

func CreateAttributeWithCompositeIDInputFileAttributeSchemasInput(fileAttributeSchemasInput FileAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeFileAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		FileAttributeSchemasInput: &fileAttributeSchemasInput,
		Type:                      typ,
	}
}

func CreateAttributeWithCompositeIDInputComputedAttributeSchemasInput(computedAttributeSchemasInput ComputedAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeComputedAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		ComputedAttributeSchemasInput: &computedAttributeSchemasInput,
		Type:                          typ,
	}
}

func CreateAttributeWithCompositeIDInputPartnerStatusAttributeSchemasInput(partnerStatusAttributeSchemasInput PartnerStatusAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypePartnerStatusAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		PartnerStatusAttributeSchemasInput: &partnerStatusAttributeSchemasInput,
		Type:                               typ,
	}
}

func CreateAttributeWithCompositeIDInputInvitationEmailAttributeSchemasInput(invitationEmailAttributeSchemasInput InvitationEmailAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeInvitationEmailAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		InvitationEmailAttributeSchemasInput: &invitationEmailAttributeSchemasInput,
		Type:                                 typ,
	}
}

func CreateAttributeWithCompositeIDInputAutomationAttributeSchemasInput(automationAttributeSchemasInput AutomationAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeAutomationAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		AutomationAttributeSchemasInput: &automationAttributeSchemasInput,
		Type:                            typ,
	}
}

func CreateAttributeWithCompositeIDInputInternalUserAttributeSchemasInput(internalUserAttributeSchemasInput InternalUserAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeInternalUserAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		InternalUserAttributeSchemasInput: &internalUserAttributeSchemasInput,
		Type:                              typ,
	}
}

func CreateAttributeWithCompositeIDInputPurposeAttributeSchemasInput(purposeAttributeSchemasInput PurposeAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypePurposeAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		PurposeAttributeSchemasInput: &purposeAttributeSchemasInput,
		Type:                         typ,
	}
}

func CreateAttributeWithCompositeIDInputPartnerOrganisationAttributeSchemasInput(partnerOrganisationAttributeSchemasInput PartnerOrganisationAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypePartnerOrganisationAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		PartnerOrganisationAttributeSchemasInput: &partnerOrganisationAttributeSchemasInput,
		Type:                                     typ,
	}
}

func CreateAttributeWithCompositeIDInputPortalAccessAttributeSchemasInput(portalAccessAttributeSchemasInput PortalAccessAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypePortalAccessAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		PortalAccessAttributeSchemasInput: &portalAccessAttributeSchemasInput,
		Type:                              typ,
	}
}

func CreateAttributeWithCompositeIDInputPhoneAttributeSchemasInput(phoneAttributeSchemasInput PhoneAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypePhoneAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		PhoneAttributeSchemasInput: &phoneAttributeSchemasInput,
		Type:                       typ,
	}
}

func CreateAttributeWithCompositeIDInputEmailAttributeSchemasInput(emailAttributeSchemasInput EmailAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypeEmailAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		EmailAttributeSchemasInput: &emailAttributeSchemasInput,
		Type:                       typ,
	}
}

func CreateAttributeWithCompositeIDInputPaymentAttributeSchemasInput(paymentAttributeSchemasInput PaymentAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypePaymentAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		PaymentAttributeSchemasInput: &paymentAttributeSchemasInput,
		Type:                         typ,
	}
}

func CreateAttributeWithCompositeIDInputPriceComponentAttributeSchemasInput(priceComponentAttributeSchemasInput PriceComponentAttributeSchemasInput) AttributeWithCompositeIDInput {
	typ := AttributeWithCompositeIDInputTypePriceComponentAttributeSchemasInput

	return AttributeWithCompositeIDInput{
		PriceComponentAttributeSchemasInput: &priceComponentAttributeSchemasInput,
		Type:                                typ,
	}
}

func (u *AttributeWithCompositeIDInput) UnmarshalJSON(data []byte) error {

	var currencyAttributeSchemasInput CurrencyAttributeSchemasInput = CurrencyAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &currencyAttributeSchemasInput, "", true, nil); err == nil {
		u.CurrencyAttributeSchemasInput = &currencyAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeCurrencyAttributeSchemasInput
		return nil
	}

	var consentAttributeSchemasInput ConsentAttributeSchemasInput = ConsentAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &consentAttributeSchemasInput, "", true, nil); err == nil {
		u.ConsentAttributeSchemasInput = &consentAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeConsentAttributeSchemasInput
		return nil
	}

	var computedAttributeSchemasInput ComputedAttributeSchemasInput = ComputedAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &computedAttributeSchemasInput, "", true, nil); err == nil {
		u.ComputedAttributeSchemasInput = &computedAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeComputedAttributeSchemasInput
		return nil
	}

	var textAttributeSchemasInput TextAttributeSchemasInput = TextAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &textAttributeSchemasInput, "", true, nil); err == nil {
		u.TextAttributeSchemasInput = &textAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeTextAttributeSchemasInput
		return nil
	}

	var linkAttributeSchemasInput LinkAttributeSchemasInput = LinkAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &linkAttributeSchemasInput, "", true, nil); err == nil {
		u.LinkAttributeSchemasInput = &linkAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeLinkAttributeSchemasInput
		return nil
	}

	var dateAttributeSchemasInput DateAttributeSchemasInput = DateAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &dateAttributeSchemasInput, "", true, nil); err == nil {
		u.DateAttributeSchemasInput = &dateAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeDateAttributeSchemasInput
		return nil
	}

	var countryAttributeSchemasInput CountryAttributeSchemasInput = CountryAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &countryAttributeSchemasInput, "", true, nil); err == nil {
		u.CountryAttributeSchemasInput = &countryAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeCountryAttributeSchemasInput
		return nil
	}

	var booleanAttributeSchemasInput BooleanAttributeSchemasInput = BooleanAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &booleanAttributeSchemasInput, "", true, nil); err == nil {
		u.BooleanAttributeSchemasInput = &booleanAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeBooleanAttributeSchemasInput
		return nil
	}

	var selectAttributeSchemasInput SelectAttributeSchemasInput = SelectAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &selectAttributeSchemasInput, "", true, nil); err == nil {
		u.SelectAttributeSchemasInput = &selectAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeSelectAttributeSchemasInput
		return nil
	}

	var multiSelectAttributeSchemasInput MultiSelectAttributeSchemasInput = MultiSelectAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &multiSelectAttributeSchemasInput, "", true, nil); err == nil {
		u.MultiSelectAttributeSchemasInput = &multiSelectAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeMultiSelectAttributeSchemasInput
		return nil
	}

	var statusAttributeSchemasInput StatusAttributeSchemasInput = StatusAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &statusAttributeSchemasInput, "", true, nil); err == nil {
		u.StatusAttributeSchemasInput = &statusAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeStatusAttributeSchemasInput
		return nil
	}

	var sequenceAttributeSchemasInput SequenceAttributeSchemasInput = SequenceAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &sequenceAttributeSchemasInput, "", true, nil); err == nil {
		u.SequenceAttributeSchemasInput = &sequenceAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeSequenceAttributeSchemasInput
		return nil
	}

	var relationAttributeSchemasInput RelationAttributeSchemasInput = RelationAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &relationAttributeSchemasInput, "", true, nil); err == nil {
		u.RelationAttributeSchemasInput = &relationAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeRelationAttributeSchemasInput
		return nil
	}

	var userRelationAttributeSchemasInput UserRelationAttributeSchemasInput = UserRelationAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &userRelationAttributeSchemasInput, "", true, nil); err == nil {
		u.UserRelationAttributeSchemasInput = &userRelationAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeUserRelationAttributeSchemasInput
		return nil
	}

	var schemasInput SchemasInput = SchemasInput{}
	if err := utils.UnmarshalJSON(data, &schemasInput, "", true, nil); err == nil {
		u.SchemasInput = &schemasInput
		u.Type = AttributeWithCompositeIDInputTypeSchemasInput
		return nil
	}

	var addressRelationAttributeSchemasInput AddressRelationAttributeSchemasInput = AddressRelationAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &addressRelationAttributeSchemasInput, "", true, nil); err == nil {
		u.AddressRelationAttributeSchemasInput = &addressRelationAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeAddressRelationAttributeSchemasInput
		return nil
	}

	var paymentMethodRelationAttributeSchemasInput PaymentMethodRelationAttributeSchemasInput = PaymentMethodRelationAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &paymentMethodRelationAttributeSchemasInput, "", true, nil); err == nil {
		u.PaymentMethodRelationAttributeSchemasInput = &paymentMethodRelationAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypePaymentMethodRelationAttributeSchemasInput
		return nil
	}

	var tagsAttributeSchemasInput TagsAttributeSchemasInput = TagsAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &tagsAttributeSchemasInput, "", true, nil); err == nil {
		u.TagsAttributeSchemasInput = &tagsAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeTagsAttributeSchemasInput
		return nil
	}

	var messageEmailAddressAttributeSchemasInput MessageEmailAddressAttributeSchemasInput = MessageEmailAddressAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &messageEmailAddressAttributeSchemasInput, "", true, nil); err == nil {
		u.MessageEmailAddressAttributeSchemasInput = &messageEmailAddressAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeMessageEmailAddressAttributeSchemasInput
		return nil
	}

	var numberAttributeSchemasInput NumberAttributeSchemasInput = NumberAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &numberAttributeSchemasInput, "", true, nil); err == nil {
		u.NumberAttributeSchemasInput = &numberAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeNumberAttributeSchemasInput
		return nil
	}

	var internalAttributeSchemasInput InternalAttributeSchemasInput = InternalAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &internalAttributeSchemasInput, "", true, nil); err == nil {
		u.InternalAttributeSchemasInput = &internalAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeInternalAttributeSchemasInput
		return nil
	}

	var orderedListAttributeSchemasInput OrderedListAttributeSchemasInput = OrderedListAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &orderedListAttributeSchemasInput, "", true, nil); err == nil {
		u.OrderedListAttributeSchemasInput = &orderedListAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeOrderedListAttributeSchemasInput
		return nil
	}

	var fileAttributeSchemasInput FileAttributeSchemasInput = FileAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &fileAttributeSchemasInput, "", true, nil); err == nil {
		u.FileAttributeSchemasInput = &fileAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeFileAttributeSchemasInput
		return nil
	}

	var partnerStatusAttributeSchemasInput PartnerStatusAttributeSchemasInput = PartnerStatusAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &partnerStatusAttributeSchemasInput, "", true, nil); err == nil {
		u.PartnerStatusAttributeSchemasInput = &partnerStatusAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypePartnerStatusAttributeSchemasInput
		return nil
	}

	var invitationEmailAttributeSchemasInput InvitationEmailAttributeSchemasInput = InvitationEmailAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &invitationEmailAttributeSchemasInput, "", true, nil); err == nil {
		u.InvitationEmailAttributeSchemasInput = &invitationEmailAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeInvitationEmailAttributeSchemasInput
		return nil
	}

	var automationAttributeSchemasInput AutomationAttributeSchemasInput = AutomationAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &automationAttributeSchemasInput, "", true, nil); err == nil {
		u.AutomationAttributeSchemasInput = &automationAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeAutomationAttributeSchemasInput
		return nil
	}

	var internalUserAttributeSchemasInput InternalUserAttributeSchemasInput = InternalUserAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &internalUserAttributeSchemasInput, "", true, nil); err == nil {
		u.InternalUserAttributeSchemasInput = &internalUserAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeInternalUserAttributeSchemasInput
		return nil
	}

	var purposeAttributeSchemasInput PurposeAttributeSchemasInput = PurposeAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &purposeAttributeSchemasInput, "", true, nil); err == nil {
		u.PurposeAttributeSchemasInput = &purposeAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypePurposeAttributeSchemasInput
		return nil
	}

	var partnerOrganisationAttributeSchemasInput PartnerOrganisationAttributeSchemasInput = PartnerOrganisationAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &partnerOrganisationAttributeSchemasInput, "", true, nil); err == nil {
		u.PartnerOrganisationAttributeSchemasInput = &partnerOrganisationAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypePartnerOrganisationAttributeSchemasInput
		return nil
	}

	var portalAccessAttributeSchemasInput PortalAccessAttributeSchemasInput = PortalAccessAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &portalAccessAttributeSchemasInput, "", true, nil); err == nil {
		u.PortalAccessAttributeSchemasInput = &portalAccessAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypePortalAccessAttributeSchemasInput
		return nil
	}

	var phoneAttributeSchemasInput PhoneAttributeSchemasInput = PhoneAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &phoneAttributeSchemasInput, "", true, nil); err == nil {
		u.PhoneAttributeSchemasInput = &phoneAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypePhoneAttributeSchemasInput
		return nil
	}

	var emailAttributeSchemasInput EmailAttributeSchemasInput = EmailAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &emailAttributeSchemasInput, "", true, nil); err == nil {
		u.EmailAttributeSchemasInput = &emailAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypeEmailAttributeSchemasInput
		return nil
	}

	var paymentAttributeSchemasInput PaymentAttributeSchemasInput = PaymentAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &paymentAttributeSchemasInput, "", true, nil); err == nil {
		u.PaymentAttributeSchemasInput = &paymentAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypePaymentAttributeSchemasInput
		return nil
	}

	var priceComponentAttributeSchemasInput PriceComponentAttributeSchemasInput = PriceComponentAttributeSchemasInput{}
	if err := utils.UnmarshalJSON(data, &priceComponentAttributeSchemasInput, "", true, nil); err == nil {
		u.PriceComponentAttributeSchemasInput = &priceComponentAttributeSchemasInput
		u.Type = AttributeWithCompositeIDInputTypePriceComponentAttributeSchemasInput
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AttributeWithCompositeIDInput", string(data))
}

func (u AttributeWithCompositeIDInput) MarshalJSON() ([]byte, error) {
	if u.TextAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.TextAttributeSchemasInput, "", true)
	}

	if u.LinkAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.LinkAttributeSchemasInput, "", true)
	}

	if u.DateAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.DateAttributeSchemasInput, "", true)
	}

	if u.CountryAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.CountryAttributeSchemasInput, "", true)
	}

	if u.BooleanAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.BooleanAttributeSchemasInput, "", true)
	}

	if u.SelectAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.SelectAttributeSchemasInput, "", true)
	}

	if u.MultiSelectAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.MultiSelectAttributeSchemasInput, "", true)
	}

	if u.StatusAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.StatusAttributeSchemasInput, "", true)
	}

	if u.SequenceAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.SequenceAttributeSchemasInput, "", true)
	}

	if u.RelationAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.RelationAttributeSchemasInput, "", true)
	}

	if u.UserRelationAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.UserRelationAttributeSchemasInput, "", true)
	}

	if u.SchemasInput != nil {
		return utils.MarshalJSON(u.SchemasInput, "", true)
	}

	if u.AddressRelationAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.AddressRelationAttributeSchemasInput, "", true)
	}

	if u.PaymentMethodRelationAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.PaymentMethodRelationAttributeSchemasInput, "", true)
	}

	if u.CurrencyAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.CurrencyAttributeSchemasInput, "", true)
	}

	if u.TagsAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.TagsAttributeSchemasInput, "", true)
	}

	if u.MessageEmailAddressAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.MessageEmailAddressAttributeSchemasInput, "", true)
	}

	if u.NumberAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.NumberAttributeSchemasInput, "", true)
	}

	if u.ConsentAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.ConsentAttributeSchemasInput, "", true)
	}

	if u.InternalAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.InternalAttributeSchemasInput, "", true)
	}

	if u.OrderedListAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.OrderedListAttributeSchemasInput, "", true)
	}

	if u.FileAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.FileAttributeSchemasInput, "", true)
	}

	if u.ComputedAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.ComputedAttributeSchemasInput, "", true)
	}

	if u.PartnerStatusAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.PartnerStatusAttributeSchemasInput, "", true)
	}

	if u.InvitationEmailAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.InvitationEmailAttributeSchemasInput, "", true)
	}

	if u.AutomationAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.AutomationAttributeSchemasInput, "", true)
	}

	if u.InternalUserAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.InternalUserAttributeSchemasInput, "", true)
	}

	if u.PurposeAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.PurposeAttributeSchemasInput, "", true)
	}

	if u.PartnerOrganisationAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.PartnerOrganisationAttributeSchemasInput, "", true)
	}

	if u.PortalAccessAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.PortalAccessAttributeSchemasInput, "", true)
	}

	if u.PhoneAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.PhoneAttributeSchemasInput, "", true)
	}

	if u.EmailAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.EmailAttributeSchemasInput, "", true)
	}

	if u.PaymentAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.PaymentAttributeSchemasInput, "", true)
	}

	if u.PriceComponentAttributeSchemasInput != nil {
		return utils.MarshalJSON(u.PriceComponentAttributeSchemasInput, "", true)
	}

	return nil, errors.New("could not marshal union type AttributeWithCompositeIDInput: all fields are null")
}
