// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

// EntitySearchParamsAggs - Aggregation supported by ElasticSearch allows summarizing data as metrics, statistics, or other analytics.
type EntitySearchParamsAggs struct {
}

type EntitySearchParamsSearchAfterType string

const (
	EntitySearchParamsSearchAfterTypeStr    EntitySearchParamsSearchAfterType = "str"
	EntitySearchParamsSearchAfterTypeNumber EntitySearchParamsSearchAfterType = "number"
)

type EntitySearchParamsSearchAfter struct {
	Str    *string  `queryParam:"inline" name:"search_after"`
	Number *float64 `queryParam:"inline" name:"search_after"`

	Type EntitySearchParamsSearchAfterType
}

func CreateEntitySearchParamsSearchAfterStr(str string) EntitySearchParamsSearchAfter {
	typ := EntitySearchParamsSearchAfterTypeStr

	return EntitySearchParamsSearchAfter{
		Str:  &str,
		Type: typ,
	}
}

func CreateEntitySearchParamsSearchAfterNumber(number float64) EntitySearchParamsSearchAfter {
	typ := EntitySearchParamsSearchAfterTypeNumber

	return EntitySearchParamsSearchAfter{
		Number: &number,
		Type:   typ,
	}
}

func (u *EntitySearchParamsSearchAfter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = EntitySearchParamsSearchAfterTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = EntitySearchParamsSearchAfterTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EntitySearchParamsSearchAfter", string(data))
}

func (u EntitySearchParamsSearchAfter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type EntitySearchParamsSearchAfter: all fields are null")
}

type EntitySearchParamsSortType string

const (
	EntitySearchParamsSortTypeStr        EntitySearchParamsSortType = "str"
	EntitySearchParamsSortTypeArrayOfStr EntitySearchParamsSortType = "arrayOfStr"
)

// EntitySearchParamsSort - You can pass one sort field or an array of sort fields. Each sort field can be a string
type EntitySearchParamsSort struct {
	Str        *string  `queryParam:"inline" name:"sort"`
	ArrayOfStr []string `queryParam:"inline" name:"sort"`

	Type EntitySearchParamsSortType
}

func CreateEntitySearchParamsSortStr(str string) EntitySearchParamsSort {
	typ := EntitySearchParamsSortTypeStr

	return EntitySearchParamsSort{
		Str:  &str,
		Type: typ,
	}
}

func CreateEntitySearchParamsSortArrayOfStr(arrayOfStr []string) EntitySearchParamsSort {
	typ := EntitySearchParamsSortTypeArrayOfStr

	return EntitySearchParamsSort{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *EntitySearchParamsSort) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = EntitySearchParamsSortTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = EntitySearchParamsSortTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EntitySearchParamsSort", string(data))
}

func (u EntitySearchParamsSort) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type EntitySearchParamsSort: all fields are null")
}

type EntitySearchParams struct {
	// Aggregation supported by ElasticSearch allows summarizing data as metrics, statistics, or other analytics.
	Aggs *EntitySearchParamsAggs `json:"aggs,omitempty"`
	// List of entity fields to include or exclude in the response
	//
	// Use ! to exclude fields, e.g. `!_id` to exclude the `_id` field.
	//
	// Globbing and globstart (**) is supported for nested fields.
	//
	Fields []string `json:"fields,omitempty"`
	// The offset from which to start the search results.
	// Only one of `from` or `search_after` should be used.
	//
	From      *int64 `default:"0" json:"from"`
	Highlight any    `json:"highlight,omitempty"`
	// When true, enables entity hydration to resolve nested $relation & $relation_ref references in-place.
	Hydrate *bool `default:"false" json:"hydrate"`
	// Whether to include deleted entities in the search results
	// - `true`: include deleted entities
	// - `false`: exclude deleted entities
	// - `only`: include only deleted entities
	//
	// By default, no deleted entities are included in the search results.
	//
	IncludeDeleted *EntitySearchIncludeDeletedParam `default:"false" json:"include_deleted"`
	// Adds a `_score` number field to results that can be used to rank by match score
	IncludeScores *bool `default:"false" json:"include_scores"`
	// Lucene [queries supported with ElasticSearch](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax)
	Q string `json:"q"`
	// The sort values from which to start the search results.
	// Only one of `from` or `search_after` should be used.
	// It is strongly recommended to always use the `sort_end` field from the last search result.
	// Used for deep pagination, typically together with `stable_query_id` to maintain the context between requests.
	// Requires explicit sort to work reliably.
	// Typically used sort fields are `_id` or `_created_at`.
	//
	SearchAfter []*EntitySearchParamsSearchAfter `json:"search_after,omitempty"`
	// Max search size is 1000 with higher values defaulting to 1000
	Size *int64 `default:"10" json:"size"`
	// You can pass one sort field or an array of sort fields. Each sort field can be a string
	Sort *EntitySearchParamsSort `json:"sort,omitempty"`
	// A TTL (in seconds) that specifies how long the context should be maintained.
	// Defaults to 30 seconds; configurable up to 60 seconds to prevent abuse.
	// A value of 0 can be provided the close the context after the query.
	// Defaults to none.
	//
	StableFor *int64 `json:"stable_for,omitempty"`
	// A unique identifier of the query context from the last stable query.
	// The context is maintained for the duration of the stable_for value.
	//
	StableQueryID *string `json:"stable_query_id,omitempty"`
}

func (e EntitySearchParams) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntitySearchParams) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"q"}); err != nil {
		return err
	}
	return nil
}

func (e *EntitySearchParams) GetAggs() *EntitySearchParamsAggs {
	if e == nil {
		return nil
	}
	return e.Aggs
}

func (e *EntitySearchParams) GetFields() []string {
	if e == nil {
		return nil
	}
	return e.Fields
}

func (e *EntitySearchParams) GetFrom() *int64 {
	if e == nil {
		return nil
	}
	return e.From
}

func (e *EntitySearchParams) GetHighlight() any {
	if e == nil {
		return nil
	}
	return e.Highlight
}

func (e *EntitySearchParams) GetHydrate() *bool {
	if e == nil {
		return nil
	}
	return e.Hydrate
}

func (e *EntitySearchParams) GetIncludeDeleted() *EntitySearchIncludeDeletedParam {
	if e == nil {
		return nil
	}
	return e.IncludeDeleted
}

func (e *EntitySearchParams) GetIncludeScores() *bool {
	if e == nil {
		return nil
	}
	return e.IncludeScores
}

func (e *EntitySearchParams) GetQ() string {
	if e == nil {
		return ""
	}
	return e.Q
}

func (e *EntitySearchParams) GetSearchAfter() []*EntitySearchParamsSearchAfter {
	if e == nil {
		return nil
	}
	return e.SearchAfter
}

func (e *EntitySearchParams) GetSize() *int64 {
	if e == nil {
		return nil
	}
	return e.Size
}

func (e *EntitySearchParams) GetSort() *EntitySearchParamsSort {
	if e == nil {
		return nil
	}
	return e.Sort
}

func (e *EntitySearchParams) GetStableFor() *int64 {
	if e == nil {
		return nil
	}
	return e.StableFor
}

func (e *EntitySearchParams) GetStableQueryID() *string {
	if e == nil {
		return nil
	}
	return e.StableQueryID
}
