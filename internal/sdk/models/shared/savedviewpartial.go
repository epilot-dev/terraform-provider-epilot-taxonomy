// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

type SavedViewPartialSource string

const (
	SavedViewPartialSourceSystem    SavedViewPartialSource = "SYSTEM"
	SavedViewPartialSourceBlueprint SavedViewPartialSource = "BLUEPRINT"
)

func (e SavedViewPartialSource) ToPointer() *SavedViewPartialSource {
	return &e
}
func (e *SavedViewPartialSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SYSTEM":
		fallthrough
	case "BLUEPRINT":
		*e = SavedViewPartialSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SavedViewPartialSource: %v", v)
	}
}

// SavedViewPartial2 - A system-created view
type SavedViewPartial2 struct {
	AdditionalProperties any                     `additionalProperties:"true" json:"-"`
	Source               *SavedViewPartialSource `json:"source,omitempty"`
}

func (s SavedViewPartial2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SavedViewPartial2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *SavedViewPartial2) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SavedViewPartial2) GetSource() *SavedViewPartialSource {
	if o == nil {
		return nil
	}
	return o.Source
}

// SavedViewPartial1 - A user that created the view
type SavedViewPartial1 struct {
	UserID *string `json:"user_id,omitempty"`
}

func (s SavedViewPartial1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SavedViewPartial1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *SavedViewPartial1) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

type SavedViewPartialCreatedByType string

const (
	SavedViewPartialCreatedByTypeSavedViewPartial1 SavedViewPartialCreatedByType = "SavedViewPartial_1"
	SavedViewPartialCreatedByTypeSavedViewPartial2 SavedViewPartialCreatedByType = "SavedViewPartial_2"
)

type SavedViewPartialCreatedBy struct {
	SavedViewPartial1 *SavedViewPartial1 `queryParam:"inline" name:"created_by"`
	SavedViewPartial2 *SavedViewPartial2 `queryParam:"inline" name:"created_by"`

	Type SavedViewPartialCreatedByType
}

func CreateSavedViewPartialCreatedBySavedViewPartial1(savedViewPartial1 SavedViewPartial1) SavedViewPartialCreatedBy {
	typ := SavedViewPartialCreatedByTypeSavedViewPartial1

	return SavedViewPartialCreatedBy{
		SavedViewPartial1: &savedViewPartial1,
		Type:              typ,
	}
}

func CreateSavedViewPartialCreatedBySavedViewPartial2(savedViewPartial2 SavedViewPartial2) SavedViewPartialCreatedBy {
	typ := SavedViewPartialCreatedByTypeSavedViewPartial2

	return SavedViewPartialCreatedBy{
		SavedViewPartial2: &savedViewPartial2,
		Type:              typ,
	}
}

func (u *SavedViewPartialCreatedBy) UnmarshalJSON(data []byte) error {

	var savedViewPartial1 SavedViewPartial1 = SavedViewPartial1{}
	if err := utils.UnmarshalJSON(data, &savedViewPartial1, "", true, nil); err == nil {
		u.SavedViewPartial1 = &savedViewPartial1
		u.Type = SavedViewPartialCreatedByTypeSavedViewPartial1
		return nil
	}

	var savedViewPartial2 SavedViewPartial2 = SavedViewPartial2{}
	if err := utils.UnmarshalJSON(data, &savedViewPartial2, "", true, nil); err == nil {
		u.SavedViewPartial2 = &savedViewPartial2
		u.Type = SavedViewPartialCreatedByTypeSavedViewPartial2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SavedViewPartialCreatedBy", string(data))
}

func (u SavedViewPartialCreatedBy) MarshalJSON() ([]byte, error) {
	if u.SavedViewPartial1 != nil {
		return utils.MarshalJSON(u.SavedViewPartial1, "", true)
	}

	if u.SavedViewPartial2 != nil {
		return utils.MarshalJSON(u.SavedViewPartial2, "", true)
	}

	return nil, errors.New("could not marshal union type SavedViewPartialCreatedBy: all fields are null")
}

// SavedViewPartial - A saved entity view
type SavedViewPartial struct {
	CreatedBy *SavedViewPartialCreatedBy `json:"created_by,omitempty"`
	// List of users (IDs) that have favorited the view
	IsFavoritedBy []string `json:"isFavoritedBy,omitempty"`
	// User-friendly identifier for the saved view
	Name *string `json:"name,omitempty"`
	// Organisation ID a view belongs to
	Org *string `json:"org,omitempty"`
	// boolean property for if a view is shared with organisation
	Shared *bool `json:"shared,omitempty"`
	// List of users ('${userId}'), user groups ('group_${groupId}'), or partner users ('${partnerOrgId}_${partnerUserId}') that the view is shared with
	SharedWith []string `json:"shared_with,omitempty"`
	// list of schemas a view can belong to
	Slug     []string       `json:"slug,omitempty"`
	UIConfig map[string]any `json:"ui_config,omitempty"`
}

func (o *SavedViewPartial) GetCreatedBy() *SavedViewPartialCreatedBy {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *SavedViewPartial) GetIsFavoritedBy() []string {
	if o == nil {
		return nil
	}
	return o.IsFavoritedBy
}

func (o *SavedViewPartial) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *SavedViewPartial) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *SavedViewPartial) GetShared() *bool {
	if o == nil {
		return nil
	}
	return o.Shared
}

func (o *SavedViewPartial) GetSharedWith() []string {
	if o == nil {
		return nil
	}
	return o.SharedWith
}

func (o *SavedViewPartial) GetSlug() []string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *SavedViewPartial) GetUIConfig() map[string]any {
	if o == nil {
		return nil
	}
	return o.UIConfig
}
