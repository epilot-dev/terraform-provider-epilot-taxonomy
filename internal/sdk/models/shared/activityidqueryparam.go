// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

type ActivityIDQueryParam2 string

const (
	ActivityIDQueryParam2Unknown ActivityIDQueryParam2 = ""
)

func (e ActivityIDQueryParam2) ToPointer() *ActivityIDQueryParam2 {
	return &e
}
func (e *ActivityIDQueryParam2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		*e = ActivityIDQueryParam2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityIDQueryParam2: %v", v)
	}
}

type ActivityIDQueryParamType string

const (
	ActivityIDQueryParamTypeStr                   ActivityIDQueryParamType = "str"
	ActivityIDQueryParamTypeActivityIDQueryParam2 ActivityIDQueryParamType = "ActivityIdQueryParam_2"
)

type ActivityIDQueryParam struct {
	Str                   *string                `queryParam:"inline" name:"ActivityIdQueryParam"`
	ActivityIDQueryParam2 *ActivityIDQueryParam2 `queryParam:"inline" name:"ActivityIdQueryParam"`

	Type ActivityIDQueryParamType
}

func CreateActivityIDQueryParamStr(str string) ActivityIDQueryParam {
	typ := ActivityIDQueryParamTypeStr

	return ActivityIDQueryParam{
		Str:  &str,
		Type: typ,
	}
}

func CreateActivityIDQueryParamActivityIDQueryParam2(activityIDQueryParam2 ActivityIDQueryParam2) ActivityIDQueryParam {
	typ := ActivityIDQueryParamTypeActivityIDQueryParam2

	return ActivityIDQueryParam{
		ActivityIDQueryParam2: &activityIDQueryParam2,
		Type:                  typ,
	}
}

func (u *ActivityIDQueryParam) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = ActivityIDQueryParamTypeStr
		return nil
	}

	var activityIDQueryParam2 ActivityIDQueryParam2 = ActivityIDQueryParam2("")
	if err := utils.UnmarshalJSON(data, &activityIDQueryParam2, "", true, nil); err == nil {
		u.ActivityIDQueryParam2 = &activityIDQueryParam2
		u.Type = ActivityIDQueryParamTypeActivityIDQueryParam2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ActivityIDQueryParam", string(data))
}

func (u ActivityIDQueryParam) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ActivityIDQueryParam2 != nil {
		return utils.MarshalJSON(u.ActivityIDQueryParam2, "", true)
	}

	return nil, errors.New("could not marshal union type ActivityIDQueryParam: all fields are null")
}
