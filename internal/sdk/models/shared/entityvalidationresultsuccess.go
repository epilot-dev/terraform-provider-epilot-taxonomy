// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EntityValidationResultSuccessStatus string

const (
	EntityValidationResultSuccessStatusSuccess EntityValidationResultSuccessStatus = "success"
)

func (e EntityValidationResultSuccessStatus) ToPointer() *EntityValidationResultSuccessStatus {
	return &e
}
func (e *EntityValidationResultSuccessStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		*e = EntityValidationResultSuccessStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityValidationResultSuccessStatus: %v", v)
	}
}

// EntityValidationResultSuccess - Validation result for a successful validation
type EntityValidationResultSuccess struct {
	Errors []EntityValidationError             `json:"errors"`
	Status EntityValidationResultSuccessStatus `json:"status"`
}

func (e *EntityValidationResultSuccess) GetErrors() []EntityValidationError {
	if e == nil {
		return []EntityValidationError{}
	}
	return e.Errors
}

func (e *EntityValidationResultSuccess) GetStatus() EntityValidationResultSuccessStatus {
	if e == nil {
		return EntityValidationResultSuccessStatus("")
	}
	return e.Status
}
