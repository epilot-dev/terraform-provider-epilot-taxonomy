// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

// StatusAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type StatusAttributeConstraints struct {
}

func (s StatusAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StatusAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

// StatusAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type StatusAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (s StatusAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StatusAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *StatusAttributeInfoHelpers) GetHintCustomComponent() *string {
	if s == nil {
		return nil
	}
	return s.HintCustomComponent
}

func (s *StatusAttributeInfoHelpers) GetHintText() *string {
	if s == nil {
		return nil
	}
	return s.HintText
}

func (s *StatusAttributeInfoHelpers) GetHintTextKey() *string {
	if s == nil {
		return nil
	}
	return s.HintTextKey
}

func (s *StatusAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if s == nil {
		return nil
	}
	return s.HintTooltipPlacement
}

type StatusAttribute2 struct {
	// The displayed title of the option
	Title *string `json:"title,omitempty"`
	// The stored value of the option
	Value string `json:"value"`
}

func (s StatusAttribute2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StatusAttribute2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (s *StatusAttribute2) GetTitle() *string {
	if s == nil {
		return nil
	}
	return s.Title
}

func (s *StatusAttribute2) GetValue() string {
	if s == nil {
		return ""
	}
	return s.Value
}

type StatusAttributeOptionsType string

const (
	StatusAttributeOptionsTypeStr              StatusAttributeOptionsType = "str"
	StatusAttributeOptionsTypeStatusAttribute2 StatusAttributeOptionsType = "StatusAttribute_2"
)

type StatusAttributeOptions struct {
	Str              *string           `queryParam:"inline" name:"options"`
	StatusAttribute2 *StatusAttribute2 `queryParam:"inline" name:"options"`

	Type StatusAttributeOptionsType
}

func CreateStatusAttributeOptionsStr(str string) StatusAttributeOptions {
	typ := StatusAttributeOptionsTypeStr

	return StatusAttributeOptions{
		Str:  &str,
		Type: typ,
	}
}

func CreateStatusAttributeOptionsStatusAttribute2(statusAttribute2 StatusAttribute2) StatusAttributeOptions {
	typ := StatusAttributeOptionsTypeStatusAttribute2

	return StatusAttributeOptions{
		StatusAttribute2: &statusAttribute2,
		Type:             typ,
	}
}

func (u *StatusAttributeOptions) UnmarshalJSON(data []byte) error {

	var statusAttribute2 StatusAttribute2 = StatusAttribute2{}
	if err := utils.UnmarshalJSON(data, &statusAttribute2, "", true, nil); err == nil {
		u.StatusAttribute2 = &statusAttribute2
		u.Type = StatusAttributeOptionsTypeStatusAttribute2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = StatusAttributeOptionsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StatusAttributeOptions", string(data))
}

func (u StatusAttributeOptions) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.StatusAttribute2 != nil {
		return utils.MarshalJSON(u.StatusAttribute2, "", true)
	}

	return nil, errors.New("could not marshal union type StatusAttributeOptions: all fields are null")
}

type StatusAttributeType string

const (
	StatusAttributeTypeStatus StatusAttributeType = "status"
)

func (e StatusAttributeType) ToPointer() *StatusAttributeType {
	return &e
}
func (e *StatusAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "status":
		*e = StatusAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatusAttributeType: %v", v)
	}
}

// StatusAttribute - Status select
type StatusAttribute struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *StatusAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                         `json:"default_value,omitempty"`
	Deprecated   *bool                       `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *StatusAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                      `json:"label"`
	Layout      *string                     `json:"layout,omitempty"`
	Name        string                      `json:"name"`
	Options     []*StatusAttributeOptions   `json:"options,omitempty"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool               `default:"true" json:"sortable"`
	Type           StatusAttributeType `json:"type"`
	ValueFormatter *string             `json:"value_formatter,omitempty"`
}

func (s StatusAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StatusAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (s *StatusAttribute) GetManifest() []string {
	if s == nil {
		return nil
	}
	return s.Manifest
}

func (s *StatusAttribute) GetPurpose() []string {
	if s == nil {
		return nil
	}
	return s.Purpose
}

func (s *StatusAttribute) GetConstraints() *StatusAttributeConstraints {
	if s == nil {
		return nil
	}
	return s.Constraints
}

func (s *StatusAttribute) GetDefaultValue() any {
	if s == nil {
		return nil
	}
	return s.DefaultValue
}

func (s *StatusAttribute) GetDeprecated() *bool {
	if s == nil {
		return nil
	}
	return s.Deprecated
}

func (s *StatusAttribute) GetEntityBuilderDisableEdit() *bool {
	if s == nil {
		return nil
	}
	return s.EntityBuilderDisableEdit
}

func (s *StatusAttribute) GetFeatureFlag() *string {
	if s == nil {
		return nil
	}
	return s.FeatureFlag
}

func (s *StatusAttribute) GetGroup() *string {
	if s == nil {
		return nil
	}
	return s.Group
}

func (s *StatusAttribute) GetHasPrimary() *bool {
	if s == nil {
		return nil
	}
	return s.HasPrimary
}

func (s *StatusAttribute) GetHidden() *bool {
	if s == nil {
		return nil
	}
	return s.Hidden
}

func (s *StatusAttribute) GetHideLabel() *bool {
	if s == nil {
		return nil
	}
	return s.HideLabel
}

func (s *StatusAttribute) GetIcon() *string {
	if s == nil {
		return nil
	}
	return s.Icon
}

func (s *StatusAttribute) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *StatusAttribute) GetInfoHelpers() *StatusAttributeInfoHelpers {
	if s == nil {
		return nil
	}
	return s.InfoHelpers
}

func (s *StatusAttribute) GetLabel() string {
	if s == nil {
		return ""
	}
	return s.Label
}

func (s *StatusAttribute) GetLayout() *string {
	if s == nil {
		return nil
	}
	return s.Layout
}

func (s *StatusAttribute) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *StatusAttribute) GetOptions() []*StatusAttributeOptions {
	if s == nil {
		return nil
	}
	return s.Options
}

func (s *StatusAttribute) GetOrder() *int64 {
	if s == nil {
		return nil
	}
	return s.Order
}

func (s *StatusAttribute) GetPlaceholder() *string {
	if s == nil {
		return nil
	}
	return s.Placeholder
}

func (s *StatusAttribute) GetPreviewValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.PreviewValueFormatter
}

func (s *StatusAttribute) GetProtected() *bool {
	if s == nil {
		return nil
	}
	return s.Protected
}

func (s *StatusAttribute) GetReadonly() *bool {
	if s == nil {
		return nil
	}
	return s.Readonly
}

func (s *StatusAttribute) GetRenderCondition() *string {
	if s == nil {
		return nil
	}
	return s.RenderCondition
}

func (s *StatusAttribute) GetRepeatable() *bool {
	if s == nil {
		return nil
	}
	return s.Repeatable
}

func (s *StatusAttribute) GetRequired() *bool {
	if s == nil {
		return nil
	}
	return s.Required
}

func (s *StatusAttribute) GetSettingsFlag() []SettingFlag {
	if s == nil {
		return nil
	}
	return s.SettingsFlag
}

func (s *StatusAttribute) GetShowInTable() *bool {
	if s == nil {
		return nil
	}
	return s.ShowInTable
}

func (s *StatusAttribute) GetSortable() *bool {
	if s == nil {
		return nil
	}
	return s.Sortable
}

func (s *StatusAttribute) GetType() StatusAttributeType {
	if s == nil {
		return StatusAttributeType("")
	}
	return s.Type
}

func (s *StatusAttribute) GetValueFormatter() *string {
	if s == nil {
		return nil
	}
	return s.ValueFormatter
}
