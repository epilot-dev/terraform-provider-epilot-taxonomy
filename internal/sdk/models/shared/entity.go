// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
	"time"
)

// ACL - Access control list (ACL) for an entity. Defines sharing access to external orgs or users.
type ACL struct {
	AdditionalProperties any      `additionalProperties:"true" json:"-"`
	Delete               []string `json:"delete,omitempty"`
	Edit                 []string `json:"edit,omitempty"`
	View                 []string `json:"view,omitempty"`
}

func (a ACL) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ACL) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *ACL) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *ACL) GetDelete() []string {
	if o == nil {
		return nil
	}
	return o.Delete
}

func (o *ACL) GetEdit() []string {
	if o == nil {
		return nil
	}
	return o.Edit
}

func (o *ACL) GetView() []string {
	if o == nil {
		return nil
	}
	return o.View
}

type Entity struct {
	AdditionalProperties any        `additionalProperties:"true" json:"-"`
	ACL                  *ACL       `json:"_acl,omitempty"`
	CreatedAt            *time.Time `json:"_created_at,omitempty"`
	DeletedAt            *time.Time `json:"_deleted_at,omitempty"`
	ID                   *string    `json:"_id,omitempty"`
	// Manifest ID used to create/update the entity
	Manifest []string `json:"_manifest,omitempty"`
	// Organization Id the entity belongs to
	Org     *string       `json:"_org,omitempty"`
	Owners  []EntityOwner `json:"_owners,omitempty"`
	Purpose []string      `json:"_purpose,omitempty"`
	// URL-friendly identifier for the entity schema
	Schema *string  `json:"_schema,omitempty"`
	Tags   []string `json:"_tags,omitempty"`
	// Title of entity
	Title     *string    `json:"_title,omitempty"`
	UpdatedAt *time.Time `json:"_updated_at,omitempty"`
}

func (e Entity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Entity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *Entity) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *Entity) GetACL() *ACL {
	if o == nil {
		return nil
	}
	return o.ACL
}

func (o *Entity) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Entity) GetDeletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Entity) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Entity) GetManifest() []string {
	if o == nil {
		return nil
	}
	return o.Manifest
}

func (o *Entity) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *Entity) GetOwners() []EntityOwner {
	if o == nil {
		return nil
	}
	return o.Owners
}

func (o *Entity) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *Entity) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *Entity) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Entity) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Entity) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type EntityInput struct {
	AdditionalProperties any     `additionalProperties:"true" json:"-"`
	ACL                  *ACL    `json:"_acl,omitempty"`
	ID                   *string `json:"_id,omitempty"`
	// Manifest ID used to create/update the entity
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// URL-friendly identifier for the entity schema
	Schema *string  `json:"_schema,omitempty"`
	Tags   []string `json:"_tags,omitempty"`
	// Title of entity
	Title *string `json:"_title,omitempty"`
}

func (e EntityInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *EntityInput) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *EntityInput) GetACL() *ACL {
	if o == nil {
		return nil
	}
	return o.ACL
}

func (o *EntityInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EntityInput) GetManifest() []string {
	if o == nil {
		return nil
	}
	return o.Manifest
}

func (o *EntityInput) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *EntityInput) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *EntityInput) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *EntityInput) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}
