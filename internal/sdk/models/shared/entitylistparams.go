// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

// Aggs - Aggregation supported by ElasticSearch allows summarizing data as metrics, statistics, or other analytics.
type Aggs struct {
}

// DefaultOperator - The default boolean operator used if no explicit operator is specified
type DefaultOperator string

const (
	DefaultOperatorAnd DefaultOperator = "AND"
	DefaultOperatorOr  DefaultOperator = "OR"
)

func (e DefaultOperator) ToPointer() *DefaultOperator {
	return &e
}
func (e *DefaultOperator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AND":
		fallthrough
	case "OR":
		*e = DefaultOperator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultOperator: %v", v)
	}
}

// QueryString - Query string configuration based on Elasticsearch query_string query
type QueryString struct {
	// The default boolean operator used if no explicit operator is specified
	DefaultOperator *DefaultOperator `default:"OR" json:"default_operator"`
	// List of fields to search in. If not provided, searches in default fields
	Fields []string `json:"fields,omitempty"`
	// If true, format-based errors are ignored
	Lenient *bool `default:"true" json:"lenient"`
	// The actual query string using Lucene query syntax
	Query string `json:"query"`
}

func (q QueryString) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(q, "", false)
}

func (q *QueryString) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &q, "", false, []string{"query"}); err != nil {
		return err
	}
	return nil
}

func (q *QueryString) GetDefaultOperator() *DefaultOperator {
	if q == nil {
		return nil
	}
	return q.DefaultOperator
}

func (q *QueryString) GetFields() []string {
	if q == nil {
		return nil
	}
	return q.Fields
}

func (q *QueryString) GetLenient() *bool {
	if q == nil {
		return nil
	}
	return q.Lenient
}

func (q *QueryString) GetQuery() string {
	if q == nil {
		return ""
	}
	return q.Query
}

// Query configuration object for searching entities
type Query struct {
	// Query string configuration based on Elasticsearch query_string query
	QueryString QueryString `json:"query_string"`
}

func (q *Query) GetQueryString() QueryString {
	if q == nil {
		return QueryString{}
	}
	return q.QueryString
}

type SearchAfterType string

const (
	SearchAfterTypeStr    SearchAfterType = "str"
	SearchAfterTypeNumber SearchAfterType = "number"
)

type SearchAfter struct {
	Str    *string  `queryParam:"inline,name=search_after"`
	Number *float64 `queryParam:"inline,name=search_after"`

	Type SearchAfterType
}

func CreateSearchAfterStr(str string) SearchAfter {
	typ := SearchAfterTypeStr

	return SearchAfter{
		Str:  &str,
		Type: typ,
	}
}

func CreateSearchAfterNumber(number float64) SearchAfter {
	typ := SearchAfterTypeNumber

	return SearchAfter{
		Number: &number,
		Type:   typ,
	}
}

func (u *SearchAfter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = SearchAfterTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = SearchAfterTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SearchAfter", string(data))
}

func (u SearchAfter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type SearchAfter: all fields are null")
}

type SortType string

const (
	SortTypeStr        SortType = "str"
	SortTypeArrayOfStr SortType = "arrayOfStr"
)

// Sort - You can pass one sort field or an array of sort fields. Each sort field can be a string
type Sort struct {
	Str        *string  `queryParam:"inline,name=sort"`
	ArrayOfStr []string `queryParam:"inline,name=sort"`

	Type SortType
}

func CreateSortStr(str string) Sort {
	typ := SortTypeStr

	return Sort{
		Str:  &str,
		Type: typ,
	}
}

func CreateSortArrayOfStr(arrayOfStr []string) Sort {
	typ := SortTypeArrayOfStr

	return Sort{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *Sort) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = SortTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = SortTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Sort", string(data))
}

func (u Sort) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type Sort: all fields are null")
}

type EntityListParams struct {
	// Aggregation supported by ElasticSearch allows summarizing data as metrics, statistics, or other analytics.
	Aggs *Aggs `json:"aggs,omitempty"`
	// Allow running the listing without any schema filter. This is disabled by default to prevent security and performance issues if done by an accident.
	AllowTargetingAllSchemas *bool `default:"false" json:"allow_targeting_all_schemas"`
	// List of entity fields to include or exclude in the response
	//
	// Use ! to exclude fields, e.g. `!_id` to exclude the `_id` field.
	//
	// Globbing and globstart (**) is supported for nested fields.
	//
	Fields []string `json:"fields,omitempty"`
	// A subset of simplified Elasticsearch query clauses. The default operator is a logical AND. Use nested $and, $or, $not to combine filters using different logical operators.
	Filter []SearchFilter `json:"filter"`
	// The offset from which to start the search results.
	// Only one of `from` or `search_after` should be used.
	//
	From      *int64 `default:"0" json:"from"`
	Highlight any    `json:"highlight,omitempty"`
	// When true, enables entity hydration to resolve nested $relation & $relation_ref references in-place.
	Hydrate *bool `default:"false" json:"hydrate"`
	// Whether to include deleted entities in the search results
	// - `true`: include deleted entities
	// - `false`: exclude deleted entities
	// - `only`: include only deleted entities
	//
	// By default, no deleted entities are included in the search results.
	//
	IncludeDeleted *EntitySearchIncludeDeletedParam `default:"false" json:"include_deleted"`
	// Adds a `_score` number field to results that can be used to rank by match score
	IncludeScores *bool `default:"false" json:"include_scores"`
	// Query configuration object for searching entities
	Query *Query `json:"query,omitempty"`
	// The sort values from which to start the search results.
	// Only one of `from` or `search_after` should be used.
	// It is strongly recommended to always use the `sort_end` field from the last search result.
	// Used for deep pagination, typically together with `stable_query_id` to maintain the context between requests.
	// Requires explicit sort to work reliably.
	// Typically used sort fields are `_id` or `_created_at`.
	//
	SearchAfter []*SearchAfter `json:"search_after,omitempty"`
	// Max search size is 1000 with higher values defaulting to 1000
	Size *int64 `default:"10" json:"size"`
	// You can pass one sort field or an array of sort fields. Each sort field can be a string
	Sort *Sort `json:"sort,omitempty"`
	// A TTL (in seconds) that specifies how long the context should be maintained.
	// Defaults to 30 seconds; configurable up to 60 seconds to prevent abuse.
	// A value of 0 can be provided the close the context after the query.
	// Defaults to none.
	//
	StableFor *int64 `json:"stable_for,omitempty"`
	// A unique identifier of the query context from the last stable query.
	// The context is maintained for the duration of the stable_for value.
	//
	StableQueryID *string `json:"stable_query_id,omitempty"`
}

func (e EntityListParams) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityListParams) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"filter"}); err != nil {
		return err
	}
	return nil
}

func (e *EntityListParams) GetAggs() *Aggs {
	if e == nil {
		return nil
	}
	return e.Aggs
}

func (e *EntityListParams) GetAllowTargetingAllSchemas() *bool {
	if e == nil {
		return nil
	}
	return e.AllowTargetingAllSchemas
}

func (e *EntityListParams) GetFields() []string {
	if e == nil {
		return nil
	}
	return e.Fields
}

func (e *EntityListParams) GetFilter() []SearchFilter {
	if e == nil {
		return []SearchFilter{}
	}
	return e.Filter
}

func (e *EntityListParams) GetFrom() *int64 {
	if e == nil {
		return nil
	}
	return e.From
}

func (e *EntityListParams) GetHighlight() any {
	if e == nil {
		return nil
	}
	return e.Highlight
}

func (e *EntityListParams) GetHydrate() *bool {
	if e == nil {
		return nil
	}
	return e.Hydrate
}

func (e *EntityListParams) GetIncludeDeleted() *EntitySearchIncludeDeletedParam {
	if e == nil {
		return nil
	}
	return e.IncludeDeleted
}

func (e *EntityListParams) GetIncludeScores() *bool {
	if e == nil {
		return nil
	}
	return e.IncludeScores
}

func (e *EntityListParams) GetQuery() *Query {
	if e == nil {
		return nil
	}
	return e.Query
}

func (e *EntityListParams) GetSearchAfter() []*SearchAfter {
	if e == nil {
		return nil
	}
	return e.SearchAfter
}

func (e *EntityListParams) GetSize() *int64 {
	if e == nil {
		return nil
	}
	return e.Size
}

func (e *EntityListParams) GetSort() *Sort {
	if e == nil {
		return nil
	}
	return e.Sort
}

func (e *EntityListParams) GetStableFor() *int64 {
	if e == nil {
		return nil
	}
	return e.StableFor
}

func (e *EntityListParams) GetStableQueryID() *string {
	if e == nil {
		return nil
	}
	return e.StableQueryID
}
