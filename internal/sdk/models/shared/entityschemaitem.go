// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

// EntitySchemaItemLayoutSettings - Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:
// - Managed Properties: are interpreted and transformed into layout styles
// - Un-managed Properties: are appended as styles into the attribute mounting node
type EntitySchemaItemLayoutSettings struct {
	AdditionalProperties any `additionalProperties:"true" json:"-"`
	// Defines the grid gap for the mounting node of the attribute.
	GridGap *string `json:"grid_gap,omitempty"`
	// Defines the grid column template for the mounting node of the attribute.
	GridTemplateColumns *string `json:"grid_template_columns,omitempty"`
}

func (e EntitySchemaItemLayoutSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntitySchemaItemLayoutSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (e *EntitySchemaItemLayoutSettings) GetAdditionalProperties() any {
	if e == nil {
		return nil
	}
	return e.AdditionalProperties
}

func (e *EntitySchemaItemLayoutSettings) GetGridGap() *string {
	if e == nil {
		return nil
	}
	return e.GridGap
}

func (e *EntitySchemaItemLayoutSettings) GetGridTemplateColumns() *string {
	if e == nil {
		return nil
	}
	return e.GridTemplateColumns
}

type Source struct {
	ID   *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

func (s *Source) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *Source) GetType() *string {
	if s == nil {
		return nil
	}
	return s.Type
}

type EntitySchemaItemCreateViewType string

const (
	EntitySchemaItemCreateViewTypeEntityDefaultCreate EntitySchemaItemCreateViewType = "EntityDefaultCreate"
	EntitySchemaItemCreateViewTypeRedirectEntityView  EntitySchemaItemCreateViewType = "RedirectEntityView"
	EntitySchemaItemCreateViewTypeEntityViewDisabled  EntitySchemaItemCreateViewType = "EntityViewDisabled"
)

type EntitySchemaItemCreateView struct {
	EntityDefaultCreate *EntityDefaultCreate `queryParam:"inline,name=create_view"`
	RedirectEntityView  *RedirectEntityView  `queryParam:"inline,name=create_view"`
	EntityViewDisabled  *EntityViewDisabled  `queryParam:"inline,name=create_view"`

	Type EntitySchemaItemCreateViewType
}

func CreateEntitySchemaItemCreateViewEntityDefaultCreate(entityDefaultCreate EntityDefaultCreate) EntitySchemaItemCreateView {
	typ := EntitySchemaItemCreateViewTypeEntityDefaultCreate

	return EntitySchemaItemCreateView{
		EntityDefaultCreate: &entityDefaultCreate,
		Type:                typ,
	}
}

func CreateEntitySchemaItemCreateViewRedirectEntityView(redirectEntityView RedirectEntityView) EntitySchemaItemCreateView {
	typ := EntitySchemaItemCreateViewTypeRedirectEntityView

	return EntitySchemaItemCreateView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateEntitySchemaItemCreateViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) EntitySchemaItemCreateView {
	typ := EntitySchemaItemCreateViewTypeEntityViewDisabled

	return EntitySchemaItemCreateView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *EntitySchemaItemCreateView) UnmarshalJSON(data []byte) error {

	var entityDefaultCreate EntityDefaultCreate = EntityDefaultCreate{}
	if err := utils.UnmarshalJSON(data, &entityDefaultCreate, "", true, nil); err == nil {
		u.EntityDefaultCreate = &entityDefaultCreate
		u.Type = EntitySchemaItemCreateViewTypeEntityDefaultCreate
		return nil
	}

	var redirectEntityView RedirectEntityView = RedirectEntityView{}
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, nil); err == nil {
		u.RedirectEntityView = &redirectEntityView
		u.Type = EntitySchemaItemCreateViewTypeRedirectEntityView
		return nil
	}

	var entityViewDisabled EntityViewDisabled = EntityViewDisabled{}
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, nil); err == nil {
		u.EntityViewDisabled = &entityViewDisabled
		u.Type = EntitySchemaItemCreateViewTypeEntityViewDisabled
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EntitySchemaItemCreateView", string(data))
}

func (u EntitySchemaItemCreateView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultCreate != nil {
		return utils.MarshalJSON(u.EntityDefaultCreate, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type EntitySchemaItemCreateView: all fields are null")
}

type EntitySchemaItemEditViewType string

const (
	EntitySchemaItemEditViewTypeEntityDefaultEdit  EntitySchemaItemEditViewType = "EntityDefaultEdit"
	EntitySchemaItemEditViewTypeRedirectEntityView EntitySchemaItemEditViewType = "RedirectEntityView"
	EntitySchemaItemEditViewTypeEntityViewDisabled EntitySchemaItemEditViewType = "EntityViewDisabled"
)

type EntitySchemaItemEditView struct {
	EntityDefaultEdit  *EntityDefaultEdit  `queryParam:"inline,name=edit_view"`
	RedirectEntityView *RedirectEntityView `queryParam:"inline,name=edit_view"`
	EntityViewDisabled *EntityViewDisabled `queryParam:"inline,name=edit_view"`

	Type EntitySchemaItemEditViewType
}

func CreateEntitySchemaItemEditViewEntityDefaultEdit(entityDefaultEdit EntityDefaultEdit) EntitySchemaItemEditView {
	typ := EntitySchemaItemEditViewTypeEntityDefaultEdit

	return EntitySchemaItemEditView{
		EntityDefaultEdit: &entityDefaultEdit,
		Type:              typ,
	}
}

func CreateEntitySchemaItemEditViewRedirectEntityView(redirectEntityView RedirectEntityView) EntitySchemaItemEditView {
	typ := EntitySchemaItemEditViewTypeRedirectEntityView

	return EntitySchemaItemEditView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateEntitySchemaItemEditViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) EntitySchemaItemEditView {
	typ := EntitySchemaItemEditViewTypeEntityViewDisabled

	return EntitySchemaItemEditView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *EntitySchemaItemEditView) UnmarshalJSON(data []byte) error {

	var entityDefaultEdit EntityDefaultEdit = EntityDefaultEdit{}
	if err := utils.UnmarshalJSON(data, &entityDefaultEdit, "", true, nil); err == nil {
		u.EntityDefaultEdit = &entityDefaultEdit
		u.Type = EntitySchemaItemEditViewTypeEntityDefaultEdit
		return nil
	}

	var redirectEntityView RedirectEntityView = RedirectEntityView{}
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, nil); err == nil {
		u.RedirectEntityView = &redirectEntityView
		u.Type = EntitySchemaItemEditViewTypeRedirectEntityView
		return nil
	}

	var entityViewDisabled EntityViewDisabled = EntityViewDisabled{}
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, nil); err == nil {
		u.EntityViewDisabled = &entityViewDisabled
		u.Type = EntitySchemaItemEditViewTypeEntityViewDisabled
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EntitySchemaItemEditView", string(data))
}

func (u EntitySchemaItemEditView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultEdit != nil {
		return utils.MarshalJSON(u.EntityDefaultEdit, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type EntitySchemaItemEditView: all fields are null")
}

type EntitySchemaItemSummaryAttributesType string

const (
	EntitySchemaItemSummaryAttributesTypeSummaryAttribute EntitySchemaItemSummaryAttributesType = "SummaryAttribute"
	EntitySchemaItemSummaryAttributesTypeStr              EntitySchemaItemSummaryAttributesType = "str"
)

type EntitySchemaItemSummaryAttributes struct {
	SummaryAttribute *SummaryAttribute `queryParam:"inline,name=summary_attributes"`
	Str              *string           `queryParam:"inline,name=summary_attributes"`

	Type EntitySchemaItemSummaryAttributesType
}

func CreateEntitySchemaItemSummaryAttributesSummaryAttribute(summaryAttribute SummaryAttribute) EntitySchemaItemSummaryAttributes {
	typ := EntitySchemaItemSummaryAttributesTypeSummaryAttribute

	return EntitySchemaItemSummaryAttributes{
		SummaryAttribute: &summaryAttribute,
		Type:             typ,
	}
}

func CreateEntitySchemaItemSummaryAttributesStr(str string) EntitySchemaItemSummaryAttributes {
	typ := EntitySchemaItemSummaryAttributesTypeStr

	return EntitySchemaItemSummaryAttributes{
		Str:  &str,
		Type: typ,
	}
}

func (u *EntitySchemaItemSummaryAttributes) UnmarshalJSON(data []byte) error {

	var summaryAttribute SummaryAttribute = SummaryAttribute{}
	if err := utils.UnmarshalJSON(data, &summaryAttribute, "", true, nil); err == nil {
		u.SummaryAttribute = &summaryAttribute
		u.Type = EntitySchemaItemSummaryAttributesTypeSummaryAttribute
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = EntitySchemaItemSummaryAttributesTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EntitySchemaItemSummaryAttributes", string(data))
}

func (u EntitySchemaItemSummaryAttributes) MarshalJSON() ([]byte, error) {
	if u.SummaryAttribute != nil {
		return utils.MarshalJSON(u.SummaryAttribute, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type EntitySchemaItemSummaryAttributes: all fields are null")
}

// EntitySchemaItemContentDirection - Show attributes in a row or column
type EntitySchemaItemContentDirection string

const (
	EntitySchemaItemContentDirectionRow    EntitySchemaItemContentDirection = "row"
	EntitySchemaItemContentDirectionColumn EntitySchemaItemContentDirection = "column"
)

func (e EntitySchemaItemContentDirection) ToPointer() *EntitySchemaItemContentDirection {
	return &e
}
func (e *EntitySchemaItemContentDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "row":
		fallthrough
	case "column":
		*e = EntitySchemaItemContentDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntitySchemaItemContentDirection: %v", v)
	}
}

type EntitySchemaItemSchemasUIConfig struct {
	// Show attributes in a row or column
	ContentDirection *EntitySchemaItemContentDirection `json:"content_direction,omitempty"`
}

func (e *EntitySchemaItemSchemasUIConfig) GetContentDirection() *EntitySchemaItemContentDirection {
	if e == nil {
		return nil
	}
	return e.ContentDirection
}

type EntitySchemaItemListItem struct {
	QuickActions      []EntityAction                      `json:"quick_actions,omitempty"`
	SummaryAttributes []EntitySchemaItemSummaryAttributes `json:"summary_attributes,omitempty"`
	UIConfig          *EntitySchemaItemSchemasUIConfig    `json:"ui_config,omitempty"`
}

func (e *EntitySchemaItemListItem) GetQuickActions() []EntityAction {
	if e == nil {
		return nil
	}
	return e.QuickActions
}

func (e *EntitySchemaItemListItem) GetSummaryAttributes() []EntitySchemaItemSummaryAttributes {
	if e == nil {
		return nil
	}
	return e.SummaryAttributes
}

func (e *EntitySchemaItemListItem) GetUIConfig() *EntitySchemaItemSchemasUIConfig {
	if e == nil {
		return nil
	}
	return e.UIConfig
}

type EntitySchemaItemSharing struct {
	// Show the sharing button in entity detail view
	ShowSharingButton *bool `json:"show_sharing_button,omitempty"`
}

func (e *EntitySchemaItemSharing) GetShowSharingButton() *bool {
	if e == nil {
		return nil
	}
	return e.ShowSharingButton
}

type EntitySchemaItemSingleViewType string

const (
	EntitySchemaItemSingleViewTypeEntityDefaultEdit  EntitySchemaItemSingleViewType = "EntityDefaultEdit"
	EntitySchemaItemSingleViewTypeRedirectEntityView EntitySchemaItemSingleViewType = "RedirectEntityView"
	EntitySchemaItemSingleViewTypeEntityViewDisabled EntitySchemaItemSingleViewType = "EntityViewDisabled"
)

type EntitySchemaItemSingleView struct {
	EntityDefaultEdit  *EntityDefaultEdit  `queryParam:"inline,name=single_view"`
	RedirectEntityView *RedirectEntityView `queryParam:"inline,name=single_view"`
	EntityViewDisabled *EntityViewDisabled `queryParam:"inline,name=single_view"`

	Type EntitySchemaItemSingleViewType
}

func CreateEntitySchemaItemSingleViewEntityDefaultEdit(entityDefaultEdit EntityDefaultEdit) EntitySchemaItemSingleView {
	typ := EntitySchemaItemSingleViewTypeEntityDefaultEdit

	return EntitySchemaItemSingleView{
		EntityDefaultEdit: &entityDefaultEdit,
		Type:              typ,
	}
}

func CreateEntitySchemaItemSingleViewRedirectEntityView(redirectEntityView RedirectEntityView) EntitySchemaItemSingleView {
	typ := EntitySchemaItemSingleViewTypeRedirectEntityView

	return EntitySchemaItemSingleView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateEntitySchemaItemSingleViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) EntitySchemaItemSingleView {
	typ := EntitySchemaItemSingleViewTypeEntityViewDisabled

	return EntitySchemaItemSingleView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *EntitySchemaItemSingleView) UnmarshalJSON(data []byte) error {

	var entityDefaultEdit EntityDefaultEdit = EntityDefaultEdit{}
	if err := utils.UnmarshalJSON(data, &entityDefaultEdit, "", true, nil); err == nil {
		u.EntityDefaultEdit = &entityDefaultEdit
		u.Type = EntitySchemaItemSingleViewTypeEntityDefaultEdit
		return nil
	}

	var redirectEntityView RedirectEntityView = RedirectEntityView{}
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, nil); err == nil {
		u.RedirectEntityView = &redirectEntityView
		u.Type = EntitySchemaItemSingleViewTypeRedirectEntityView
		return nil
	}

	var entityViewDisabled EntityViewDisabled = EntityViewDisabled{}
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, nil); err == nil {
		u.EntityViewDisabled = &entityViewDisabled
		u.Type = EntitySchemaItemSingleViewTypeEntityViewDisabled
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EntitySchemaItemSingleView", string(data))
}

func (u EntitySchemaItemSingleView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultEdit != nil {
		return utils.MarshalJSON(u.EntityDefaultEdit, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type EntitySchemaItemSingleView: all fields are null")
}

type EntitySchemaItemTableViewType string

const (
	EntitySchemaItemTableViewTypeEntityDefaultTable EntitySchemaItemTableViewType = "EntityDefaultTable"
	EntitySchemaItemTableViewTypeRedirectEntityView EntitySchemaItemTableViewType = "RedirectEntityView"
	EntitySchemaItemTableViewTypeEntityViewDisabled EntitySchemaItemTableViewType = "EntityViewDisabled"
)

type EntitySchemaItemTableView struct {
	EntityDefaultTable *EntityDefaultTable `queryParam:"inline,name=table_view"`
	RedirectEntityView *RedirectEntityView `queryParam:"inline,name=table_view"`
	EntityViewDisabled *EntityViewDisabled `queryParam:"inline,name=table_view"`

	Type EntitySchemaItemTableViewType
}

func CreateEntitySchemaItemTableViewEntityDefaultTable(entityDefaultTable EntityDefaultTable) EntitySchemaItemTableView {
	typ := EntitySchemaItemTableViewTypeEntityDefaultTable

	return EntitySchemaItemTableView{
		EntityDefaultTable: &entityDefaultTable,
		Type:               typ,
	}
}

func CreateEntitySchemaItemTableViewRedirectEntityView(redirectEntityView RedirectEntityView) EntitySchemaItemTableView {
	typ := EntitySchemaItemTableViewTypeRedirectEntityView

	return EntitySchemaItemTableView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateEntitySchemaItemTableViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) EntitySchemaItemTableView {
	typ := EntitySchemaItemTableViewTypeEntityViewDisabled

	return EntitySchemaItemTableView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *EntitySchemaItemTableView) UnmarshalJSON(data []byte) error {

	var entityDefaultTable EntityDefaultTable = EntityDefaultTable{}
	if err := utils.UnmarshalJSON(data, &entityDefaultTable, "", true, nil); err == nil {
		u.EntityDefaultTable = &entityDefaultTable
		u.Type = EntitySchemaItemTableViewTypeEntityDefaultTable
		return nil
	}

	var redirectEntityView RedirectEntityView = RedirectEntityView{}
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, nil); err == nil {
		u.RedirectEntityView = &redirectEntityView
		u.Type = EntitySchemaItemTableViewTypeRedirectEntityView
		return nil
	}

	var entityViewDisabled EntityViewDisabled = EntityViewDisabled{}
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, nil); err == nil {
		u.EntityViewDisabled = &entityViewDisabled
		u.Type = EntitySchemaItemTableViewTypeEntityViewDisabled
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EntitySchemaItemTableView", string(data))
}

func (u EntitySchemaItemTableView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultTable != nil {
		return utils.MarshalJSON(u.EntityDefaultTable, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type EntitySchemaItemTableView: all fields are null")
}

type EntitySchemaItemUIConfig struct {
	CreateView *EntitySchemaItemCreateView `json:"create_view,omitempty"`
	EditView   *EntitySchemaItemEditView   `json:"edit_view,omitempty"`
	ListItem   *EntitySchemaItemListItem   `json:"list_item,omitempty"`
	Sharing    *EntitySchemaItemSharing    `json:"sharing,omitempty"`
	SingleView *EntitySchemaItemSingleView `json:"single_view,omitempty"`
	TableView  *EntitySchemaItemTableView  `json:"table_view,omitempty"`
}

func (e *EntitySchemaItemUIConfig) GetCreateView() *EntitySchemaItemCreateView {
	if e == nil {
		return nil
	}
	return e.CreateView
}

func (e *EntitySchemaItemUIConfig) GetEditView() *EntitySchemaItemEditView {
	if e == nil {
		return nil
	}
	return e.EditView
}

func (e *EntitySchemaItemUIConfig) GetListItem() *EntitySchemaItemListItem {
	if e == nil {
		return nil
	}
	return e.ListItem
}

func (e *EntitySchemaItemUIConfig) GetSharing() *EntitySchemaItemSharing {
	if e == nil {
		return nil
	}
	return e.Sharing
}

func (e *EntitySchemaItemUIConfig) GetSingleView() *EntitySchemaItemSingleView {
	if e == nil {
		return nil
	}
	return e.SingleView
}

func (e *EntitySchemaItemUIConfig) GetTableView() *EntitySchemaItemTableView {
	if e == nil {
		return nil
	}
	return e.TableView
}

// EntitySchemaItem - The "type" of an Entity. Describes the shape. Includes Entity Attributes, Relations and Capabilities.
type EntitySchemaItem struct {
	Purpose []string `json:"_purpose,omitempty"`
	// An ordered list of attributes the entity contains
	Attributes []Attribute `json:"attributes"`
	// Reference to blueprint
	Blueprint    *string            `json:"blueprint,omitempty"`
	Capabilities []EntityCapability `json:"capabilities"`
	Category     *string            `json:"category,omitempty"`
	Comment      *string            `json:"comment,omitempty"`
	CreatedAt    *string            `json:"created_at,omitempty"`
	Description  *string            `json:"description,omitempty"`
	DialogConfig map[string]any     `json:"dialog_config,omitempty"`
	DocsURL      *string            `json:"docs_url,omitempty"`
	Draft        *bool              `json:"draft,omitempty"`
	// This schema should only be active when one of the organization settings is enabled
	EnableSetting []string `json:"enable_setting,omitempty"`
	// Advanced: explicit Elasticsearch index mapping definitions for entity data
	//
	ExplicitSearchMappings map[string]SearchMappings `json:"explicit_search_mappings,omitempty"`
	// This schema should only be active when the feature flag is enabled
	FeatureFlag    *string         `json:"feature_flag,omitempty"`
	GroupHeadlines []GroupHeadline `json:"group_headlines,omitempty"`
	// A list of Group Titles and associated settings if present.
	GroupSettings []EntitySchemaGroup `json:"group_settings,omitempty"`
	Icon          *string             `json:"icon,omitempty"`
	// Generated uuid for schema
	ID *string `json:"id,omitempty"`
	// Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:
	// - Managed Properties: are interpreted and transformed into layout styles
	// - Un-managed Properties: are appended as styles into the attribute mounting node
	//
	LayoutSettings *EntitySchemaItemLayoutSettings `json:"layout_settings,omitempty"`
	// User-friendly identifier for the entity schema
	Name      string `json:"name"`
	Plural    string `json:"plural"`
	Published *bool  `json:"published,omitempty"`
	// URL-friendly identifier for the entity schema
	Slug   string  `json:"slug"`
	Source *Source `json:"source,omitempty"`
	// Template for rendering the title field. Uses handlebars
	TitleTemplate *string                   `json:"title_template,omitempty"`
	UIConfig      *EntitySchemaItemUIConfig `json:"ui_config,omitempty"`
	UpdatedAt     *string                   `json:"updated_at,omitempty"`
	Version       *int64                    `json:"version,omitempty"`
}

func (e *EntitySchemaItem) GetPurpose() []string {
	if e == nil {
		return nil
	}
	return e.Purpose
}

func (e *EntitySchemaItem) GetAttributes() []Attribute {
	if e == nil {
		return []Attribute{}
	}
	return e.Attributes
}

func (e *EntitySchemaItem) GetBlueprint() *string {
	if e == nil {
		return nil
	}
	return e.Blueprint
}

func (e *EntitySchemaItem) GetCapabilities() []EntityCapability {
	if e == nil {
		return []EntityCapability{}
	}
	return e.Capabilities
}

func (e *EntitySchemaItem) GetCategory() *string {
	if e == nil {
		return nil
	}
	return e.Category
}

func (e *EntitySchemaItem) GetComment() *string {
	if e == nil {
		return nil
	}
	return e.Comment
}

func (e *EntitySchemaItem) GetCreatedAt() *string {
	if e == nil {
		return nil
	}
	return e.CreatedAt
}

func (e *EntitySchemaItem) GetDescription() *string {
	if e == nil {
		return nil
	}
	return e.Description
}

func (e *EntitySchemaItem) GetDialogConfig() map[string]any {
	if e == nil {
		return nil
	}
	return e.DialogConfig
}

func (e *EntitySchemaItem) GetDocsURL() *string {
	if e == nil {
		return nil
	}
	return e.DocsURL
}

func (e *EntitySchemaItem) GetDraft() *bool {
	if e == nil {
		return nil
	}
	return e.Draft
}

func (e *EntitySchemaItem) GetEnableSetting() []string {
	if e == nil {
		return nil
	}
	return e.EnableSetting
}

func (e *EntitySchemaItem) GetExplicitSearchMappings() map[string]SearchMappings {
	if e == nil {
		return nil
	}
	return e.ExplicitSearchMappings
}

func (e *EntitySchemaItem) GetFeatureFlag() *string {
	if e == nil {
		return nil
	}
	return e.FeatureFlag
}

func (e *EntitySchemaItem) GetGroupHeadlines() []GroupHeadline {
	if e == nil {
		return nil
	}
	return e.GroupHeadlines
}

func (e *EntitySchemaItem) GetGroupSettings() []EntitySchemaGroup {
	if e == nil {
		return nil
	}
	return e.GroupSettings
}

func (e *EntitySchemaItem) GetIcon() *string {
	if e == nil {
		return nil
	}
	return e.Icon
}

func (e *EntitySchemaItem) GetID() *string {
	if e == nil {
		return nil
	}
	return e.ID
}

func (e *EntitySchemaItem) GetLayoutSettings() *EntitySchemaItemLayoutSettings {
	if e == nil {
		return nil
	}
	return e.LayoutSettings
}

func (e *EntitySchemaItem) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *EntitySchemaItem) GetPlural() string {
	if e == nil {
		return ""
	}
	return e.Plural
}

func (e *EntitySchemaItem) GetPublished() *bool {
	if e == nil {
		return nil
	}
	return e.Published
}

func (e *EntitySchemaItem) GetSlug() string {
	if e == nil {
		return ""
	}
	return e.Slug
}

func (e *EntitySchemaItem) GetSource() *Source {
	if e == nil {
		return nil
	}
	return e.Source
}

func (e *EntitySchemaItem) GetTitleTemplate() *string {
	if e == nil {
		return nil
	}
	return e.TitleTemplate
}

func (e *EntitySchemaItem) GetUIConfig() *EntitySchemaItemUIConfig {
	if e == nil {
		return nil
	}
	return e.UIConfig
}

func (e *EntitySchemaItem) GetUpdatedAt() *string {
	if e == nil {
		return nil
	}
	return e.UpdatedAt
}

func (e *EntitySchemaItem) GetVersion() *int64 {
	if e == nil {
		return nil
	}
	return e.Version
}
