// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

type RedirectEntityViewViewType string

const (
	RedirectEntityViewViewTypeRedirect RedirectEntityViewViewType = "redirect"
)

func (e RedirectEntityViewViewType) ToPointer() *RedirectEntityViewViewType {
	return &e
}
func (e *RedirectEntityViewViewType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redirect":
		*e = RedirectEntityViewViewType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RedirectEntityViewViewType: %v", v)
	}
}

type RedirectEntityView struct {
	Route    *string                     `json:"route,omitempty"`
	ViewType *RedirectEntityViewViewType `json:"view_type,omitempty"`
}

func (r RedirectEntityView) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RedirectEntityView) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (r *RedirectEntityView) GetRoute() *string {
	if r == nil {
		return nil
	}
	return r.Route
}

func (r *RedirectEntityView) GetViewType() *RedirectEntityViewViewType {
	if r == nil {
		return nil
	}
	return r.ViewType
}
