// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EntityValidationV2ResultErrorStatus string

const (
	EntityValidationV2ResultErrorStatusError EntityValidationV2ResultErrorStatus = "error"
)

func (e EntityValidationV2ResultErrorStatus) ToPointer() *EntityValidationV2ResultErrorStatus {
	return &e
}
func (e *EntityValidationV2ResultErrorStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		*e = EntityValidationV2ResultErrorStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityValidationV2ResultErrorStatus: %v", v)
	}
}

// EntityValidationV2ResultError - Validation result for a failed validation
type EntityValidationV2ResultError struct {
	Errors []EntityValidationV2Error           `json:"errors"`
	Status EntityValidationV2ResultErrorStatus `json:"status"`
}

func (o *EntityValidationV2ResultError) GetErrors() []EntityValidationV2Error {
	if o == nil {
		return []EntityValidationV2Error{}
	}
	return o.Errors
}

func (o *EntityValidationV2ResultError) GetStatus() EntityValidationV2ResultErrorStatus {
	if o == nil {
		return EntityValidationV2ResultErrorStatus("")
	}
	return o.Status
}
