// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

// RelationAttributeActionType - The action type. Currently supported actions:
//
// | action | description |
// |--------|-------------|
// | add_existing | Enables the user to pick an existing entity to link as relation |
// | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
// | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |
type RelationAttributeActionType string

const (
	RelationAttributeActionTypeAddExisting        RelationAttributeActionType = "add_existing"
	RelationAttributeActionTypeCreateNew          RelationAttributeActionType = "create_new"
	RelationAttributeActionTypeCreateFromExisting RelationAttributeActionType = "create_from_existing"
)

func (e RelationAttributeActionType) ToPointer() *RelationAttributeActionType {
	return &e
}
func (e *RelationAttributeActionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "add_existing":
		fallthrough
	case "create_new":
		fallthrough
	case "create_from_existing":
		*e = RelationAttributeActionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAttributeActionType: %v", v)
	}
}

type RelationAttributeActions struct {
	// The action type. Currently supported actions:
	//
	// | action | description |
	// |--------|-------------|
	// | add_existing | Enables the user to pick an existing entity to link as relation |
	// | create_new | Enables the user to create a new entity using the first/main `allowed_schemas` schema
	// | create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |
	//
	ActionType *RelationAttributeActionType `json:"action_type,omitempty"`
	// Sets the action as the default action, visible as the main action button.
	Default *bool `json:"default,omitempty"`
	// Name of the feature flag that enables this action
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// The action label or action translation key (i18n)
	Label *string `json:"label,omitempty"`
	// Default field values for new entity to create
	NewEntityItem map[string]any `json:"new_entity_item,omitempty"`
	// This action should only be active when all the settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
}

func (r RelationAttributeActions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RelationAttributeActions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (r *RelationAttributeActions) GetActionType() *RelationAttributeActionType {
	if r == nil {
		return nil
	}
	return r.ActionType
}

func (r *RelationAttributeActions) GetDefault() *bool {
	if r == nil {
		return nil
	}
	return r.Default
}

func (r *RelationAttributeActions) GetFeatureFlag() *string {
	if r == nil {
		return nil
	}
	return r.FeatureFlag
}

func (r *RelationAttributeActions) GetLabel() *string {
	if r == nil {
		return nil
	}
	return r.Label
}

func (r *RelationAttributeActions) GetNewEntityItem() map[string]any {
	if r == nil {
		return nil
	}
	return r.NewEntityItem
}

func (r *RelationAttributeActions) GetSettingsFlag() []SettingFlag {
	if r == nil {
		return nil
	}
	return r.SettingsFlag
}

// RelationAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type RelationAttributeConstraints struct {
}

func (r RelationAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RelationAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, nil); err != nil {
		return err
	}
	return nil
}

type RelationAttributeDrawerSize string

const (
	RelationAttributeDrawerSizeSmall  RelationAttributeDrawerSize = "small"
	RelationAttributeDrawerSizeMedium RelationAttributeDrawerSize = "medium"
	RelationAttributeDrawerSizeLarge  RelationAttributeDrawerSize = "large"
)

func (e RelationAttributeDrawerSize) ToPointer() *RelationAttributeDrawerSize {
	return &e
}
func (e *RelationAttributeDrawerSize) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "small":
		fallthrough
	case "medium":
		fallthrough
	case "large":
		*e = RelationAttributeDrawerSize(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAttributeDrawerSize: %v", v)
	}
}

type RelationAttributeEditMode string

const (
	RelationAttributeEditModeListView RelationAttributeEditMode = "list-view"
)

func (e RelationAttributeEditMode) ToPointer() *RelationAttributeEditMode {
	return &e
}
func (e *RelationAttributeEditMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list-view":
		*e = RelationAttributeEditMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAttributeEditMode: %v", v)
	}
}

// RelationAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type RelationAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (r RelationAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RelationAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (r *RelationAttributeInfoHelpers) GetHintCustomComponent() *string {
	if r == nil {
		return nil
	}
	return r.HintCustomComponent
}

func (r *RelationAttributeInfoHelpers) GetHintText() *string {
	if r == nil {
		return nil
	}
	return r.HintText
}

func (r *RelationAttributeInfoHelpers) GetHintTextKey() *string {
	if r == nil {
		return nil
	}
	return r.HintTextKey
}

func (r *RelationAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if r == nil {
		return nil
	}
	return r.HintTooltipPlacement
}

// RelationAttributeRelationAffinityMode - Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.
type RelationAttributeRelationAffinityMode string

const (
	RelationAttributeRelationAffinityModeWeak   RelationAttributeRelationAffinityMode = "weak"
	RelationAttributeRelationAffinityModeStrong RelationAttributeRelationAffinityMode = "strong"
)

func (e RelationAttributeRelationAffinityMode) ToPointer() *RelationAttributeRelationAffinityMode {
	return &e
}
func (e *RelationAttributeRelationAffinityMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weak":
		fallthrough
	case "strong":
		*e = RelationAttributeRelationAffinityMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAttributeRelationAffinityMode: %v", v)
	}
}

// RelationAttributeRelationPickerFilter - Additional entity search filter for relation picker
type RelationAttributeRelationPickerFilter struct {
	Q string `json:"q"`
}

func (r RelationAttributeRelationPickerFilter) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RelationAttributeRelationPickerFilter) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"q"}); err != nil {
		return err
	}
	return nil
}

func (r *RelationAttributeRelationPickerFilter) GetQ() string {
	if r == nil {
		return ""
	}
	return r.Q
}

type RelationAttributeRelationType string

const (
	RelationAttributeRelationTypeHasMany RelationAttributeRelationType = "has_many"
	RelationAttributeRelationTypeHasOne  RelationAttributeRelationType = "has_one"
)

func (e RelationAttributeRelationType) ToPointer() *RelationAttributeRelationType {
	return &e
}
func (e *RelationAttributeRelationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "has_many":
		fallthrough
	case "has_one":
		*e = RelationAttributeRelationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAttributeRelationType: %v", v)
	}
}

type RelationAttributeSummaryFieldsType string

const (
	RelationAttributeSummaryFieldsTypeStr          RelationAttributeSummaryFieldsType = "str"
	RelationAttributeSummaryFieldsTypeSummaryField RelationAttributeSummaryFieldsType = "SummaryField"
)

type RelationAttributeSummaryFields struct {
	Str          *string       `queryParam:"inline" name:"summary_fields"`
	SummaryField *SummaryField `queryParam:"inline" name:"summary_fields"`

	Type RelationAttributeSummaryFieldsType
}

func CreateRelationAttributeSummaryFieldsStr(str string) RelationAttributeSummaryFields {
	typ := RelationAttributeSummaryFieldsTypeStr

	return RelationAttributeSummaryFields{
		Str:  &str,
		Type: typ,
	}
}

func CreateRelationAttributeSummaryFieldsSummaryField(summaryField SummaryField) RelationAttributeSummaryFields {
	typ := RelationAttributeSummaryFieldsTypeSummaryField

	return RelationAttributeSummaryFields{
		SummaryField: &summaryField,
		Type:         typ,
	}
}

func (u *RelationAttributeSummaryFields) UnmarshalJSON(data []byte) error {

	var summaryField SummaryField = SummaryField{}
	if err := utils.UnmarshalJSON(data, &summaryField, "", true, nil); err == nil {
		u.SummaryField = &summaryField
		u.Type = RelationAttributeSummaryFieldsTypeSummaryField
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = RelationAttributeSummaryFieldsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RelationAttributeSummaryFields", string(data))
}

func (u RelationAttributeSummaryFields) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.SummaryField != nil {
		return utils.MarshalJSON(u.SummaryField, "", true)
	}

	return nil, errors.New("could not marshal union type RelationAttributeSummaryFields: all fields are null")
}

type RelationAttributeType string

const (
	RelationAttributeTypeRelation RelationAttributeType = "relation"
)

func (e RelationAttributeType) ToPointer() *RelationAttributeType {
	return &e
}
func (e *RelationAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relation":
		*e = RelationAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationAttributeType: %v", v)
	}
}

// RelationAttribute - Entity Relationship
type RelationAttribute struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string                   `json:"_manifest,omitempty"`
	Purpose  []string                   `json:"_purpose,omitempty"`
	Actions  []RelationAttributeActions `json:"actions,omitempty"`
	// Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is.
	AddButtonLabel *string  `json:"add_button_label,omitempty"`
	AllowedSchemas []string `json:"allowedSchemas,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *RelationAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                           `json:"default_value,omitempty"`
	Deprecated   *bool                         `default:"false" json:"deprecated"`
	// Enables the preview, edition, and creation of relation items on a Master-Details view mode.
	DetailsViewModeEnabled *bool                        `default:"false" json:"details_view_mode_enabled"`
	DrawerSize             *RelationAttributeDrawerSize `json:"drawer_size,omitempty"`
	EditMode               *RelationAttributeEditMode   `json:"edit_mode,omitempty"`
	// When enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link.
	EnableRelationPicker *bool `default:"true" json:"enable_relation_picker"`
	// When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item.
	EnableRelationTags *bool `default:"true" json:"enable_relation_tags"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool   `json:"hide_label,omitempty"`
	Icon      *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *RelationAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                        `json:"label"`
	Layout      *string                       `json:"layout,omitempty"`
	Name        string                        `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.
	RelationAffinityMode *RelationAttributeRelationAffinityMode `json:"relation_affinity_mode,omitempty"`
	// Additional entity search filter for relation picker
	RelationPickerFilter *RelationAttributeRelationPickerFilter `json:"relation_picker_filter,omitempty"`
	RelationType         *RelationAttributeRelationType         `json:"relation_type,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// Relations are always repeatables
	Repeatable *bool `default:"true" json:"repeatable"`
	Required   *bool `default:"false" json:"required"`
	// Map of schema slug to target relation attribute
	ReverseAttributes map[string]string `json:"reverse_attributes,omitempty"`
	// Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is.
	SearchPlaceholder *string `json:"search_placeholder,omitempty"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                            `default:"true" json:"sortable"`
	SummaryFields  []RelationAttributeSummaryFields `json:"summary_fields,omitempty"`
	Type           RelationAttributeType            `json:"type"`
	ValueFormatter *string                          `json:"value_formatter,omitempty"`
}

func (r RelationAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RelationAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (r *RelationAttribute) GetManifest() []string {
	if r == nil {
		return nil
	}
	return r.Manifest
}

func (r *RelationAttribute) GetPurpose() []string {
	if r == nil {
		return nil
	}
	return r.Purpose
}

func (r *RelationAttribute) GetActions() []RelationAttributeActions {
	if r == nil {
		return nil
	}
	return r.Actions
}

func (r *RelationAttribute) GetAddButtonLabel() *string {
	if r == nil {
		return nil
	}
	return r.AddButtonLabel
}

func (r *RelationAttribute) GetAllowedSchemas() []string {
	if r == nil {
		return nil
	}
	return r.AllowedSchemas
}

func (r *RelationAttribute) GetConstraints() *RelationAttributeConstraints {
	if r == nil {
		return nil
	}
	return r.Constraints
}

func (r *RelationAttribute) GetDefaultValue() any {
	if r == nil {
		return nil
	}
	return r.DefaultValue
}

func (r *RelationAttribute) GetDeprecated() *bool {
	if r == nil {
		return nil
	}
	return r.Deprecated
}

func (r *RelationAttribute) GetDetailsViewModeEnabled() *bool {
	if r == nil {
		return nil
	}
	return r.DetailsViewModeEnabled
}

func (r *RelationAttribute) GetDrawerSize() *RelationAttributeDrawerSize {
	if r == nil {
		return nil
	}
	return r.DrawerSize
}

func (r *RelationAttribute) GetEditMode() *RelationAttributeEditMode {
	if r == nil {
		return nil
	}
	return r.EditMode
}

func (r *RelationAttribute) GetEnableRelationPicker() *bool {
	if r == nil {
		return nil
	}
	return r.EnableRelationPicker
}

func (r *RelationAttribute) GetEnableRelationTags() *bool {
	if r == nil {
		return nil
	}
	return r.EnableRelationTags
}

func (r *RelationAttribute) GetEntityBuilderDisableEdit() *bool {
	if r == nil {
		return nil
	}
	return r.EntityBuilderDisableEdit
}

func (r *RelationAttribute) GetFeatureFlag() *string {
	if r == nil {
		return nil
	}
	return r.FeatureFlag
}

func (r *RelationAttribute) GetGroup() *string {
	if r == nil {
		return nil
	}
	return r.Group
}

func (r *RelationAttribute) GetHasPrimary() *bool {
	if r == nil {
		return nil
	}
	return r.HasPrimary
}

func (r *RelationAttribute) GetHidden() *bool {
	if r == nil {
		return nil
	}
	return r.Hidden
}

func (r *RelationAttribute) GetHideLabel() *bool {
	if r == nil {
		return nil
	}
	return r.HideLabel
}

func (r *RelationAttribute) GetIcon() *string {
	if r == nil {
		return nil
	}
	return r.Icon
}

func (r *RelationAttribute) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *RelationAttribute) GetInfoHelpers() *RelationAttributeInfoHelpers {
	if r == nil {
		return nil
	}
	return r.InfoHelpers
}

func (r *RelationAttribute) GetLabel() string {
	if r == nil {
		return ""
	}
	return r.Label
}

func (r *RelationAttribute) GetLayout() *string {
	if r == nil {
		return nil
	}
	return r.Layout
}

func (r *RelationAttribute) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *RelationAttribute) GetOrder() *int64 {
	if r == nil {
		return nil
	}
	return r.Order
}

func (r *RelationAttribute) GetPlaceholder() *string {
	if r == nil {
		return nil
	}
	return r.Placeholder
}

func (r *RelationAttribute) GetPreviewValueFormatter() *string {
	if r == nil {
		return nil
	}
	return r.PreviewValueFormatter
}

func (r *RelationAttribute) GetProtected() *bool {
	if r == nil {
		return nil
	}
	return r.Protected
}

func (r *RelationAttribute) GetReadonly() *bool {
	if r == nil {
		return nil
	}
	return r.Readonly
}

func (r *RelationAttribute) GetRelationAffinityMode() *RelationAttributeRelationAffinityMode {
	if r == nil {
		return nil
	}
	return r.RelationAffinityMode
}

func (r *RelationAttribute) GetRelationPickerFilter() *RelationAttributeRelationPickerFilter {
	if r == nil {
		return nil
	}
	return r.RelationPickerFilter
}

func (r *RelationAttribute) GetRelationType() *RelationAttributeRelationType {
	if r == nil {
		return nil
	}
	return r.RelationType
}

func (r *RelationAttribute) GetRenderCondition() *string {
	if r == nil {
		return nil
	}
	return r.RenderCondition
}

func (r *RelationAttribute) GetRepeatable() *bool {
	if r == nil {
		return nil
	}
	return r.Repeatable
}

func (r *RelationAttribute) GetRequired() *bool {
	if r == nil {
		return nil
	}
	return r.Required
}

func (r *RelationAttribute) GetReverseAttributes() map[string]string {
	if r == nil {
		return nil
	}
	return r.ReverseAttributes
}

func (r *RelationAttribute) GetSearchPlaceholder() *string {
	if r == nil {
		return nil
	}
	return r.SearchPlaceholder
}

func (r *RelationAttribute) GetSettingsFlag() []SettingFlag {
	if r == nil {
		return nil
	}
	return r.SettingsFlag
}

func (r *RelationAttribute) GetShowInTable() *bool {
	if r == nil {
		return nil
	}
	return r.ShowInTable
}

func (r *RelationAttribute) GetSortable() *bool {
	if r == nil {
		return nil
	}
	return r.Sortable
}

func (r *RelationAttribute) GetSummaryFields() []RelationAttributeSummaryFields {
	if r == nil {
		return nil
	}
	return r.SummaryFields
}

func (r *RelationAttribute) GetType() RelationAttributeType {
	if r == nil {
		return RelationAttributeType("")
	}
	return r.Type
}

func (r *RelationAttribute) GetValueFormatter() *string {
	if r == nil {
		return nil
	}
	return r.ValueFormatter
}
