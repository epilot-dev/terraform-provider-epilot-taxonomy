// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
	"time"
)

// RelationEntityACL - Access control list (ACL) for an entity. Defines sharing access to external orgs or users.
type RelationEntityACL struct {
	AdditionalProperties any      `additionalProperties:"true" json:"-"`
	Delete               []string `json:"delete,omitempty"`
	Edit                 []string `json:"edit,omitempty"`
	View                 []string `json:"view,omitempty"`
}

func (r RelationEntityACL) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RelationEntityACL) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (r *RelationEntityACL) GetAdditionalProperties() any {
	if r == nil {
		return nil
	}
	return r.AdditionalProperties
}

func (r *RelationEntityACL) GetDelete() []string {
	if r == nil {
		return nil
	}
	return r.Delete
}

func (r *RelationEntityACL) GetEdit() []string {
	if r == nil {
		return nil
	}
	return r.Edit
}

func (r *RelationEntityACL) GetView() []string {
	if r == nil {
		return nil
	}
	return r.View
}

type RelationEntity struct {
	DollarRelation       *RelationItem      `json:"$relation,omitempty"`
	AdditionalProperties any                `additionalProperties:"true" json:"-"`
	ACL                  *RelationEntityACL `json:"_acl,omitempty"`
	CreatedAt            *time.Time         `json:"_created_at"`
	DeletedAt            *time.Time         `json:"_deleted_at,omitempty"`
	ID                   string             `json:"_id"`
	// Manifest ID used to create/update the entity
	Manifest []string `json:"_manifest,omitempty"`
	// Organization Id the entity belongs to
	Org     string        `json:"_org"`
	Owners  []EntityOwner `json:"_owners,omitempty"`
	Purpose []string      `json:"_purpose,omitempty"`
	// URL-friendly identifier for the entity schema
	Schema string   `json:"_schema"`
	Tags   []string `json:"_tags,omitempty"`
	// Title of entity
	Title     *string    `json:"_title"`
	UpdatedAt *time.Time `json:"_updated_at"`
}

func (r RelationEntity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RelationEntity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"_created_at", "_id", "_org", "_schema", "_title", "_updated_at"}); err != nil {
		return err
	}
	return nil
}

func (r *RelationEntity) GetDollarRelation() *RelationItem {
	if r == nil {
		return nil
	}
	return r.DollarRelation
}

func (r *RelationEntity) GetAdditionalProperties() any {
	if r == nil {
		return nil
	}
	return r.AdditionalProperties
}

func (r *RelationEntity) GetACL() *RelationEntityACL {
	if r == nil {
		return nil
	}
	return r.ACL
}

func (r *RelationEntity) GetCreatedAt() *time.Time {
	if r == nil {
		return nil
	}
	return r.CreatedAt
}

func (r *RelationEntity) GetDeletedAt() *time.Time {
	if r == nil {
		return nil
	}
	return r.DeletedAt
}

func (r *RelationEntity) GetID() string {
	if r == nil {
		return ""
	}
	return r.ID
}

func (r *RelationEntity) GetManifest() []string {
	if r == nil {
		return nil
	}
	return r.Manifest
}

func (r *RelationEntity) GetOrg() string {
	if r == nil {
		return ""
	}
	return r.Org
}

func (r *RelationEntity) GetOwners() []EntityOwner {
	if r == nil {
		return nil
	}
	return r.Owners
}

func (r *RelationEntity) GetPurpose() []string {
	if r == nil {
		return nil
	}
	return r.Purpose
}

func (r *RelationEntity) GetSchema() string {
	if r == nil {
		return ""
	}
	return r.Schema
}

func (r *RelationEntity) GetTags() []string {
	if r == nil {
		return nil
	}
	return r.Tags
}

func (r *RelationEntity) GetTitle() *string {
	if r == nil {
		return nil
	}
	return r.Title
}

func (r *RelationEntity) GetUpdatedAt() *time.Time {
	if r == nil {
		return nil
	}
	return r.UpdatedAt
}
