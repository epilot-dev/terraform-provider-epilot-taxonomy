// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

type BulkActionsType string

const (
	BulkActionsTypeStr          BulkActionsType = "str"
	BulkActionsTypeEntityAction BulkActionsType = "EntityAction"
)

type BulkActions struct {
	Str          *string       `queryParam:"inline" name:"bulk_actions"`
	EntityAction *EntityAction `queryParam:"inline" name:"bulk_actions"`

	Type BulkActionsType
}

func CreateBulkActionsStr(str string) BulkActions {
	typ := BulkActionsTypeStr

	return BulkActions{
		Str:  &str,
		Type: typ,
	}
}

func CreateBulkActionsEntityAction(entityAction EntityAction) BulkActions {
	typ := BulkActionsTypeEntityAction

	return BulkActions{
		EntityAction: &entityAction,
		Type:         typ,
	}
}

func (u *BulkActions) UnmarshalJSON(data []byte) error {

	var entityAction EntityAction = EntityAction{}
	if err := utils.UnmarshalJSON(data, &entityAction, "", true, nil); err == nil {
		u.EntityAction = &entityAction
		u.Type = BulkActionsTypeEntityAction
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = BulkActionsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BulkActions", string(data))
}

func (u BulkActions) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.EntityAction != nil {
		return utils.MarshalJSON(u.EntityAction, "", true)
	}

	return nil, errors.New("could not marshal union type BulkActions: all fields are null")
}

type EntityDefaultTableParams struct {
}

func (e EntityDefaultTableParams) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityDefaultTableParams) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, nil); err != nil {
		return err
	}
	return nil
}

type EntityDefaultTableOptions struct {
	Label  string                    `json:"label"`
	Params *EntityDefaultTableParams `json:"params,omitempty"`
}

func (e EntityDefaultTableOptions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityDefaultTableOptions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"label"}); err != nil {
		return err
	}
	return nil
}

func (o *EntityDefaultTableOptions) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *EntityDefaultTableOptions) GetParams() *EntityDefaultTableParams {
	if o == nil {
		return nil
	}
	return o.Params
}

type NavbarActions struct {
	Options []EntityDefaultTableOptions `json:"options,omitempty"`
	Type    string                      `json:"type"`
}

func (n NavbarActions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NavbarActions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *NavbarActions) GetOptions() []EntityDefaultTableOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *NavbarActions) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type RowActionsType string

const (
	RowActionsTypeStr          RowActionsType = "str"
	RowActionsTypeEntityAction RowActionsType = "EntityAction"
)

type RowActions struct {
	Str          *string       `queryParam:"inline" name:"row_actions"`
	EntityAction *EntityAction `queryParam:"inline" name:"row_actions"`

	Type RowActionsType
}

func CreateRowActionsStr(str string) RowActions {
	typ := RowActionsTypeStr

	return RowActions{
		Str:  &str,
		Type: typ,
	}
}

func CreateRowActionsEntityAction(entityAction EntityAction) RowActions {
	typ := RowActionsTypeEntityAction

	return RowActions{
		EntityAction: &entityAction,
		Type:         typ,
	}
}

func (u *RowActions) UnmarshalJSON(data []byte) error {

	var entityAction EntityAction = EntityAction{}
	if err := utils.UnmarshalJSON(data, &entityAction, "", true, nil); err == nil {
		u.EntityAction = &entityAction
		u.Type = RowActionsTypeEntityAction
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = RowActionsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RowActions", string(data))
}

func (u RowActions) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.EntityAction != nil {
		return utils.MarshalJSON(u.EntityAction, "", true)
	}

	return nil, errors.New("could not marshal union type RowActions: all fields are null")
}

type EntityDefaultTableViewType string

const (
	EntityDefaultTableViewTypeDefault EntityDefaultTableViewType = "default"
)

func (e EntityDefaultTableViewType) ToPointer() *EntityDefaultTableViewType {
	return &e
}
func (e *EntityDefaultTableViewType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default":
		*e = EntityDefaultTableViewType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityDefaultTableViewType: %v", v)
	}
}

type EntityDefaultTable struct {
	BulkActions []BulkActions `json:"bulk_actions,omitempty"`
	// Enable the thumbnail column
	EnableThumbnails *bool                       `default:"false" json:"enable_thumbnails"`
	NavbarActions    []NavbarActions             `json:"navbar_actions,omitempty"`
	RowActions       []RowActions                `json:"row_actions,omitempty"`
	ViewType         *EntityDefaultTableViewType `json:"view_type,omitempty"`
}

func (e EntityDefaultTable) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityDefaultTable) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *EntityDefaultTable) GetBulkActions() []BulkActions {
	if o == nil {
		return nil
	}
	return o.BulkActions
}

func (o *EntityDefaultTable) GetEnableThumbnails() *bool {
	if o == nil {
		return nil
	}
	return o.EnableThumbnails
}

func (o *EntityDefaultTable) GetNavbarActions() []NavbarActions {
	if o == nil {
		return nil
	}
	return o.NavbarActions
}

func (o *EntityDefaultTable) GetRowActions() []RowActions {
	if o == nil {
		return nil
	}
	return o.RowActions
}

func (o *EntityDefaultTable) GetViewType() *EntityDefaultTableViewType {
	if o == nil {
		return nil
	}
	return o.ViewType
}
