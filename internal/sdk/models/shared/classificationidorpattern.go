// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

type ClassificationIDOrPattern2 struct {
	// Wildcard pattern to match classification IDs starting with the prefix before ':*'
	Pattern string `json:"pattern"`
}

func (c ClassificationIDOrPattern2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ClassificationIDOrPattern2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"pattern"}); err != nil {
		return err
	}
	return nil
}

func (c *ClassificationIDOrPattern2) GetPattern() string {
	if c == nil {
		return ""
	}
	return c.Pattern
}

type ClassificationIDOrPatternType string

const (
	ClassificationIDOrPatternTypeStr                        ClassificationIDOrPatternType = "str"
	ClassificationIDOrPatternTypeClassificationIDOrPattern2 ClassificationIDOrPatternType = "ClassificationIdOrPattern_2"
)

type ClassificationIDOrPattern struct {
	Str                        *string                     `queryParam:"inline,name=ClassificationIdOrPattern"`
	ClassificationIDOrPattern2 *ClassificationIDOrPattern2 `queryParam:"inline,name=ClassificationIdOrPattern"`

	Type ClassificationIDOrPatternType
}

func CreateClassificationIDOrPatternStr(str string) ClassificationIDOrPattern {
	typ := ClassificationIDOrPatternTypeStr

	return ClassificationIDOrPattern{
		Str:  &str,
		Type: typ,
	}
}

func CreateClassificationIDOrPatternClassificationIDOrPattern2(classificationIDOrPattern2 ClassificationIDOrPattern2) ClassificationIDOrPattern {
	typ := ClassificationIDOrPatternTypeClassificationIDOrPattern2

	return ClassificationIDOrPattern{
		ClassificationIDOrPattern2: &classificationIDOrPattern2,
		Type:                       typ,
	}
}

func (u *ClassificationIDOrPattern) UnmarshalJSON(data []byte) error {

	var classificationIDOrPattern2 ClassificationIDOrPattern2 = ClassificationIDOrPattern2{}
	if err := utils.UnmarshalJSON(data, &classificationIDOrPattern2, "", true, nil); err == nil {
		u.ClassificationIDOrPattern2 = &classificationIDOrPattern2
		u.Type = ClassificationIDOrPatternTypeClassificationIDOrPattern2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = ClassificationIDOrPatternTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ClassificationIDOrPattern", string(data))
}

func (u ClassificationIDOrPattern) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ClassificationIDOrPattern2 != nil {
		return utils.MarshalJSON(u.ClassificationIDOrPattern2, "", true)
	}

	return nil, errors.New("could not marshal union type ClassificationIDOrPattern: all fields are null")
}
