// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
	"time"
)

type EnabledLocationsType string

const (
	EnabledLocationsTypeTaxonomyLocationID EnabledLocationsType = "TaxonomyLocationId"
	EnabledLocationsTypeStr                EnabledLocationsType = "str"
)

type EnabledLocations struct {
	TaxonomyLocationID *TaxonomyLocationID `queryParam:"inline" name:"enabled_locations"`
	Str                *string             `queryParam:"inline" name:"enabled_locations"`

	Type EnabledLocationsType
}

func CreateEnabledLocationsTaxonomyLocationID(taxonomyLocationID TaxonomyLocationID) EnabledLocations {
	typ := EnabledLocationsTypeTaxonomyLocationID

	return EnabledLocations{
		TaxonomyLocationID: &taxonomyLocationID,
		Type:               typ,
	}
}

func CreateEnabledLocationsStr(str string) EnabledLocations {
	typ := EnabledLocationsTypeStr

	return EnabledLocations{
		Str:  &str,
		Type: typ,
	}
}

func (u *EnabledLocations) UnmarshalJSON(data []byte) error {

	var taxonomyLocationID TaxonomyLocationID = TaxonomyLocationID("")
	if err := utils.UnmarshalJSON(data, &taxonomyLocationID, "", true, nil); err == nil {
		u.TaxonomyLocationID = &taxonomyLocationID
		u.Type = EnabledLocationsTypeTaxonomyLocationID
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = EnabledLocationsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EnabledLocations", string(data))
}

func (u EnabledLocations) MarshalJSON() ([]byte, error) {
	if u.TaxonomyLocationID != nil {
		return utils.MarshalJSON(u.TaxonomyLocationID, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type EnabledLocations: all fields are null")
}

// Kind of taxonomy e.g. system or user_defined. By default, it's empty, which means 'user_defined'
type Kind string

const (
	KindSystem      Kind = "system"
	KindUserDefined Kind = "user_defined"
)

func (e Kind) ToPointer() *Kind {
	return &e
}
func (e *Kind) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "user_defined":
		*e = Kind(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kind: %v", v)
	}
}

// TaxonomyType - Type of taxonomy. Whether it classifies entities or relations.
type TaxonomyType string

const (
	TaxonomyTypeEntity   TaxonomyType = "entity"
	TaxonomyTypeRelation TaxonomyType = "relation"
)

func (e TaxonomyType) ToPointer() *TaxonomyType {
	return &e
}
func (e *TaxonomyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "entity":
		fallthrough
	case "relation":
		*e = TaxonomyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxonomyType: %v", v)
	}
}

type Taxonomy struct {
	// HEX Color code for the taxonomy
	Color     *string    `json:"color,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// User ID of the creator
	CreatedBy *string `json:"created_by,omitempty"`
	// Date when the taxonomy was soft-deleted (enabled: false)
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Whether the taxonomy is enabled or not
	Enabled *bool `json:"enabled,omitempty"`
	// List of locations where the taxonomy is enabled to be used. If empty, it's enabled for all locations.
	EnabledLocations []EnabledLocations `json:"enabled_locations,omitempty"`
	// Icon name for the taxonomy (from epilot360/icons icon set)
	Icon *string `json:"icon,omitempty"`
	// Kind of taxonomy e.g. system or user_defined. By default, it's empty, which means 'user_defined'
	Kind *Kind `json:"kind,omitempty"`
	// A human friendly name of a Taxonomy e.g. Purpose, Product Category, Folder, Tag
	Name *string `json:"name,omitempty"`
	// Position of the taxonomy
	Order *float64 `json:"order,omitempty"`
	// Plural name of a Taxonomy e.g. Purposes, Product Categories, Folders, Tags. Defaults to name is not provided.
	Plural *string `json:"plural,omitempty"`
	// URL-friendly name for taxonomy
	Slug *string `json:"slug,omitempty"`
	// Type of taxonomy. Whether it classifies entities or relations.
	Type      *TaxonomyType `default:"entity" json:"type"`
	UpdatedAt *time.Time    `json:"updated_at,omitempty"`
}

func (t Taxonomy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Taxonomy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *Taxonomy) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *Taxonomy) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Taxonomy) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Taxonomy) GetDeletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Taxonomy) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *Taxonomy) GetEnabledLocations() []EnabledLocations {
	if o == nil {
		return nil
	}
	return o.EnabledLocations
}

func (o *Taxonomy) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *Taxonomy) GetKind() *Kind {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *Taxonomy) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Taxonomy) GetOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *Taxonomy) GetPlural() *string {
	if o == nil {
		return nil
	}
	return o.Plural
}

func (o *Taxonomy) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *Taxonomy) GetType() *TaxonomyType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Taxonomy) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type TaxonomyInput struct {
	// HEX Color code for the taxonomy
	Color *string `json:"color,omitempty"`
	// Whether the taxonomy is enabled or not
	Enabled *bool `json:"enabled,omitempty"`
	// List of locations where the taxonomy is enabled to be used. If empty, it's enabled for all locations.
	EnabledLocations []EnabledLocations `json:"enabled_locations,omitempty"`
	// Icon name for the taxonomy (from epilot360/icons icon set)
	Icon *string `json:"icon,omitempty"`
	// A human friendly name of a Taxonomy e.g. Purpose, Product Category, Folder, Tag
	Name *string `json:"name,omitempty"`
	// Position of the taxonomy
	Order *float64 `json:"order,omitempty"`
	// Plural name of a Taxonomy e.g. Purposes, Product Categories, Folders, Tags. Defaults to name is not provided.
	Plural *string `json:"plural,omitempty"`
	// URL-friendly name for taxonomy
	Slug *string `json:"slug,omitempty"`
	// Type of taxonomy. Whether it classifies entities or relations.
	Type *TaxonomyType `default:"entity" json:"type"`
}

func (t TaxonomyInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaxonomyInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *TaxonomyInput) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *TaxonomyInput) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *TaxonomyInput) GetEnabledLocations() []EnabledLocations {
	if o == nil {
		return nil
	}
	return o.EnabledLocations
}

func (o *TaxonomyInput) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *TaxonomyInput) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TaxonomyInput) GetOrder() *float64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *TaxonomyInput) GetPlural() *string {
	if o == nil {
		return nil
	}
	return o.Plural
}

func (o *TaxonomyInput) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *TaxonomyInput) GetType() *TaxonomyType {
	if o == nil {
		return nil
	}
	return o.Type
}
