// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

// BooleanAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type BooleanAttributeConstraints struct {
}

func (b BooleanAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BooleanAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, nil); err != nil {
		return err
	}
	return nil
}

type BooleanAttributeDisplayType string

const (
	BooleanAttributeDisplayTypeSwitch   BooleanAttributeDisplayType = "switch"
	BooleanAttributeDisplayTypeCheckbox BooleanAttributeDisplayType = "checkbox"
)

func (e BooleanAttributeDisplayType) ToPointer() *BooleanAttributeDisplayType {
	return &e
}
func (e *BooleanAttributeDisplayType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "switch":
		fallthrough
	case "checkbox":
		*e = BooleanAttributeDisplayType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BooleanAttributeDisplayType: %v", v)
	}
}

// BooleanAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type BooleanAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (b BooleanAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BooleanAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (b *BooleanAttributeInfoHelpers) GetHintCustomComponent() *string {
	if b == nil {
		return nil
	}
	return b.HintCustomComponent
}

func (b *BooleanAttributeInfoHelpers) GetHintText() *string {
	if b == nil {
		return nil
	}
	return b.HintText
}

func (b *BooleanAttributeInfoHelpers) GetHintTextKey() *string {
	if b == nil {
		return nil
	}
	return b.HintTextKey
}

func (b *BooleanAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if b == nil {
		return nil
	}
	return b.HintTooltipPlacement
}

type BooleanAttributeType string

const (
	BooleanAttributeTypeBoolean BooleanAttributeType = "boolean"
)

func (e BooleanAttributeType) ToPointer() *BooleanAttributeType {
	return &e
}
func (e *BooleanAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		*e = BooleanAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BooleanAttributeType: %v", v)
	}
}

// BooleanAttribute - Yes / No Toggle
type BooleanAttribute struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *BooleanAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                          `json:"default_value,omitempty"`
	Deprecated   *bool                        `default:"false" json:"deprecated"`
	DisplayType  *BooleanAttributeDisplayType `default:"switch" json:"display_type"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *BooleanAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                       `json:"label"`
	Layout      *string                      `json:"layout,omitempty"`
	Name        string                       `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool                `default:"true" json:"sortable"`
	Type           BooleanAttributeType `json:"type"`
	ValueFormatter *string              `json:"value_formatter,omitempty"`
}

func (b BooleanAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BooleanAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (b *BooleanAttribute) GetManifest() []string {
	if b == nil {
		return nil
	}
	return b.Manifest
}

func (b *BooleanAttribute) GetPurpose() []string {
	if b == nil {
		return nil
	}
	return b.Purpose
}

func (b *BooleanAttribute) GetConstraints() *BooleanAttributeConstraints {
	if b == nil {
		return nil
	}
	return b.Constraints
}

func (b *BooleanAttribute) GetDefaultValue() any {
	if b == nil {
		return nil
	}
	return b.DefaultValue
}

func (b *BooleanAttribute) GetDeprecated() *bool {
	if b == nil {
		return nil
	}
	return b.Deprecated
}

func (b *BooleanAttribute) GetDisplayType() *BooleanAttributeDisplayType {
	if b == nil {
		return nil
	}
	return b.DisplayType
}

func (b *BooleanAttribute) GetEntityBuilderDisableEdit() *bool {
	if b == nil {
		return nil
	}
	return b.EntityBuilderDisableEdit
}

func (b *BooleanAttribute) GetFeatureFlag() *string {
	if b == nil {
		return nil
	}
	return b.FeatureFlag
}

func (b *BooleanAttribute) GetGroup() *string {
	if b == nil {
		return nil
	}
	return b.Group
}

func (b *BooleanAttribute) GetHasPrimary() *bool {
	if b == nil {
		return nil
	}
	return b.HasPrimary
}

func (b *BooleanAttribute) GetHidden() *bool {
	if b == nil {
		return nil
	}
	return b.Hidden
}

func (b *BooleanAttribute) GetHideLabel() *bool {
	if b == nil {
		return nil
	}
	return b.HideLabel
}

func (b *BooleanAttribute) GetIcon() *string {
	if b == nil {
		return nil
	}
	return b.Icon
}

func (b *BooleanAttribute) GetID() *string {
	if b == nil {
		return nil
	}
	return b.ID
}

func (b *BooleanAttribute) GetInfoHelpers() *BooleanAttributeInfoHelpers {
	if b == nil {
		return nil
	}
	return b.InfoHelpers
}

func (b *BooleanAttribute) GetLabel() string {
	if b == nil {
		return ""
	}
	return b.Label
}

func (b *BooleanAttribute) GetLayout() *string {
	if b == nil {
		return nil
	}
	return b.Layout
}

func (b *BooleanAttribute) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *BooleanAttribute) GetOrder() *int64 {
	if b == nil {
		return nil
	}
	return b.Order
}

func (b *BooleanAttribute) GetPlaceholder() *string {
	if b == nil {
		return nil
	}
	return b.Placeholder
}

func (b *BooleanAttribute) GetPreviewValueFormatter() *string {
	if b == nil {
		return nil
	}
	return b.PreviewValueFormatter
}

func (b *BooleanAttribute) GetProtected() *bool {
	if b == nil {
		return nil
	}
	return b.Protected
}

func (b *BooleanAttribute) GetReadonly() *bool {
	if b == nil {
		return nil
	}
	return b.Readonly
}

func (b *BooleanAttribute) GetRenderCondition() *string {
	if b == nil {
		return nil
	}
	return b.RenderCondition
}

func (b *BooleanAttribute) GetRepeatable() *bool {
	if b == nil {
		return nil
	}
	return b.Repeatable
}

func (b *BooleanAttribute) GetRequired() *bool {
	if b == nil {
		return nil
	}
	return b.Required
}

func (b *BooleanAttribute) GetSettingsFlag() []SettingFlag {
	if b == nil {
		return nil
	}
	return b.SettingsFlag
}

func (b *BooleanAttribute) GetShowInTable() *bool {
	if b == nil {
		return nil
	}
	return b.ShowInTable
}

func (b *BooleanAttribute) GetSortable() *bool {
	if b == nil {
		return nil
	}
	return b.Sortable
}

func (b *BooleanAttribute) GetType() BooleanAttributeType {
	if b == nil {
		return BooleanAttributeType("")
	}
	return b.Type
}

func (b *BooleanAttribute) GetValueFormatter() *string {
	if b == nil {
		return nil
	}
	return b.ValueFormatter
}
