// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

type GroupHeadlineWithCompositeIDDivider string

const (
	GroupHeadlineWithCompositeIDDividerTopDivider    GroupHeadlineWithCompositeIDDivider = "top_divider"
	GroupHeadlineWithCompositeIDDividerBottomDivider GroupHeadlineWithCompositeIDDivider = "bottom_divider"
)

func (e GroupHeadlineWithCompositeIDDivider) ToPointer() *GroupHeadlineWithCompositeIDDivider {
	return &e
}
func (e *GroupHeadlineWithCompositeIDDivider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "top_divider":
		fallthrough
	case "bottom_divider":
		*e = GroupHeadlineWithCompositeIDDivider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupHeadlineWithCompositeIDDivider: %v", v)
	}
}

type GroupHeadlineWithCompositeIDType string

const (
	GroupHeadlineWithCompositeIDTypeHeadline GroupHeadlineWithCompositeIDType = "headline"
)

func (e GroupHeadlineWithCompositeIDType) ToPointer() *GroupHeadlineWithCompositeIDType {
	return &e
}
func (e *GroupHeadlineWithCompositeIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "headline":
		*e = GroupHeadlineWithCompositeIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupHeadlineWithCompositeIDType: %v", v)
	}
}

// GroupHeadlineWithCompositeID - a readonly computed ID for the entity group headline including schema slug and the headline ID
type GroupHeadlineWithCompositeID struct {
	// Manifest ID used to create/update the schema group headline
	Manifest      []string                             `json:"_manifest,omitempty"`
	Purpose       []string                             `json:"_purpose,omitempty"`
	CompositeID   *string                              `json:"composite_id,omitempty"`
	Divider       *GroupHeadlineWithCompositeIDDivider `json:"divider,omitempty"`
	EnableDivider *bool                                `default:"false" json:"enable_divider"`
	// The group of headline attribute
	Group  string  `json:"group"`
	ID     *string `json:"id,omitempty"`
	Label  string  `json:"label"`
	Layout *string `json:"layout,omitempty"`
	Name   string  `json:"name"`
	// The order of headline attribute
	Order *int64 `json:"order,omitempty"`
	// Schema slug the capability belongs to
	Schema *string                          `json:"schema,omitempty"`
	Type   GroupHeadlineWithCompositeIDType `json:"type"`
}

func (g GroupHeadlineWithCompositeID) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GroupHeadlineWithCompositeID) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"group", "label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (g *GroupHeadlineWithCompositeID) GetManifest() []string {
	if g == nil {
		return nil
	}
	return g.Manifest
}

func (g *GroupHeadlineWithCompositeID) GetPurpose() []string {
	if g == nil {
		return nil
	}
	return g.Purpose
}

func (g *GroupHeadlineWithCompositeID) GetCompositeID() *string {
	if g == nil {
		return nil
	}
	return g.CompositeID
}

func (g *GroupHeadlineWithCompositeID) GetDivider() *GroupHeadlineWithCompositeIDDivider {
	if g == nil {
		return nil
	}
	return g.Divider
}

func (g *GroupHeadlineWithCompositeID) GetEnableDivider() *bool {
	if g == nil {
		return nil
	}
	return g.EnableDivider
}

func (g *GroupHeadlineWithCompositeID) GetGroup() string {
	if g == nil {
		return ""
	}
	return g.Group
}

func (g *GroupHeadlineWithCompositeID) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GroupHeadlineWithCompositeID) GetLabel() string {
	if g == nil {
		return ""
	}
	return g.Label
}

func (g *GroupHeadlineWithCompositeID) GetLayout() *string {
	if g == nil {
		return nil
	}
	return g.Layout
}

func (g *GroupHeadlineWithCompositeID) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GroupHeadlineWithCompositeID) GetOrder() *int64 {
	if g == nil {
		return nil
	}
	return g.Order
}

func (g *GroupHeadlineWithCompositeID) GetSchema() *string {
	if g == nil {
		return nil
	}
	return g.Schema
}

func (g *GroupHeadlineWithCompositeID) GetType() GroupHeadlineWithCompositeIDType {
	if g == nil {
		return GroupHeadlineWithCompositeIDType("")
	}
	return g.Type
}

// GroupHeadlineWithCompositeIDInput - a readonly computed ID for the entity group headline including schema slug and the headline ID
type GroupHeadlineWithCompositeIDInput struct {
	// Manifest ID used to create/update the schema group headline
	Manifest      []string                             `json:"_manifest,omitempty"`
	Purpose       []string                             `json:"_purpose,omitempty"`
	Divider       *GroupHeadlineWithCompositeIDDivider `json:"divider,omitempty"`
	EnableDivider *bool                                `default:"false" json:"enable_divider"`
	// The group of headline attribute
	Group  string  `json:"group"`
	ID     *string `json:"id,omitempty"`
	Label  string  `json:"label"`
	Layout *string `json:"layout,omitempty"`
	Name   string  `json:"name"`
	// The order of headline attribute
	Order *int64 `json:"order,omitempty"`
	// Schema slug the capability belongs to
	Schema *string                          `json:"schema,omitempty"`
	Type   GroupHeadlineWithCompositeIDType `json:"type"`
}

func (g GroupHeadlineWithCompositeIDInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GroupHeadlineWithCompositeIDInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"group", "label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (g *GroupHeadlineWithCompositeIDInput) GetManifest() []string {
	if g == nil {
		return nil
	}
	return g.Manifest
}

func (g *GroupHeadlineWithCompositeIDInput) GetPurpose() []string {
	if g == nil {
		return nil
	}
	return g.Purpose
}

func (g *GroupHeadlineWithCompositeIDInput) GetDivider() *GroupHeadlineWithCompositeIDDivider {
	if g == nil {
		return nil
	}
	return g.Divider
}

func (g *GroupHeadlineWithCompositeIDInput) GetEnableDivider() *bool {
	if g == nil {
		return nil
	}
	return g.EnableDivider
}

func (g *GroupHeadlineWithCompositeIDInput) GetGroup() string {
	if g == nil {
		return ""
	}
	return g.Group
}

func (g *GroupHeadlineWithCompositeIDInput) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GroupHeadlineWithCompositeIDInput) GetLabel() string {
	if g == nil {
		return ""
	}
	return g.Label
}

func (g *GroupHeadlineWithCompositeIDInput) GetLayout() *string {
	if g == nil {
		return nil
	}
	return g.Layout
}

func (g *GroupHeadlineWithCompositeIDInput) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GroupHeadlineWithCompositeIDInput) GetOrder() *int64 {
	if g == nil {
		return nil
	}
	return g.Order
}

func (g *GroupHeadlineWithCompositeIDInput) GetSchema() *string {
	if g == nil {
		return nil
	}
	return g.Schema
}

func (g *GroupHeadlineWithCompositeIDInput) GetType() GroupHeadlineWithCompositeIDType {
	if g == nil {
		return GroupHeadlineWithCompositeIDType("")
	}
	return g.Type
}
