// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

// PhoneAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type PhoneAttributeConstraints struct {
}

func (p PhoneAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PhoneAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

// PhoneAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type PhoneAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (p PhoneAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PhoneAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *PhoneAttributeInfoHelpers) GetHintCustomComponent() *string {
	if p == nil {
		return nil
	}
	return p.HintCustomComponent
}

func (p *PhoneAttributeInfoHelpers) GetHintText() *string {
	if p == nil {
		return nil
	}
	return p.HintText
}

func (p *PhoneAttributeInfoHelpers) GetHintTextKey() *string {
	if p == nil {
		return nil
	}
	return p.HintTextKey
}

func (p *PhoneAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if p == nil {
		return nil
	}
	return p.HintTooltipPlacement
}

type PhoneAttributeType string

const (
	PhoneAttributeTypePhone PhoneAttributeType = "phone"
)

func (e PhoneAttributeType) ToPointer() *PhoneAttributeType {
	return &e
}
func (e *PhoneAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "phone":
		*e = PhoneAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PhoneAttributeType: %v", v)
	}
}

// PhoneAttribute - Phone number
type PhoneAttribute struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *PhoneAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                        `json:"default_value,omitempty"`
	Deprecated   *bool                      `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *PhoneAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                     `json:"label"`
	Layout      *string                    `json:"layout,omitempty"`
	Name        string                     `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool              `default:"true" json:"sortable"`
	Type           PhoneAttributeType `json:"type"`
	ValueFormatter *string            `json:"value_formatter,omitempty"`
}

func (p PhoneAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PhoneAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PhoneAttribute) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *PhoneAttribute) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *PhoneAttribute) GetConstraints() *PhoneAttributeConstraints {
	if p == nil {
		return nil
	}
	return p.Constraints
}

func (p *PhoneAttribute) GetDefaultValue() any {
	if p == nil {
		return nil
	}
	return p.DefaultValue
}

func (p *PhoneAttribute) GetDeprecated() *bool {
	if p == nil {
		return nil
	}
	return p.Deprecated
}

func (p *PhoneAttribute) GetEntityBuilderDisableEdit() *bool {
	if p == nil {
		return nil
	}
	return p.EntityBuilderDisableEdit
}

func (p *PhoneAttribute) GetFeatureFlag() *string {
	if p == nil {
		return nil
	}
	return p.FeatureFlag
}

func (p *PhoneAttribute) GetGroup() *string {
	if p == nil {
		return nil
	}
	return p.Group
}

func (p *PhoneAttribute) GetHasPrimary() *bool {
	if p == nil {
		return nil
	}
	return p.HasPrimary
}

func (p *PhoneAttribute) GetHidden() *bool {
	if p == nil {
		return nil
	}
	return p.Hidden
}

func (p *PhoneAttribute) GetHideLabel() *bool {
	if p == nil {
		return nil
	}
	return p.HideLabel
}

func (p *PhoneAttribute) GetIcon() *string {
	if p == nil {
		return nil
	}
	return p.Icon
}

func (p *PhoneAttribute) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PhoneAttribute) GetInfoHelpers() *PhoneAttributeInfoHelpers {
	if p == nil {
		return nil
	}
	return p.InfoHelpers
}

func (p *PhoneAttribute) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *PhoneAttribute) GetLayout() *string {
	if p == nil {
		return nil
	}
	return p.Layout
}

func (p *PhoneAttribute) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PhoneAttribute) GetOrder() *int64 {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PhoneAttribute) GetPlaceholder() *string {
	if p == nil {
		return nil
	}
	return p.Placeholder
}

func (p *PhoneAttribute) GetPreviewValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.PreviewValueFormatter
}

func (p *PhoneAttribute) GetProtected() *bool {
	if p == nil {
		return nil
	}
	return p.Protected
}

func (p *PhoneAttribute) GetReadonly() *bool {
	if p == nil {
		return nil
	}
	return p.Readonly
}

func (p *PhoneAttribute) GetRenderCondition() *string {
	if p == nil {
		return nil
	}
	return p.RenderCondition
}

func (p *PhoneAttribute) GetRepeatable() *bool {
	if p == nil {
		return nil
	}
	return p.Repeatable
}

func (p *PhoneAttribute) GetRequired() *bool {
	if p == nil {
		return nil
	}
	return p.Required
}

func (p *PhoneAttribute) GetSettingsFlag() []SettingFlag {
	if p == nil {
		return nil
	}
	return p.SettingsFlag
}

func (p *PhoneAttribute) GetShowInTable() *bool {
	if p == nil {
		return nil
	}
	return p.ShowInTable
}

func (p *PhoneAttribute) GetSortable() *bool {
	if p == nil {
		return nil
	}
	return p.Sortable
}

func (p *PhoneAttribute) GetType() PhoneAttributeType {
	if p == nil {
		return PhoneAttributeType("")
	}
	return p.Type
}

func (p *PhoneAttribute) GetValueFormatter() *string {
	if p == nil {
		return nil
	}
	return p.ValueFormatter
}
