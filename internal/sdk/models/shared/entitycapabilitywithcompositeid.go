// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

type EntityCapabilityWithCompositeIDUIConfig struct {
	// Whether the capability is filterable
	IsFilterable *bool `default:"false" json:"is_filterable"`
}

func (e EntityCapabilityWithCompositeIDUIConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityCapabilityWithCompositeIDUIConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (e *EntityCapabilityWithCompositeIDUIConfig) GetIsFilterable() *bool {
	if e == nil {
		return nil
	}
	return e.IsFilterable
}

// EntityCapabilityWithCompositeIDRequiredPermission - Require a permission to display UI hook
type EntityCapabilityWithCompositeIDRequiredPermission struct {
	Action   string  `json:"action"`
	Resource *string `json:"resource,omitempty"`
}

func (e *EntityCapabilityWithCompositeIDRequiredPermission) GetAction() string {
	if e == nil {
		return ""
	}
	return e.Action
}

func (e *EntityCapabilityWithCompositeIDRequiredPermission) GetResource() *string {
	if e == nil {
		return nil
	}
	return e.Resource
}

type EntityCapabilityWithCompositeIDUIHooks struct {
	AdditionalProperties any `additionalProperties:"true" json:"-"`
	// the component to be dynamically loaded
	Component *string `json:"component,omitempty"`
	// Whether capability should be disabled
	Disabled *bool `json:"disabled,omitempty"`
	// Sets the group expand/collapse default state
	GroupExpanded *bool `json:"group_expanded,omitempty"`
	// Specific to Activity pilot
	Header *bool `json:"header,omitempty"`
	// name of the hook to use
	Hook string `json:"hook"`
	// Preview icon name(As in Base elements) for the capability
	Icon *string `json:"icon,omitempty"`
	// package to be imported
	Import *string `json:"import,omitempty"`
	// render order (ascending)
	Order           *int64  `json:"order,omitempty"`
	RenderCondition *string `json:"render_condition,omitempty"`
	// Require a permission to display UI hook
	RequiredPermission *EntityCapabilityWithCompositeIDRequiredPermission `json:"requiredPermission,omitempty"`
	// route for specified capability
	Route *string `json:"route,omitempty"`
	Title *string `json:"title,omitempty"`
}

func (e EntityCapabilityWithCompositeIDUIHooks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityCapabilityWithCompositeIDUIHooks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"hook"}); err != nil {
		return err
	}
	return nil
}

func (e *EntityCapabilityWithCompositeIDUIHooks) GetAdditionalProperties() any {
	if e == nil {
		return nil
	}
	return e.AdditionalProperties
}

func (e *EntityCapabilityWithCompositeIDUIHooks) GetComponent() *string {
	if e == nil {
		return nil
	}
	return e.Component
}

func (e *EntityCapabilityWithCompositeIDUIHooks) GetDisabled() *bool {
	if e == nil {
		return nil
	}
	return e.Disabled
}

func (e *EntityCapabilityWithCompositeIDUIHooks) GetGroupExpanded() *bool {
	if e == nil {
		return nil
	}
	return e.GroupExpanded
}

func (e *EntityCapabilityWithCompositeIDUIHooks) GetHeader() *bool {
	if e == nil {
		return nil
	}
	return e.Header
}

func (e *EntityCapabilityWithCompositeIDUIHooks) GetHook() string {
	if e == nil {
		return ""
	}
	return e.Hook
}

func (e *EntityCapabilityWithCompositeIDUIHooks) GetIcon() *string {
	if e == nil {
		return nil
	}
	return e.Icon
}

func (e *EntityCapabilityWithCompositeIDUIHooks) GetImport() *string {
	if e == nil {
		return nil
	}
	return e.Import
}

func (e *EntityCapabilityWithCompositeIDUIHooks) GetOrder() *int64 {
	if e == nil {
		return nil
	}
	return e.Order
}

func (e *EntityCapabilityWithCompositeIDUIHooks) GetRenderCondition() *string {
	if e == nil {
		return nil
	}
	return e.RenderCondition
}

func (e *EntityCapabilityWithCompositeIDUIHooks) GetRequiredPermission() *EntityCapabilityWithCompositeIDRequiredPermission {
	if e == nil {
		return nil
	}
	return e.RequiredPermission
}

func (e *EntityCapabilityWithCompositeIDUIHooks) GetRoute() *string {
	if e == nil {
		return nil
	}
	return e.Route
}

func (e *EntityCapabilityWithCompositeIDUIHooks) GetTitle() *string {
	if e == nil {
		return nil
	}
	return e.Title
}

// EntityCapabilityWithCompositeID - a readonly computed ID for the entity capability including schema slug and the capability ID
type EntityCapabilityWithCompositeID struct {
	// Manifest ID used to create/update the schema capabilility
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// ID of the app if the capability is provided by an app
	AppID       *string     `json:"app_id,omitempty"`
	Attributes  []Attribute `json:"attributes,omitempty"`
	CompositeID *string     `json:"composite_id,omitempty"`
	// This capability should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// ID for the entity capability
	ID *string `json:"id,omitempty"`
	// Unique name for the capability
	Name string `json:"name"`
	// Schema slug the capability belongs to
	Schema *string `json:"schema,omitempty"`
	// This capability should only be active when all the settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Human readable title of the capability
	Title    *string                                  `json:"title,omitempty"`
	UIConfig *EntityCapabilityWithCompositeIDUIConfig `json:"ui_config,omitempty"`
	UIHooks  []EntityCapabilityWithCompositeIDUIHooks `json:"ui_hooks,omitempty"`
}

func (e *EntityCapabilityWithCompositeID) GetManifest() []string {
	if e == nil {
		return nil
	}
	return e.Manifest
}

func (e *EntityCapabilityWithCompositeID) GetPurpose() []string {
	if e == nil {
		return nil
	}
	return e.Purpose
}

func (e *EntityCapabilityWithCompositeID) GetAppID() *string {
	if e == nil {
		return nil
	}
	return e.AppID
}

func (e *EntityCapabilityWithCompositeID) GetAttributes() []Attribute {
	if e == nil {
		return nil
	}
	return e.Attributes
}

func (e *EntityCapabilityWithCompositeID) GetCompositeID() *string {
	if e == nil {
		return nil
	}
	return e.CompositeID
}

func (e *EntityCapabilityWithCompositeID) GetFeatureFlag() *string {
	if e == nil {
		return nil
	}
	return e.FeatureFlag
}

func (e *EntityCapabilityWithCompositeID) GetID() *string {
	if e == nil {
		return nil
	}
	return e.ID
}

func (e *EntityCapabilityWithCompositeID) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *EntityCapabilityWithCompositeID) GetSchema() *string {
	if e == nil {
		return nil
	}
	return e.Schema
}

func (e *EntityCapabilityWithCompositeID) GetSettingsFlag() []SettingFlag {
	if e == nil {
		return nil
	}
	return e.SettingsFlag
}

func (e *EntityCapabilityWithCompositeID) GetTitle() *string {
	if e == nil {
		return nil
	}
	return e.Title
}

func (e *EntityCapabilityWithCompositeID) GetUIConfig() *EntityCapabilityWithCompositeIDUIConfig {
	if e == nil {
		return nil
	}
	return e.UIConfig
}

func (e *EntityCapabilityWithCompositeID) GetUIHooks() []EntityCapabilityWithCompositeIDUIHooks {
	if e == nil {
		return nil
	}
	return e.UIHooks
}

// EntityCapabilityWithCompositeIDInput - a readonly computed ID for the entity capability including schema slug and the capability ID
type EntityCapabilityWithCompositeIDInput struct {
	// Manifest ID used to create/update the schema capabilility
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// ID of the app if the capability is provided by an app
	AppID      *string     `json:"app_id,omitempty"`
	Attributes []Attribute `json:"attributes,omitempty"`
	// This capability should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// ID for the entity capability
	ID *string `json:"id,omitempty"`
	// Unique name for the capability
	Name string `json:"name"`
	// Schema slug the capability belongs to
	Schema *string `json:"schema,omitempty"`
	// This capability should only be active when all the settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Human readable title of the capability
	Title    *string                                  `json:"title,omitempty"`
	UIConfig *EntityCapabilityWithCompositeIDUIConfig `json:"ui_config,omitempty"`
	UIHooks  []EntityCapabilityWithCompositeIDUIHooks `json:"ui_hooks,omitempty"`
}

func (e *EntityCapabilityWithCompositeIDInput) GetManifest() []string {
	if e == nil {
		return nil
	}
	return e.Manifest
}

func (e *EntityCapabilityWithCompositeIDInput) GetPurpose() []string {
	if e == nil {
		return nil
	}
	return e.Purpose
}

func (e *EntityCapabilityWithCompositeIDInput) GetAppID() *string {
	if e == nil {
		return nil
	}
	return e.AppID
}

func (e *EntityCapabilityWithCompositeIDInput) GetAttributes() []Attribute {
	if e == nil {
		return nil
	}
	return e.Attributes
}

func (e *EntityCapabilityWithCompositeIDInput) GetFeatureFlag() *string {
	if e == nil {
		return nil
	}
	return e.FeatureFlag
}

func (e *EntityCapabilityWithCompositeIDInput) GetID() *string {
	if e == nil {
		return nil
	}
	return e.ID
}

func (e *EntityCapabilityWithCompositeIDInput) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *EntityCapabilityWithCompositeIDInput) GetSchema() *string {
	if e == nil {
		return nil
	}
	return e.Schema
}

func (e *EntityCapabilityWithCompositeIDInput) GetSettingsFlag() []SettingFlag {
	if e == nil {
		return nil
	}
	return e.SettingsFlag
}

func (e *EntityCapabilityWithCompositeIDInput) GetTitle() *string {
	if e == nil {
		return nil
	}
	return e.Title
}

func (e *EntityCapabilityWithCompositeIDInput) GetUIConfig() *EntityCapabilityWithCompositeIDUIConfig {
	if e == nil {
		return nil
	}
	return e.UIConfig
}

func (e *EntityCapabilityWithCompositeIDInput) GetUIHooks() []EntityCapabilityWithCompositeIDUIHooks {
	if e == nil {
		return nil
	}
	return e.UIHooks
}
