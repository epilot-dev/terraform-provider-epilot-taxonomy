// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

type AttributeType string

const (
	AttributeTypeTextAttribute                  AttributeType = "TextAttribute"
	AttributeTypeLinkAttribute                  AttributeType = "LinkAttribute"
	AttributeTypeDateAttribute                  AttributeType = "DateAttribute"
	AttributeTypeCountryAttribute               AttributeType = "CountryAttribute"
	AttributeTypeBooleanAttribute               AttributeType = "BooleanAttribute"
	AttributeTypeSelectAttribute                AttributeType = "SelectAttribute"
	AttributeTypeMultiSelectAttribute           AttributeType = "MultiSelectAttribute"
	AttributeTypeStatusAttribute                AttributeType = "StatusAttribute"
	AttributeTypeSequenceAttribute              AttributeType = "SequenceAttribute"
	AttributeTypeRelationAttribute              AttributeType = "RelationAttribute"
	AttributeTypeUserRelationAttribute          AttributeType = "UserRelationAttribute"
	AttributeTypeAddressRelationAttribute       AttributeType = "AddressRelationAttribute"
	AttributeTypePaymentMethodRelationAttribute AttributeType = "PaymentMethodRelationAttribute"
	AttributeTypeCurrencyAttribute              AttributeType = "CurrencyAttribute"
	AttributeTypeRepeatableAttribute            AttributeType = "RepeatableAttribute"
	AttributeTypeTagsAttribute                  AttributeType = "TagsAttribute"
	AttributeTypeNumberAttribute                AttributeType = "NumberAttribute"
	AttributeTypeConsentAttribute               AttributeType = "ConsentAttribute"
	AttributeTypeInternalAttribute              AttributeType = "InternalAttribute"
	AttributeTypeOrderedListAttribute           AttributeType = "OrderedListAttribute"
	AttributeTypeFileAttribute                  AttributeType = "FileAttribute"
	AttributeTypeComputedAttribute              AttributeType = "ComputedAttribute"
	AttributeTypePartnerStatusAttribute         AttributeType = "PartnerStatusAttribute"
	AttributeTypeInvitationEmailAttribute       AttributeType = "InvitationEmailAttribute"
	AttributeTypeAutomationAttribute            AttributeType = "AutomationAttribute"
	AttributeTypeInternalUserAttribute          AttributeType = "InternalUserAttribute"
	AttributeTypePurposeAttribute               AttributeType = "PurposeAttribute"
	AttributeTypePartnerOrganisationAttribute   AttributeType = "PartnerOrganisationAttribute"
)

type Attribute struct {
	TextAttribute                  *TextAttribute                  `queryParam:"inline"`
	LinkAttribute                  *LinkAttribute                  `queryParam:"inline"`
	DateAttribute                  *DateAttribute                  `queryParam:"inline"`
	CountryAttribute               *CountryAttribute               `queryParam:"inline"`
	BooleanAttribute               *BooleanAttribute               `queryParam:"inline"`
	SelectAttribute                *SelectAttribute                `queryParam:"inline"`
	MultiSelectAttribute           *MultiSelectAttribute           `queryParam:"inline"`
	StatusAttribute                *StatusAttribute                `queryParam:"inline"`
	SequenceAttribute              *SequenceAttribute              `queryParam:"inline"`
	RelationAttribute              *RelationAttribute              `queryParam:"inline"`
	UserRelationAttribute          *UserRelationAttribute          `queryParam:"inline"`
	AddressRelationAttribute       *AddressRelationAttribute       `queryParam:"inline"`
	PaymentMethodRelationAttribute *PaymentMethodRelationAttribute `queryParam:"inline"`
	CurrencyAttribute              *CurrencyAttribute              `queryParam:"inline"`
	RepeatableAttribute            *RepeatableAttribute            `queryParam:"inline"`
	TagsAttribute                  *TagsAttribute                  `queryParam:"inline"`
	NumberAttribute                *NumberAttribute                `queryParam:"inline"`
	ConsentAttribute               *ConsentAttribute               `queryParam:"inline"`
	InternalAttribute              *InternalAttribute              `queryParam:"inline"`
	OrderedListAttribute           *OrderedListAttribute           `queryParam:"inline"`
	FileAttribute                  *FileAttribute                  `queryParam:"inline"`
	ComputedAttribute              *ComputedAttribute              `queryParam:"inline"`
	PartnerStatusAttribute         *PartnerStatusAttribute         `queryParam:"inline"`
	InvitationEmailAttribute       *InvitationEmailAttribute       `queryParam:"inline"`
	AutomationAttribute            *AutomationAttribute            `queryParam:"inline"`
	InternalUserAttribute          *InternalUserAttribute          `queryParam:"inline"`
	PurposeAttribute               *PurposeAttribute               `queryParam:"inline"`
	PartnerOrganisationAttribute   *PartnerOrganisationAttribute   `queryParam:"inline"`

	Type AttributeType
}

func CreateAttributeTextAttribute(textAttribute TextAttribute) Attribute {
	typ := AttributeTypeTextAttribute

	return Attribute{
		TextAttribute: &textAttribute,
		Type:          typ,
	}
}

func CreateAttributeLinkAttribute(linkAttribute LinkAttribute) Attribute {
	typ := AttributeTypeLinkAttribute

	return Attribute{
		LinkAttribute: &linkAttribute,
		Type:          typ,
	}
}

func CreateAttributeDateAttribute(dateAttribute DateAttribute) Attribute {
	typ := AttributeTypeDateAttribute

	return Attribute{
		DateAttribute: &dateAttribute,
		Type:          typ,
	}
}

func CreateAttributeCountryAttribute(countryAttribute CountryAttribute) Attribute {
	typ := AttributeTypeCountryAttribute

	return Attribute{
		CountryAttribute: &countryAttribute,
		Type:             typ,
	}
}

func CreateAttributeBooleanAttribute(booleanAttribute BooleanAttribute) Attribute {
	typ := AttributeTypeBooleanAttribute

	return Attribute{
		BooleanAttribute: &booleanAttribute,
		Type:             typ,
	}
}

func CreateAttributeSelectAttribute(selectAttribute SelectAttribute) Attribute {
	typ := AttributeTypeSelectAttribute

	return Attribute{
		SelectAttribute: &selectAttribute,
		Type:            typ,
	}
}

func CreateAttributeMultiSelectAttribute(multiSelectAttribute MultiSelectAttribute) Attribute {
	typ := AttributeTypeMultiSelectAttribute

	return Attribute{
		MultiSelectAttribute: &multiSelectAttribute,
		Type:                 typ,
	}
}

func CreateAttributeStatusAttribute(statusAttribute StatusAttribute) Attribute {
	typ := AttributeTypeStatusAttribute

	return Attribute{
		StatusAttribute: &statusAttribute,
		Type:            typ,
	}
}

func CreateAttributeSequenceAttribute(sequenceAttribute SequenceAttribute) Attribute {
	typ := AttributeTypeSequenceAttribute

	return Attribute{
		SequenceAttribute: &sequenceAttribute,
		Type:              typ,
	}
}

func CreateAttributeRelationAttribute(relationAttribute RelationAttribute) Attribute {
	typ := AttributeTypeRelationAttribute

	return Attribute{
		RelationAttribute: &relationAttribute,
		Type:              typ,
	}
}

func CreateAttributeUserRelationAttribute(userRelationAttribute UserRelationAttribute) Attribute {
	typ := AttributeTypeUserRelationAttribute

	return Attribute{
		UserRelationAttribute: &userRelationAttribute,
		Type:                  typ,
	}
}

func CreateAttributeAddressRelationAttribute(addressRelationAttribute AddressRelationAttribute) Attribute {
	typ := AttributeTypeAddressRelationAttribute

	return Attribute{
		AddressRelationAttribute: &addressRelationAttribute,
		Type:                     typ,
	}
}

func CreateAttributePaymentMethodRelationAttribute(paymentMethodRelationAttribute PaymentMethodRelationAttribute) Attribute {
	typ := AttributeTypePaymentMethodRelationAttribute

	return Attribute{
		PaymentMethodRelationAttribute: &paymentMethodRelationAttribute,
		Type:                           typ,
	}
}

func CreateAttributeCurrencyAttribute(currencyAttribute CurrencyAttribute) Attribute {
	typ := AttributeTypeCurrencyAttribute

	return Attribute{
		CurrencyAttribute: &currencyAttribute,
		Type:              typ,
	}
}

func CreateAttributeRepeatableAttribute(repeatableAttribute RepeatableAttribute) Attribute {
	typ := AttributeTypeRepeatableAttribute

	return Attribute{
		RepeatableAttribute: &repeatableAttribute,
		Type:                typ,
	}
}

func CreateAttributeTagsAttribute(tagsAttribute TagsAttribute) Attribute {
	typ := AttributeTypeTagsAttribute

	return Attribute{
		TagsAttribute: &tagsAttribute,
		Type:          typ,
	}
}

func CreateAttributeNumberAttribute(numberAttribute NumberAttribute) Attribute {
	typ := AttributeTypeNumberAttribute

	return Attribute{
		NumberAttribute: &numberAttribute,
		Type:            typ,
	}
}

func CreateAttributeConsentAttribute(consentAttribute ConsentAttribute) Attribute {
	typ := AttributeTypeConsentAttribute

	return Attribute{
		ConsentAttribute: &consentAttribute,
		Type:             typ,
	}
}

func CreateAttributeInternalAttribute(internalAttribute InternalAttribute) Attribute {
	typ := AttributeTypeInternalAttribute

	return Attribute{
		InternalAttribute: &internalAttribute,
		Type:              typ,
	}
}

func CreateAttributeOrderedListAttribute(orderedListAttribute OrderedListAttribute) Attribute {
	typ := AttributeTypeOrderedListAttribute

	return Attribute{
		OrderedListAttribute: &orderedListAttribute,
		Type:                 typ,
	}
}

func CreateAttributeFileAttribute(fileAttribute FileAttribute) Attribute {
	typ := AttributeTypeFileAttribute

	return Attribute{
		FileAttribute: &fileAttribute,
		Type:          typ,
	}
}

func CreateAttributeComputedAttribute(computedAttribute ComputedAttribute) Attribute {
	typ := AttributeTypeComputedAttribute

	return Attribute{
		ComputedAttribute: &computedAttribute,
		Type:              typ,
	}
}

func CreateAttributePartnerStatusAttribute(partnerStatusAttribute PartnerStatusAttribute) Attribute {
	typ := AttributeTypePartnerStatusAttribute

	return Attribute{
		PartnerStatusAttribute: &partnerStatusAttribute,
		Type:                   typ,
	}
}

func CreateAttributeInvitationEmailAttribute(invitationEmailAttribute InvitationEmailAttribute) Attribute {
	typ := AttributeTypeInvitationEmailAttribute

	return Attribute{
		InvitationEmailAttribute: &invitationEmailAttribute,
		Type:                     typ,
	}
}

func CreateAttributeAutomationAttribute(automationAttribute AutomationAttribute) Attribute {
	typ := AttributeTypeAutomationAttribute

	return Attribute{
		AutomationAttribute: &automationAttribute,
		Type:                typ,
	}
}

func CreateAttributeInternalUserAttribute(internalUserAttribute InternalUserAttribute) Attribute {
	typ := AttributeTypeInternalUserAttribute

	return Attribute{
		InternalUserAttribute: &internalUserAttribute,
		Type:                  typ,
	}
}

func CreateAttributePurposeAttribute(purposeAttribute PurposeAttribute) Attribute {
	typ := AttributeTypePurposeAttribute

	return Attribute{
		PurposeAttribute: &purposeAttribute,
		Type:             typ,
	}
}

func CreateAttributePartnerOrganisationAttribute(partnerOrganisationAttribute PartnerOrganisationAttribute) Attribute {
	typ := AttributeTypePartnerOrganisationAttribute

	return Attribute{
		PartnerOrganisationAttribute: &partnerOrganisationAttribute,
		Type:                         typ,
	}
}

func (u *Attribute) UnmarshalJSON(data []byte) error {

	var internalAttribute InternalAttribute = InternalAttribute{}
	if err := utils.UnmarshalJSON(data, &internalAttribute, "", true, true); err == nil {
		u.InternalAttribute = &internalAttribute
		u.Type = AttributeTypeInternalAttribute
		return nil
	}

	var linkAttribute LinkAttribute = LinkAttribute{}
	if err := utils.UnmarshalJSON(data, &linkAttribute, "", true, true); err == nil {
		u.LinkAttribute = &linkAttribute
		u.Type = AttributeTypeLinkAttribute
		return nil
	}

	var dateAttribute DateAttribute = DateAttribute{}
	if err := utils.UnmarshalJSON(data, &dateAttribute, "", true, true); err == nil {
		u.DateAttribute = &dateAttribute
		u.Type = AttributeTypeDateAttribute
		return nil
	}

	var countryAttribute CountryAttribute = CountryAttribute{}
	if err := utils.UnmarshalJSON(data, &countryAttribute, "", true, true); err == nil {
		u.CountryAttribute = &countryAttribute
		u.Type = AttributeTypeCountryAttribute
		return nil
	}

	var booleanAttribute BooleanAttribute = BooleanAttribute{}
	if err := utils.UnmarshalJSON(data, &booleanAttribute, "", true, true); err == nil {
		u.BooleanAttribute = &booleanAttribute
		u.Type = AttributeTypeBooleanAttribute
		return nil
	}

	var partnerOrganisationAttribute PartnerOrganisationAttribute = PartnerOrganisationAttribute{}
	if err := utils.UnmarshalJSON(data, &partnerOrganisationAttribute, "", true, true); err == nil {
		u.PartnerOrganisationAttribute = &partnerOrganisationAttribute
		u.Type = AttributeTypePartnerOrganisationAttribute
		return nil
	}

	var internalUserAttribute InternalUserAttribute = InternalUserAttribute{}
	if err := utils.UnmarshalJSON(data, &internalUserAttribute, "", true, true); err == nil {
		u.InternalUserAttribute = &internalUserAttribute
		u.Type = AttributeTypeInternalUserAttribute
		return nil
	}

	var automationAttribute AutomationAttribute = AutomationAttribute{}
	if err := utils.UnmarshalJSON(data, &automationAttribute, "", true, true); err == nil {
		u.AutomationAttribute = &automationAttribute
		u.Type = AttributeTypeAutomationAttribute
		return nil
	}

	var invitationEmailAttribute InvitationEmailAttribute = InvitationEmailAttribute{}
	if err := utils.UnmarshalJSON(data, &invitationEmailAttribute, "", true, true); err == nil {
		u.InvitationEmailAttribute = &invitationEmailAttribute
		u.Type = AttributeTypeInvitationEmailAttribute
		return nil
	}

	var partnerStatusAttribute PartnerStatusAttribute = PartnerStatusAttribute{}
	if err := utils.UnmarshalJSON(data, &partnerStatusAttribute, "", true, true); err == nil {
		u.PartnerStatusAttribute = &partnerStatusAttribute
		u.Type = AttributeTypePartnerStatusAttribute
		return nil
	}

	var computedAttribute ComputedAttribute = ComputedAttribute{}
	if err := utils.UnmarshalJSON(data, &computedAttribute, "", true, true); err == nil {
		u.ComputedAttribute = &computedAttribute
		u.Type = AttributeTypeComputedAttribute
		return nil
	}

	var orderedListAttribute OrderedListAttribute = OrderedListAttribute{}
	if err := utils.UnmarshalJSON(data, &orderedListAttribute, "", true, true); err == nil {
		u.OrderedListAttribute = &orderedListAttribute
		u.Type = AttributeTypeOrderedListAttribute
		return nil
	}

	var statusAttribute StatusAttribute = StatusAttribute{}
	if err := utils.UnmarshalJSON(data, &statusAttribute, "", true, true); err == nil {
		u.StatusAttribute = &statusAttribute
		u.Type = AttributeTypeStatusAttribute
		return nil
	}

	var paymentMethodRelationAttribute PaymentMethodRelationAttribute = PaymentMethodRelationAttribute{}
	if err := utils.UnmarshalJSON(data, &paymentMethodRelationAttribute, "", true, true); err == nil {
		u.PaymentMethodRelationAttribute = &paymentMethodRelationAttribute
		u.Type = AttributeTypePaymentMethodRelationAttribute
		return nil
	}

	var textAttribute TextAttribute = TextAttribute{}
	if err := utils.UnmarshalJSON(data, &textAttribute, "", true, true); err == nil {
		u.TextAttribute = &textAttribute
		u.Type = AttributeTypeTextAttribute
		return nil
	}

	var userRelationAttribute UserRelationAttribute = UserRelationAttribute{}
	if err := utils.UnmarshalJSON(data, &userRelationAttribute, "", true, true); err == nil {
		u.UserRelationAttribute = &userRelationAttribute
		u.Type = AttributeTypeUserRelationAttribute
		return nil
	}

	var addressRelationAttribute AddressRelationAttribute = AddressRelationAttribute{}
	if err := utils.UnmarshalJSON(data, &addressRelationAttribute, "", true, true); err == nil {
		u.AddressRelationAttribute = &addressRelationAttribute
		u.Type = AttributeTypeAddressRelationAttribute
		return nil
	}

	var numberAttribute NumberAttribute = NumberAttribute{}
	if err := utils.UnmarshalJSON(data, &numberAttribute, "", true, true); err == nil {
		u.NumberAttribute = &numberAttribute
		u.Type = AttributeTypeNumberAttribute
		return nil
	}

	var consentAttribute ConsentAttribute = ConsentAttribute{}
	if err := utils.UnmarshalJSON(data, &consentAttribute, "", true, true); err == nil {
		u.ConsentAttribute = &consentAttribute
		u.Type = AttributeTypeConsentAttribute
		return nil
	}

	var currencyAttribute CurrencyAttribute = CurrencyAttribute{}
	if err := utils.UnmarshalJSON(data, &currencyAttribute, "", true, true); err == nil {
		u.CurrencyAttribute = &currencyAttribute
		u.Type = AttributeTypeCurrencyAttribute
		return nil
	}

	var tagsAttribute TagsAttribute = TagsAttribute{}
	if err := utils.UnmarshalJSON(data, &tagsAttribute, "", true, true); err == nil {
		u.TagsAttribute = &tagsAttribute
		u.Type = AttributeTypeTagsAttribute
		return nil
	}

	var sequenceAttribute SequenceAttribute = SequenceAttribute{}
	if err := utils.UnmarshalJSON(data, &sequenceAttribute, "", true, true); err == nil {
		u.SequenceAttribute = &sequenceAttribute
		u.Type = AttributeTypeSequenceAttribute
		return nil
	}

	var selectAttribute SelectAttribute = SelectAttribute{}
	if err := utils.UnmarshalJSON(data, &selectAttribute, "", true, true); err == nil {
		u.SelectAttribute = &selectAttribute
		u.Type = AttributeTypeSelectAttribute
		return nil
	}

	var repeatableAttribute RepeatableAttribute = RepeatableAttribute{}
	if err := utils.UnmarshalJSON(data, &repeatableAttribute, "", true, true); err == nil {
		u.RepeatableAttribute = &repeatableAttribute
		u.Type = AttributeTypeRepeatableAttribute
		return nil
	}

	var multiSelectAttribute MultiSelectAttribute = MultiSelectAttribute{}
	if err := utils.UnmarshalJSON(data, &multiSelectAttribute, "", true, true); err == nil {
		u.MultiSelectAttribute = &multiSelectAttribute
		u.Type = AttributeTypeMultiSelectAttribute
		return nil
	}

	var purposeAttribute PurposeAttribute = PurposeAttribute{}
	if err := utils.UnmarshalJSON(data, &purposeAttribute, "", true, true); err == nil {
		u.PurposeAttribute = &purposeAttribute
		u.Type = AttributeTypePurposeAttribute
		return nil
	}

	var fileAttribute FileAttribute = FileAttribute{}
	if err := utils.UnmarshalJSON(data, &fileAttribute, "", true, true); err == nil {
		u.FileAttribute = &fileAttribute
		u.Type = AttributeTypeFileAttribute
		return nil
	}

	var relationAttribute RelationAttribute = RelationAttribute{}
	if err := utils.UnmarshalJSON(data, &relationAttribute, "", true, true); err == nil {
		u.RelationAttribute = &relationAttribute
		u.Type = AttributeTypeRelationAttribute
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Attribute", string(data))
}

func (u Attribute) MarshalJSON() ([]byte, error) {
	if u.TextAttribute != nil {
		return utils.MarshalJSON(u.TextAttribute, "", true)
	}

	if u.LinkAttribute != nil {
		return utils.MarshalJSON(u.LinkAttribute, "", true)
	}

	if u.DateAttribute != nil {
		return utils.MarshalJSON(u.DateAttribute, "", true)
	}

	if u.CountryAttribute != nil {
		return utils.MarshalJSON(u.CountryAttribute, "", true)
	}

	if u.BooleanAttribute != nil {
		return utils.MarshalJSON(u.BooleanAttribute, "", true)
	}

	if u.SelectAttribute != nil {
		return utils.MarshalJSON(u.SelectAttribute, "", true)
	}

	if u.MultiSelectAttribute != nil {
		return utils.MarshalJSON(u.MultiSelectAttribute, "", true)
	}

	if u.StatusAttribute != nil {
		return utils.MarshalJSON(u.StatusAttribute, "", true)
	}

	if u.SequenceAttribute != nil {
		return utils.MarshalJSON(u.SequenceAttribute, "", true)
	}

	if u.RelationAttribute != nil {
		return utils.MarshalJSON(u.RelationAttribute, "", true)
	}

	if u.UserRelationAttribute != nil {
		return utils.MarshalJSON(u.UserRelationAttribute, "", true)
	}

	if u.AddressRelationAttribute != nil {
		return utils.MarshalJSON(u.AddressRelationAttribute, "", true)
	}

	if u.PaymentMethodRelationAttribute != nil {
		return utils.MarshalJSON(u.PaymentMethodRelationAttribute, "", true)
	}

	if u.CurrencyAttribute != nil {
		return utils.MarshalJSON(u.CurrencyAttribute, "", true)
	}

	if u.RepeatableAttribute != nil {
		return utils.MarshalJSON(u.RepeatableAttribute, "", true)
	}

	if u.TagsAttribute != nil {
		return utils.MarshalJSON(u.TagsAttribute, "", true)
	}

	if u.NumberAttribute != nil {
		return utils.MarshalJSON(u.NumberAttribute, "", true)
	}

	if u.ConsentAttribute != nil {
		return utils.MarshalJSON(u.ConsentAttribute, "", true)
	}

	if u.InternalAttribute != nil {
		return utils.MarshalJSON(u.InternalAttribute, "", true)
	}

	if u.OrderedListAttribute != nil {
		return utils.MarshalJSON(u.OrderedListAttribute, "", true)
	}

	if u.FileAttribute != nil {
		return utils.MarshalJSON(u.FileAttribute, "", true)
	}

	if u.ComputedAttribute != nil {
		return utils.MarshalJSON(u.ComputedAttribute, "", true)
	}

	if u.PartnerStatusAttribute != nil {
		return utils.MarshalJSON(u.PartnerStatusAttribute, "", true)
	}

	if u.InvitationEmailAttribute != nil {
		return utils.MarshalJSON(u.InvitationEmailAttribute, "", true)
	}

	if u.AutomationAttribute != nil {
		return utils.MarshalJSON(u.AutomationAttribute, "", true)
	}

	if u.InternalUserAttribute != nil {
		return utils.MarshalJSON(u.InternalUserAttribute, "", true)
	}

	if u.PurposeAttribute != nil {
		return utils.MarshalJSON(u.PurposeAttribute, "", true)
	}

	if u.PartnerOrganisationAttribute != nil {
		return utils.MarshalJSON(u.PartnerOrganisationAttribute, "", true)
	}

	return nil, errors.New("could not marshal union type Attribute: all fields are null")
}
