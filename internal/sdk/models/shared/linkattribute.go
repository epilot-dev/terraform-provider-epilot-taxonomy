// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
)

// LinkAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type LinkAttributeConstraints struct {
}

func (l LinkAttributeConstraints) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LinkAttributeConstraints) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

// LinkAttributeInfoHelpers - A set of configurations meant to document and assist the user in filling the attribute.
type LinkAttributeInfoHelpers struct {
	// The name of the custom component to be used as the hint helper.
	// The component should be registered in the `@epilot360/entity-ui` on the index of the components directory.
	// When specified it overrides the `hint_text` or `hint_text_key` configuration.
	//
	HintCustomComponent *string `json:"hint_custom_component,omitempty"`
	// The text to be displayed in the attribute hint helper.
	// When specified it overrides the `hint_text_key` configuration.
	//
	HintText *string `json:"hint_text,omitempty"`
	// The key of the hint text to be displayed in the attribute hint helper.
	// The key should be a valid i18n key.
	//
	HintTextKey *string `json:"hint_text_key,omitempty"`
	// The placement of the hint tooltip.
	// The value should be a valid `@mui/core` tooltip placement.
	//
	HintTooltipPlacement *string `json:"hint_tooltip_placement,omitempty"`
}

func (l LinkAttributeInfoHelpers) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LinkAttributeInfoHelpers) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (l *LinkAttributeInfoHelpers) GetHintCustomComponent() *string {
	if l == nil {
		return nil
	}
	return l.HintCustomComponent
}

func (l *LinkAttributeInfoHelpers) GetHintText() *string {
	if l == nil {
		return nil
	}
	return l.HintText
}

func (l *LinkAttributeInfoHelpers) GetHintTextKey() *string {
	if l == nil {
		return nil
	}
	return l.HintTextKey
}

func (l *LinkAttributeInfoHelpers) GetHintTooltipPlacement() *string {
	if l == nil {
		return nil
	}
	return l.HintTooltipPlacement
}

type LinkAttributeType string

const (
	LinkAttributeTypeLink LinkAttributeType = "link"
)

func (e LinkAttributeType) ToPointer() *LinkAttributeType {
	return &e
}
func (e *LinkAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "link":
		*e = LinkAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LinkAttributeType: %v", v)
	}
}

// LinkAttribute - Link with title and href
type LinkAttribute struct {
	// Manifest ID used to create/update the schema attribute
	Manifest []string `json:"_manifest,omitempty"`
	Purpose  []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *LinkAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue any                       `json:"default_value,omitempty"`
	Deprecated   *bool                     `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group      *string `json:"group,omitempty"`
	HasPrimary *bool   `json:"has_primary,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon *string `json:"icon,omitempty"`
	// ID for the entity attribute
	ID *string `json:"id,omitempty"`
	// A set of configurations meant to document and assist the user in filling the attribute.
	InfoHelpers *LinkAttributeInfoHelpers `json:"info_helpers,omitempty"`
	Label       string                    `json:"label"`
	Layout      *string                   `json:"layout,omitempty"`
	Name        string                    `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	// The attribute is a repeatable
	Repeatable *bool `json:"repeatable,omitempty"`
	Required   *bool `default:"false" json:"required"`
	// This attribute should only be active when one of the provided settings have the correct value
	SettingsFlag []SettingFlag `json:"settings_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable *bool `json:"show_in_table,omitempty"`
	// Allow sorting by this attribute in table views if `show_in_table` is true
	Sortable       *bool             `default:"true" json:"sortable"`
	Type           LinkAttributeType `json:"type"`
	ValueFormatter *string           `json:"value_formatter,omitempty"`
}

func (l LinkAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LinkAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"label", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (l *LinkAttribute) GetManifest() []string {
	if l == nil {
		return nil
	}
	return l.Manifest
}

func (l *LinkAttribute) GetPurpose() []string {
	if l == nil {
		return nil
	}
	return l.Purpose
}

func (l *LinkAttribute) GetConstraints() *LinkAttributeConstraints {
	if l == nil {
		return nil
	}
	return l.Constraints
}

func (l *LinkAttribute) GetDefaultValue() any {
	if l == nil {
		return nil
	}
	return l.DefaultValue
}

func (l *LinkAttribute) GetDeprecated() *bool {
	if l == nil {
		return nil
	}
	return l.Deprecated
}

func (l *LinkAttribute) GetEntityBuilderDisableEdit() *bool {
	if l == nil {
		return nil
	}
	return l.EntityBuilderDisableEdit
}

func (l *LinkAttribute) GetFeatureFlag() *string {
	if l == nil {
		return nil
	}
	return l.FeatureFlag
}

func (l *LinkAttribute) GetGroup() *string {
	if l == nil {
		return nil
	}
	return l.Group
}

func (l *LinkAttribute) GetHasPrimary() *bool {
	if l == nil {
		return nil
	}
	return l.HasPrimary
}

func (l *LinkAttribute) GetHidden() *bool {
	if l == nil {
		return nil
	}
	return l.Hidden
}

func (l *LinkAttribute) GetHideLabel() *bool {
	if l == nil {
		return nil
	}
	return l.HideLabel
}

func (l *LinkAttribute) GetIcon() *string {
	if l == nil {
		return nil
	}
	return l.Icon
}

func (l *LinkAttribute) GetID() *string {
	if l == nil {
		return nil
	}
	return l.ID
}

func (l *LinkAttribute) GetInfoHelpers() *LinkAttributeInfoHelpers {
	if l == nil {
		return nil
	}
	return l.InfoHelpers
}

func (l *LinkAttribute) GetLabel() string {
	if l == nil {
		return ""
	}
	return l.Label
}

func (l *LinkAttribute) GetLayout() *string {
	if l == nil {
		return nil
	}
	return l.Layout
}

func (l *LinkAttribute) GetName() string {
	if l == nil {
		return ""
	}
	return l.Name
}

func (l *LinkAttribute) GetOrder() *int64 {
	if l == nil {
		return nil
	}
	return l.Order
}

func (l *LinkAttribute) GetPlaceholder() *string {
	if l == nil {
		return nil
	}
	return l.Placeholder
}

func (l *LinkAttribute) GetPreviewValueFormatter() *string {
	if l == nil {
		return nil
	}
	return l.PreviewValueFormatter
}

func (l *LinkAttribute) GetProtected() *bool {
	if l == nil {
		return nil
	}
	return l.Protected
}

func (l *LinkAttribute) GetReadonly() *bool {
	if l == nil {
		return nil
	}
	return l.Readonly
}

func (l *LinkAttribute) GetRenderCondition() *string {
	if l == nil {
		return nil
	}
	return l.RenderCondition
}

func (l *LinkAttribute) GetRepeatable() *bool {
	if l == nil {
		return nil
	}
	return l.Repeatable
}

func (l *LinkAttribute) GetRequired() *bool {
	if l == nil {
		return nil
	}
	return l.Required
}

func (l *LinkAttribute) GetSettingsFlag() []SettingFlag {
	if l == nil {
		return nil
	}
	return l.SettingsFlag
}

func (l *LinkAttribute) GetShowInTable() *bool {
	if l == nil {
		return nil
	}
	return l.ShowInTable
}

func (l *LinkAttribute) GetSortable() *bool {
	if l == nil {
		return nil
	}
	return l.Sortable
}

func (l *LinkAttribute) GetType() LinkAttributeType {
	if l == nil {
		return LinkAttributeType("")
	}
	return l.Type
}

func (l *LinkAttribute) GetValueFormatter() *string {
	if l == nil {
		return nil
	}
	return l.ValueFormatter
}
