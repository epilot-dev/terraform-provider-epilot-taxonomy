// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EntityValidationV2ResultSuccessStatus string

const (
	EntityValidationV2ResultSuccessStatusSuccess EntityValidationV2ResultSuccessStatus = "success"
)

func (e EntityValidationV2ResultSuccessStatus) ToPointer() *EntityValidationV2ResultSuccessStatus {
	return &e
}
func (e *EntityValidationV2ResultSuccessStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		*e = EntityValidationV2ResultSuccessStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityValidationV2ResultSuccessStatus: %v", v)
	}
}

// EntityValidationV2ResultSuccess - Validation result for a successful validation
type EntityValidationV2ResultSuccess struct {
	Errors []EntityValidationV2Error             `json:"errors"`
	Status EntityValidationV2ResultSuccessStatus `json:"status"`
}

func (o *EntityValidationV2ResultSuccess) GetErrors() []EntityValidationV2Error {
	if o == nil {
		return []EntityValidationV2Error{}
	}
	return o.Errors
}

func (o *EntityValidationV2ResultSuccess) GetStatus() EntityValidationV2ResultSuccessStatus {
	if o == nil {
		return EntityValidationV2ResultSuccessStatus("")
	}
	return o.Status
}
