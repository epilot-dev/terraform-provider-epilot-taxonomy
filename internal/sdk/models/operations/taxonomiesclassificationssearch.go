// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/models/shared"
	"net/http"
)

type TaxonomiesClassificationsSearchRequestBody struct {
	ClassificationIds []shared.ClassificationIDOrPattern `json:"classificationIds,omitempty"`
}

func (t *TaxonomiesClassificationsSearchRequestBody) GetClassificationIds() []shared.ClassificationIDOrPattern {
	if t == nil {
		return nil
	}
	return t.ClassificationIds
}

type TaxonomySlugType string

const (
	TaxonomySlugTypeStr        TaxonomySlugType = "str"
	TaxonomySlugTypeArrayOfStr TaxonomySlugType = "arrayOfStr"
)

// TaxonomySlug - The taxonomy slug(s) to search within. When provided with multiple taxonomy slugs, the search will be performed across all the provided taxonomies.
type TaxonomySlug struct {
	Str        *string  `queryParam:"inline" name:"taxonomySlug"`
	ArrayOfStr []string `queryParam:"inline" name:"taxonomySlug"`

	Type TaxonomySlugType
}

func CreateTaxonomySlugStr(str string) TaxonomySlug {
	typ := TaxonomySlugTypeStr

	return TaxonomySlug{
		Str:  &str,
		Type: typ,
	}
}

func CreateTaxonomySlugArrayOfStr(arrayOfStr []string) TaxonomySlug {
	typ := TaxonomySlugTypeArrayOfStr

	return TaxonomySlug{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *TaxonomySlug) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = TaxonomySlugTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = TaxonomySlugTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TaxonomySlug", string(data))
}

func (u TaxonomySlug) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type TaxonomySlug: all fields are null")
}

type TaxonomiesClassificationsSearchRequest struct {
	RequestBody *TaxonomiesClassificationsSearchRequestBody `request:"mediaType=application/json"`
	// Filter by archived status. Deprecated. Use `include_archived` instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Archived *bool `queryParam:"style=form,explode=true,name=archived"`
	// Whether to include archived labels in the search results
	// - `true`: include archived labels
	// - `false`: exclude archived labels
	// - `only`: include only archived labels
	//
	// By default, no archived labels are included in the search results.
	//
	IncludeArchived *shared.TaxonomySearchIncludeArchivedParam `default:"false" queryParam:"style=form,explode=true,name=include_archived"`
	// The label names to search for (lowercase insensitive)
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// The taxonomy slug(s) to search within. When provided with multiple taxonomy slugs, the search will be performed across all the provided taxonomies.
	//
	TaxonomySlug *TaxonomySlug `queryParam:"style=form,explode=true,name=taxonomySlug"`
}

func (t TaxonomiesClassificationsSearchRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaxonomiesClassificationsSearchRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (t *TaxonomiesClassificationsSearchRequest) GetRequestBody() *TaxonomiesClassificationsSearchRequestBody {
	if t == nil {
		return nil
	}
	return t.RequestBody
}

func (t *TaxonomiesClassificationsSearchRequest) GetArchived() *bool {
	if t == nil {
		return nil
	}
	return t.Archived
}

func (t *TaxonomiesClassificationsSearchRequest) GetIncludeArchived() *shared.TaxonomySearchIncludeArchivedParam {
	if t == nil {
		return nil
	}
	return t.IncludeArchived
}

func (t *TaxonomiesClassificationsSearchRequest) GetQuery() *string {
	if t == nil {
		return nil
	}
	return t.Query
}

func (t *TaxonomiesClassificationsSearchRequest) GetTaxonomySlug() *TaxonomySlug {
	if t == nil {
		return nil
	}
	return t.TaxonomySlug
}

// TaxonomiesClassificationsSearchTaxonomyResponseBody - A generic error returned by the API
type TaxonomiesClassificationsSearchTaxonomyResponseBody struct {
	// The error message
	Error *string `json:"error,omitempty"`
	// The HTTP status code of the error
	Status *int64 `json:"status,omitempty"`
}

func (t *TaxonomiesClassificationsSearchTaxonomyResponseBody) GetError() *string {
	if t == nil {
		return nil
	}
	return t.Error
}

func (t *TaxonomiesClassificationsSearchTaxonomyResponseBody) GetStatus() *int64 {
	if t == nil {
		return nil
	}
	return t.Status
}

// TaxonomiesClassificationsSearchResponseBody - Returns the classifications for the taxonomy slug provided
type TaxonomiesClassificationsSearchResponseBody struct {
	Hits    *int64                          `json:"hits,omitempty"`
	Results []shared.TaxonomyClassification `json:"results,omitempty"`
}

func (t *TaxonomiesClassificationsSearchResponseBody) GetHits() *int64 {
	if t == nil {
		return nil
	}
	return t.Hits
}

func (t *TaxonomiesClassificationsSearchResponseBody) GetResults() []shared.TaxonomyClassification {
	if t == nil {
		return nil
	}
	return t.Results
}

type TaxonomiesClassificationsSearchResponse struct {
	// HTTP response content type for this operation
	ContentType string
	Headers     map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Returns the classifications for the taxonomy slug provided
	Object *TaxonomiesClassificationsSearchResponseBody
	// Too many requests
	Object1 *TaxonomiesClassificationsSearchTaxonomyResponseBody
}

func (t *TaxonomiesClassificationsSearchResponse) GetContentType() string {
	if t == nil {
		return ""
	}
	return t.ContentType
}

func (t *TaxonomiesClassificationsSearchResponse) GetHeaders() map[string][]string {
	if t == nil {
		return map[string][]string{}
	}
	return t.Headers
}

func (t *TaxonomiesClassificationsSearchResponse) GetStatusCode() int {
	if t == nil {
		return 0
	}
	return t.StatusCode
}

func (t *TaxonomiesClassificationsSearchResponse) GetRawResponse() *http.Response {
	if t == nil {
		return nil
	}
	return t.RawResponse
}

func (t *TaxonomiesClassificationsSearchResponse) GetObject() *TaxonomiesClassificationsSearchResponseBody {
	if t == nil {
		return nil
	}
	return t.Object
}

func (t *TaxonomiesClassificationsSearchResponse) GetObject1() *TaxonomiesClassificationsSearchTaxonomyResponseBody {
	if t == nil {
		return nil
	}
	return t.Object1
}
