// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/models/shared"
	"net/http"
)

type PatchEntityRequest struct {
	Entity shared.EntityInput `request:"mediaType=application/json"`
	// Activity to include in event feed
	ActivityID *shared.ActivityIDQueryParam `queryParam:"style=form,explode=true,name=activity_id"`
	// Don't wait for updated entity to become available in Search API. Useful for large migrations
	Async *bool `default:"false" queryParam:"style=form,explode=true,name=async"`
	// Dry Run mode = return results but does not perform the operation.
	DryRun *bool `default:"false" queryParam:"style=form,explode=true,name=dry_run"`
	// Update the diff and entity for the custom activity included in the query.
	// Pending state on activity is automatically ended when activity is filled.
	//
	FillActivity *bool `default:"false" queryParam:"style=form,explode=true,name=fill_activity"`
	// Entity id
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Entity Type
	Slug string `pathParam:"style=simple,explode=false,name=slug"`
	// When true, enables entity validation against the entity schema.
	Validate *bool `default:"false" queryParam:"style=form,explode=true,name=validate"`
}

func (p PatchEntityRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PatchEntityRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"Entity", "id", "slug"}); err != nil {
		return err
	}
	return nil
}

func (o *PatchEntityRequest) GetEntity() shared.EntityInput {
	if o == nil {
		return shared.EntityInput{}
	}
	return o.Entity
}

func (o *PatchEntityRequest) GetActivityID() *shared.ActivityIDQueryParam {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *PatchEntityRequest) GetAsync() *bool {
	if o == nil {
		return nil
	}
	return o.Async
}

func (o *PatchEntityRequest) GetDryRun() *bool {
	if o == nil {
		return nil
	}
	return o.DryRun
}

func (o *PatchEntityRequest) GetFillActivity() *bool {
	if o == nil {
		return nil
	}
	return o.FillActivity
}

func (o *PatchEntityRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PatchEntityRequest) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *PatchEntityRequest) GetValidate() *bool {
	if o == nil {
		return nil
	}
	return o.Validate
}

type PatchEntityResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Entity was updated
	EntityItem *shared.EntityItem
	// Entity validation error when `?validate=true`
	EntityValidationV2ResultError *shared.EntityValidationV2ResultError
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *PatchEntityResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PatchEntityResponse) GetEntityItem() *shared.EntityItem {
	if o == nil {
		return nil
	}
	return o.EntityItem
}

func (o *PatchEntityResponse) GetEntityValidationV2ResultError() *shared.EntityValidationV2ResultError {
	if o == nil {
		return nil
	}
	return o.EntityValidationV2ResultError
}

func (o *PatchEntityResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PatchEntityResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
