// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/models/shared"
	"net/http"
)

type UpdateRelationRequestBody struct {
	Tags []string `json:"_tags,omitempty"`
}

func (o *UpdateRelationRequestBody) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

type UpdateRelationRequest struct {
	RequestBody *UpdateRelationRequestBody `request:"mediaType=application/json"`
	// Activity to include in event feed
	ActivityID *shared.ActivityIDQueryParam `queryParam:"style=form,explode=true,name=activity_id"`
	// Don't wait for updated entity to become available in Search API. Useful for large migrations
	Async *bool `default:"false" queryParam:"style=form,explode=true,name=async"`
	// The attribute that express meaning
	Attribute string `pathParam:"style=simple,explode=false,name=attribute"`
	// The attribute that express meaning
	EntityID string `pathParam:"style=simple,explode=false,name=entity_id"`
	// Entity id
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Entity Type
	Slug string `pathParam:"style=simple,explode=false,name=slug"`
}

func (u UpdateRelationRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateRelationRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"attribute", "entity_id", "id", "slug"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateRelationRequest) GetRequestBody() *UpdateRelationRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *UpdateRelationRequest) GetActivityID() *shared.ActivityIDQueryParam {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *UpdateRelationRequest) GetAsync() *bool {
	if o == nil {
		return nil
	}
	return o.Async
}

func (o *UpdateRelationRequest) GetAttribute() string {
	if o == nil {
		return ""
	}
	return o.Attribute
}

func (o *UpdateRelationRequest) GetEntityID() string {
	if o == nil {
		return ""
	}
	return o.EntityID
}

func (o *UpdateRelationRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateRelationRequest) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

// UpdateRelationResponseBody - A generic error returned by the API
type UpdateRelationResponseBody struct {
	// The error message
	Error *string `json:"error,omitempty"`
	// The HTTP status code of the error
	Status *int64 `json:"status,omitempty"`
}

func (o *UpdateRelationResponseBody) GetError() *string {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *UpdateRelationResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type UpdateRelationResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Success
	RelationItem *shared.RelationItem
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The requested resource was not found
	Object *UpdateRelationResponseBody
}

func (o *UpdateRelationResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateRelationResponse) GetRelationItem() *shared.RelationItem {
	if o == nil {
		return nil
	}
	return o.RelationItem
}

func (o *UpdateRelationResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateRelationResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateRelationResponse) GetObject() *UpdateRelationResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
