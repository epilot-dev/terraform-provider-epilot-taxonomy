// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/models/shared"
	"net/http"
	"time"
)

// PresetRange - Get activities within a predefined date range (e.g., 'today', 'last_week'). Cannot be used with 'before', 'after', 'start_date', or 'end_date'.
type PresetRange string

const (
	PresetRangeToday    PresetRange = "today"
	PresetRangeThisWeek PresetRange = "this_week"
	PresetRangeLastWeek PresetRange = "last_week"
)

func (e PresetRange) ToPointer() *PresetRange {
	return &e
}
func (e *PresetRange) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "today":
		fallthrough
	case "this_week":
		fallthrough
	case "last_week":
		*e = PresetRange(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PresetRange: %v", v)
	}
}

type GetEntityActivityFeedRequest struct {
	// Get activities strictly after this timestamp. Cannot be used with 'before', 'start_date', 'end_date', or 'preset_range'.
	After *time.Time `queryParam:"style=form,explode=true,name=after"`
	// Get activities strictly before this timestamp. Cannot be used with 'after', 'start_date', 'end_date', or 'preset_range'.
	Before *time.Time `queryParam:"style=form,explode=true,name=before"`
	// The inclusive end timestamp for a date range filter. Requires 'start_date' to also be provided. Cannot be used with 'before', 'after', or 'preset_range'.
	EndDate *time.Time `queryParam:"style=form,explode=true,name=end_date"`
	// Exclude all activity types that are part of an activity group from results
	ExcludeActivityGroups *string `queryParam:"style=form,explode=true,name=exclude_activity_groups"`
	// Starting page number
	From *int64 `default:"0" queryParam:"style=form,explode=true,name=from"`
	// Entity id
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Include activities from related entities
	IncludeRelations *bool `default:"false" queryParam:"style=form,explode=true,name=include_relations"`
	// Get activities within a predefined date range (e.g., 'today', 'last_week'). Cannot be used with 'before', 'after', 'start_date', or 'end_date'.
	PresetRange *PresetRange `queryParam:"style=form,explode=true,name=preset_range"`
	// max number of results to return
	Size *int64 `default:"25" queryParam:"style=form,explode=true,name=size"`
	// Entity Type
	Slug string `pathParam:"style=simple,explode=false,name=slug"`
	// The inclusive start timestamp for a date range filter. Requires 'end_date' to also be provided. Cannot be used with 'before', 'after', or 'preset_range'.
	StartDate *time.Time `queryParam:"style=form,explode=true,name=start_date"`
	// Filter by activity type
	Type *string `queryParam:"style=form,explode=true,name=type"`
}

func (g GetEntityActivityFeedRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetEntityActivityFeedRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"id", "slug"}); err != nil {
		return err
	}
	return nil
}

func (o *GetEntityActivityFeedRequest) GetAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *GetEntityActivityFeedRequest) GetBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.Before
}

func (o *GetEntityActivityFeedRequest) GetEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *GetEntityActivityFeedRequest) GetExcludeActivityGroups() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeActivityGroups
}

func (o *GetEntityActivityFeedRequest) GetFrom() *int64 {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *GetEntityActivityFeedRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetEntityActivityFeedRequest) GetIncludeRelations() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeRelations
}

func (o *GetEntityActivityFeedRequest) GetPresetRange() *PresetRange {
	if o == nil {
		return nil
	}
	return o.PresetRange
}

func (o *GetEntityActivityFeedRequest) GetSize() *int64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetEntityActivityFeedRequest) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetEntityActivityFeedRequest) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *GetEntityActivityFeedRequest) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetEntityActivityFeedActivityResponseBody - A generic error returned by the API
type GetEntityActivityFeedActivityResponseBody struct {
	// The error message
	Error *string `json:"error,omitempty"`
	// The HTTP status code of the error
	Status *int64 `json:"status,omitempty"`
}

func (o *GetEntityActivityFeedActivityResponseBody) GetError() *string {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *GetEntityActivityFeedActivityResponseBody) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

// GetEntityActivityFeedResponseBody - Success
type GetEntityActivityFeedResponseBody struct {
	Results []shared.ActivityItem `json:"results,omitempty"`
	Total   *int64                `json:"total,omitempty"`
}

func (o *GetEntityActivityFeedResponseBody) GetResults() []shared.ActivityItem {
	if o == nil {
		return nil
	}
	return o.Results
}

func (o *GetEntityActivityFeedResponseBody) GetTotal() *int64 {
	if o == nil {
		return nil
	}
	return o.Total
}

type GetEntityActivityFeedResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Success
	Object *GetEntityActivityFeedResponseBody
	// The requested resource was not found
	Object1 *GetEntityActivityFeedActivityResponseBody
}

func (o *GetEntityActivityFeedResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetEntityActivityFeedResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetEntityActivityFeedResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetEntityActivityFeedResponse) GetObject() *GetEntityActivityFeedResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *GetEntityActivityFeedResponse) GetObject1() *GetEntityActivityFeedActivityResponseBody {
	if o == nil {
		return nil
	}
	return o.Object1
}
