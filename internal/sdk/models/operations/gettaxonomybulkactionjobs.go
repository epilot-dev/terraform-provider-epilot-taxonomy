// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/models/shared"
	"net/http"
	"time"
)

// Scope of jobs to return. 'me' returns only jobs created by the current user, 'all' returns jobs from all users in the organization.
type Scope string

const (
	ScopeMe  Scope = "me"
	ScopeAll Scope = "all"
)

func (e Scope) ToPointer() *Scope {
	return &e
}
func (e *Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "me":
		fallthrough
	case "all":
		*e = Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Scope: %v", v)
	}
}

type GetTaxonomyBulkActionJobsRequest struct {
	CreatedAfter *time.Time `queryParam:"style=form,explode=true,name=created_after"`
	// Scope of jobs to return. 'me' returns only jobs created by the current user, 'all' returns jobs from all users in the organization.
	Scope            *Scope   `default:"me" queryParam:"style=form,explode=true,name=scope"`
	Size             *float64 `default:"20" queryParam:"style=form,explode=true,name=size"`
	SortPendingFirst *bool    `default:"false" queryParam:"style=form,explode=true,name=sort_pending_first"`
	// The status of the jobs to return
	Status []string `queryParam:"style=form,explode=true,name=status"`
}

func (g GetTaxonomyBulkActionJobsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetTaxonomyBulkActionJobsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (g *GetTaxonomyBulkActionJobsRequest) GetCreatedAfter() *time.Time {
	if g == nil {
		return nil
	}
	return g.CreatedAfter
}

func (g *GetTaxonomyBulkActionJobsRequest) GetScope() *Scope {
	if g == nil {
		return nil
	}
	return g.Scope
}

func (g *GetTaxonomyBulkActionJobsRequest) GetSize() *float64 {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetTaxonomyBulkActionJobsRequest) GetSortPendingFirst() *bool {
	if g == nil {
		return nil
	}
	return g.SortPendingFirst
}

func (g *GetTaxonomyBulkActionJobsRequest) GetStatus() []string {
	if g == nil {
		return nil
	}
	return g.Status
}

type GetTaxonomyBulkActionJobsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Returns the jobs matching the given query or the active jobs if no status is provided
	Classes []shared.TaxonomyBulkJob
}

func (g *GetTaxonomyBulkActionJobsResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetTaxonomyBulkActionJobsResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetTaxonomyBulkActionJobsResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetTaxonomyBulkActionJobsResponse) GetClasses() []shared.TaxonomyBulkJob {
	if g == nil {
		return nil
	}
	return g.Classes
}
