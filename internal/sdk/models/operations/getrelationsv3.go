// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-taxonomy/internal/sdk/models/shared"
	"net/http"
)

type GetRelationsV3Request struct {
	// Filter results to exclude schemas
	ExcludeSchemas []string `queryParam:"style=form,explode=false,name=exclude_schemas"`
	// List of entity fields to include in results
	Fields []string `queryParam:"style=form,explode=true,name=fields"`
	// Starting page number
	From *int64 `default:"0" queryParam:"style=form,explode=true,name=from"`
	// When true, enables entity hydration to resolve nested $relation & $relation_ref references in-place.
	Hydrate *bool `default:"false" queryParam:"style=form,explode=true,name=hydrate"`
	// Entity id
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// When true, includes reverse relations in response (other entities pointing to this entity)
	// *It gets overriden by mode query parameter.*
	//
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	IncludeReverse *bool `default:"false" queryParam:"style=form,explode=true,name=include_reverse"`
	// Filter results to only include schemas
	IncludeSchemas []string `queryParam:"style=form,explode=false,name=include_schemas"`
	// Options to determine how relations will be included in the result.
	// *It overrides the include_reverse query param.*
	// Explanation of possible options:
	// - direct: include relations to which the searched entity refers
	// - reverse: include relations that refer to the entity you are looking for
	// - both: both direct and reverse relations
	//
	Mode *shared.EntityRelationsModeQueryParam `queryParam:"style=form,explode=true,name=mode"`
	// Number of results to return per page
	Size *int64 `default:"100" queryParam:"style=form,explode=true,name=size"`
	// Entity Type
	Slug string `pathParam:"style=simple,explode=false,name=slug"`
}

func (g GetRelationsV3Request) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRelationsV3Request) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"id", "slug"}); err != nil {
		return err
	}
	return nil
}

func (g *GetRelationsV3Request) GetExcludeSchemas() []string {
	if g == nil {
		return nil
	}
	return g.ExcludeSchemas
}

func (g *GetRelationsV3Request) GetFields() []string {
	if g == nil {
		return nil
	}
	return g.Fields
}

func (g *GetRelationsV3Request) GetFrom() *int64 {
	if g == nil {
		return nil
	}
	return g.From
}

func (g *GetRelationsV3Request) GetHydrate() *bool {
	if g == nil {
		return nil
	}
	return g.Hydrate
}

func (g *GetRelationsV3Request) GetID() string {
	if g == nil {
		return ""
	}
	return g.ID
}

func (g *GetRelationsV3Request) GetIncludeReverse() *bool {
	if g == nil {
		return nil
	}
	return g.IncludeReverse
}

func (g *GetRelationsV3Request) GetIncludeSchemas() []string {
	if g == nil {
		return nil
	}
	return g.IncludeSchemas
}

func (g *GetRelationsV3Request) GetMode() *shared.EntityRelationsModeQueryParam {
	if g == nil {
		return nil
	}
	return g.Mode
}

func (g *GetRelationsV3Request) GetSize() *int64 {
	if g == nil {
		return nil
	}
	return g.Size
}

func (g *GetRelationsV3Request) GetSlug() string {
	if g == nil {
		return ""
	}
	return g.Slug
}

// GetRelationsV3ResponseBody - A generic error returned by the API
type GetRelationsV3ResponseBody struct {
	// The error message
	Error *string `json:"error,omitempty"`
	// The HTTP status code of the error
	Status *int64 `json:"status,omitempty"`
}

func (g *GetRelationsV3ResponseBody) GetError() *string {
	if g == nil {
		return nil
	}
	return g.Error
}

func (g *GetRelationsV3ResponseBody) GetStatus() *int64 {
	if g == nil {
		return nil
	}
	return g.Status
}

type GetRelationsV3Response struct {
	// HTTP response content type for this operation
	ContentType string
	// Success
	GetRelationsRespWithPagination *shared.GetRelationsRespWithPagination
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The requested resource was not found
	Object *GetRelationsV3ResponseBody
}

func (g *GetRelationsV3Response) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetRelationsV3Response) GetGetRelationsRespWithPagination() *shared.GetRelationsRespWithPagination {
	if g == nil {
		return nil
	}
	return g.GetRelationsRespWithPagination
}

func (g *GetRelationsV3Response) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetRelationsV3Response) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetRelationsV3Response) GetObject() *GetRelationsV3ResponseBody {
	if g == nil {
		return nil
	}
	return g.Object
}
